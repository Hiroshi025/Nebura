openapi: "3.0.0"
info:
  title: "NEBURA AI"
  description: |
    Asistent API is a RESTful API that allows you to interact with the Bot Asistent platform.
    You can use this API to manage your account and interact with the Bot Asistent platform.
    This API is built with Node.js, Express.js, and MongoDB.
  version: "0.1.1-alpha"
  contact:
    name: "Hiroshi"
    email: "contact@hiroshi-dev.me"
    url: "https://docs.hiroshi-dev.me"
  termsOfService: "https://docs.hiroshi-dev.me/mas/terminos-y-usos"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"

paths:
  ###### LICENSE ROUTES #######

  /licenses:
    post:
      operationId: createLicense
      tags:
        - Licenses
      security:
        - bearerAuth: []
      summary: Create a new license
      description: |
        Creates a new software license with specified parameters.
        Requires admin privileges.
      parameters:
        - name: Authorization
          in: header
          description: Bearer token for authentication
          required: true
          schema:
            type: string
            example: "Bearer your.jwt.token.here"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLicenseRequest"
      responses:
        201:
          description: License created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenseResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"

    get:
      operationId: listLicenses
      tags:
        - Licenses
      security:
        - bearerAuth: []
      summary: List all licenses
      description: Retrieve a list of all licenses in the system
      parameters:
        - name: Authorization
          in: header
          description: Bearer token for authentication
          required: true
          schema:
            type: string
            example: "Bearer your.jwt.token.here"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/License"
        401:
          $ref: "#/components/responses/Unauthorized"

  /licenses/{id}:
    get:
      operationId: getLicense
      tags:
        - Licenses
      security:
        - bearerAuth: []
      summary: Get license details
      description: Retrieve detailed information about a specific license
      parameters:
        - $ref: "#/components/parameters/licenseId"
        - name: Authorization
          in: header
          description: Bearer token for authentication
          required: true
          schema:
            type: string
            example: "Bearer your.jwt.token.here"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenseResponse"
        404:
          $ref: "#/components/responses/NotFound"

    put:
      operationId: updateLicense
      tags:
        - Licenses
      security:
        - bearerAuth: []
      summary: Update a license
      description: Update license properties
      parameters:
        - $ref: "#/components/parameters/licenseId"
        - name: Authorization
          in: header
          description: Bearer token for authentication
          required: true
          schema:
            type: string
            example: "Bearer your.jwt.token.here"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLicenseRequest"
      responses:
        200:
          description: License updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LicenseResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"

    delete:
      operationId: deleteLicense
      tags:
        - Licenses
      security:
        - bearerAuth: []
      summary: Delete a license
      description: Permanently remove a license from the system
      parameters:
        - $ref: "#/components/parameters/licenseId"
        - name: Authorization
          in: header
          description: Bearer token for authentication
          required: true
          schema:
            type: string
            example: "Bearer your.jwt.token.here"
      responses:
        204:
          description: License deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"

  /licenses/validate/{key}:
    post:
      operationId: validateLicense
      tags:
        - Licenses
      summary: Validate a license key
      description: Check if a license key is valid and meets all requirements
      parameters:
        - name: key
          in: path
          description: License key to validate
          required: true
          schema:
            type: string
            example: "LIC-123-456-789"
        - name: hwid
          in: query
          description: Hardware ID to validate against
          required: true
          schema:
            type: string
            example: "HWID12345"
      responses:
        200:
          description: License validation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResponse"
        403:
          description: License validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

  ###### AUTH ROUTES #######

  /auth/{id}:
    get:
      operationId: getUserData
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Retrieve user data from the API using the provided JWT token.
      summary: Get user data from the API.
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve.
          required: true
          schema:
            type: string
            example: "userId123"
        - name: Authorization
          in: header
          description: JWT token for authentication.
          required: true
          schema:
            type: string
      responses:
        200:
          description: User data retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "userId123"
                  discord:
                    type: string
                    example: "123456789"
                  name:
                    type: string
                    example: "John Doe"
                  createdAt:
                    type: string
                    format: date-time
                    example: "2024-08-30T14:53:44.077Z"
                  rol:
                    type: string
                    example: "user"
                  email:
                    type: string
                    example: "user@example.com"
                  password:
                    type: string
                    example: "hashed-password"
                required:
                  - id
                  - discord
                  - name
                  - createdAt
                  - rol
                  - email
                  - password
        400:
          description: Bad request due to invalid parameters or token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /auth/register:
    post:
      operationId: registerUser
      tags:
        - Auth
      security: []
      description: Register a new user in the API and generate a JWT token.
      summary: Register a user in the API.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "secure-password"
                name:
                  type: string
                  example: "John Doe"
                discord:
                  type: string
                  example: "123456789"
      responses:
        200:
          description: User registered successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/register"
              example:
                id: "userId123"
                email: "user@example.com"
                name: "John Doe"
                discord: "123456789"
        400:
          description: Bad request due to invalid input data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                status: false
                message: "Invalid request parameters"
                data: "Email already exists"
  /auth/login:
    post:
      operationId: loginUser
      tags:
        - Auth
      security: []
      description: Authenticate a user and return a JWT token for subsequent requests.
      summary: Login a user in the API.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "secure-password"
      responses:
        200:
          description: User logged in successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login"
              example:
                id: "userId123"
                email: "user@example.com"
                name: "John Doe"
                discord: "123456789"
                token: "jwt-token-123"
        400:
          description: Bad request due to invalid credentials.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                status: false
                message: "Invalid email or password"
                data: null

components:
  schemas:
    error:
      description: "Error response"
      type: object
      properties:
        message:
          type: string
        details:
          type: string
    register:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        id:
          type: string
    login:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        token:
          type: string
    CreateLicenseRequest:
      type: object
      required:
        - type
        - userId
        - adminId
        - hwid
        - validUntil
      properties:
        type:
          $ref: "#/components/schemas/LicenseType"
        userId:
          type: string
          description: ID of user this license is assigned to
          example: "507f1f77bcf86cd799439011"
        adminId:
          type: string
          description: ID of admin creating the license
          example: "507f1f77bcf86cd799439012"
        hwid:
          type: array
          items:
            type: string
          description: List of allowed hardware IDs
          example: ["HWID12345"]
        requestLimit:
          type: integer
          description: Maximum allowed API requests
          default: 1000
          example: 5000
        validUntil:
          type: string
          format: date-time
          description: Expiration date
          example: "2024-12-31T23:59:59Z"
        metadata:
          type: object
          description: Additional custom data
          example: { "features": ["premium", "api-access"] }

    UpdateLicenseRequest:
      type: object
      properties:
        hwid:
          type: array
          items:
            type: string
          description: Updated list of hardware IDs
          example: ["HWID12345", "HWID67890"]
        requestLimit:
          type: integer
          description: New request limit
          example: 10000
        validUntil:
          type: string
          format: date-time
          description: New expiration date
          example: "2025-12-31T23:59:59Z"
        status:
          $ref: "#/components/schemas/LicenseStatus"

    LicenseResponse:
      type: object
      properties:
        message:
          type: string
          example: "License created successfully"
        data:
          $ref: "#/components/schemas/License"

    License:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439013"
        type:
          $ref: "#/components/schemas/LicenseType"
        userId:
          type: string
          example: "507f1f77bcf86cd799439011"
        adminId:
          type: string
          example: "507f1f77bcf86cd799439012"
        hwid:
          type: array
          items:
            type: string
          example: ["HWID12345"]
        requestLimit:
          type: integer
          example: 5000
        requestCount:
          type: integer
          example: 42
        validFrom:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        validUntil:
          type: string
          format: date-time
          example: "2024-12-31T23:59:59Z"
        status:
          $ref: "#/components/schemas/LicenseStatus"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-02T00:00:00Z"

    ValidationResponse:
      type: object
      properties:
        valid:
          type: boolean
          example: true
        remainingRequests:
          type: integer
          example: 4958
        expiresAt:
          type: string
          format: date-time
          example: "2024-12-31T23:59:59Z"

    ValidationError:
      type: object
      properties:
        valid:
          type: boolean
          example: false
        reason:
          type: string
          example: "HWID_MISMATCH"
        message:
          type: string
          example: "License not valid for this hardware"

    LicenseType:
      type: string
      enum: [FREE, BASIC, PREMIUM, ENTERPRISE, CUSTOM]
      example: "PREMIUM"

    LicenseStatus:
      type: string
      enum: [ACTIVE, EXPIRED, BANNED, REVOKED]
      example: "ACTIVE"

  parameters:
    licenseId:
      name: id
      in: path
      description: License ID
      required: true
      schema:
        type: string
        example: "507f1f77bcf86cd799439013"

  responses:
    BadRequest:
      description: "Invalid request data"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid HWID format"

    Unauthorized:
      description: "Missing or invalid authentication"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Authentication required"

    Forbidden:
      description: "Insufficient permissions"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Admin privileges required"

    NotFound:
      description: "Resource not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "License not found"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

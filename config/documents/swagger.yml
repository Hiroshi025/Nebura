openapi: "3.0.0"
info:
  title: "NEBURA AI"
  description: |
    Asistent API is a RESTful API that allows you to interact with the Bot Asistent platform.
    You can use this API to manage your account and interact with the Bot Asistent platform.
    This API is built with Node.js, Express.js, and MongoDB.

    This API is built by Hiroshi.
    You can find more info about this API in the documentation.
    You can find the documentation in the following link: [Bot Asistent API Documentation](https://docs.hiroshi-dev.me)

    This API is built for educational purposes.
    You can find the source code in the following link: [Bot Asistent API Source Code](  )
  version: "0.1.1-alpha"
  contact:
    name: "Hiroshi"
    email: "contact@hiroshi-dev.me"
    url: "https://docs.hiroshi-dev.me"
  termsOfService: "https://docs.hiroshi-dev.me/mas/terminos-y-usos"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"

paths:
  ###### AUTH ROUTES #######

  /auth/{id}:
    get:
      operationId: getUserData
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Retrieve user data from the API using the provided JWT token.
      summary: Get user data from the API.
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve.
          required: true
          schema:
            type: string
            example: "userId123"
        - name: Authorization
          in: header
          description: JWT token for authentication.
          required: true
          schema:
            type: string
      responses:
        200:
          description: User data retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "John Doe"
                  createdAt:
                    type: string
                    format: date-time
                    example: "2024-08-30T14:53:44.077Z"
                  email:
                    type: string
                    example: "user@example.com"
                  password:
                    type: string
                    example: "hashed-password"
                required:
                  - name
                  - createdAt
                  - email
                  - password
        400:
          description: Bad request due to invalid parameters or token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    put:
      operationId: updateUser
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Update user data in the API using the provided JWT token.
      summary: Update user data.
      parameters:
        - name: id
          in: path
          description: ID of the user to update.
          required: true
          schema:
            type: string
            example: "userId123"
        - name: Authorization
          in: header
          description: JWT token for authentication.
          required: true
          schema:
            type: string
      requestBody:
        description: User data to update.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "new-hashed-password"
              required:
                - name
                - email
      responses:
        200:
          description: User data updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User data updated successfully."
                  updatedAt:
                    type: string
                    format: date-time
                    example: "2024-08-31T15:00:00.000Z"
        400:
          description: Bad request due to invalid data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        401:
          description: Unauthorized - invalid or missing JWT token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /auth/register:
    post:
      operationId: registerUser
      tags:
        - Auth
      security: []
      description: Register a new user in the API and generate a JWT token.
      summary: Register a user in the API.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "secure-password"
                name:
                  type: string
                  example: "John Doe"
      responses:
        200:
          description: User registered successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/register"
              example:
                email: "user@example.com"
                name: "John Doe"
        400:
          description: Bad request due to invalid input data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                status: false
                message: "Invalid request parameters"
                data: "Email already exists"

  /auth/login:
    post:
      operationId: loginUser
      tags:
        - Auth
      security: []
      description: Authenticate a user and return a JWT token for subsequent requests.
      summary: Login a user in the API.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "secure-password"
      responses:
        200:
          description: User logged in successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login"
              example:
                id: "userId123"
                email: "user@example.com"
                name: "John Doe"
                token: "jwt-token-123"
        400:
          description: Bad request due to invalid credentials.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
              example:
                status: false
                message: "Invalid email or password"
                data: null

components:
  schemas:
    error:
      description: "Error response"
      type: object
      properties:
        message:
          type: string
        details:
          type: string
    register:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        id:
          type: string
    login:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        token:
          type: string

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//******************* API MODELS ********************//

model UserAPI {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blockedIPs BlockedIP[] @relation("BlockedUserRelation")
  bans       BanUser[]   @relation("UserBans")
  tasks      Task[]      @relation("UserTasks")

  licenses      License[] @relation("UserAPILicenses")
  adminLicenses License[] @relation("AdminLicenses")
}

model License {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  type         LicenseType
  userId       String      @db.ObjectId
  user         UserAPI     @relation("UserAPILicenses", fields: [userId], references: [id])
  adminId      String      @db.ObjectId
  admin        UserAPI     @relation("AdminLicenses", fields: [adminId], references: [id])
  hwid         String[]
  requestLimit Int         @default(1000)
  requestCount Int         @default(0)
  validUntil   DateTime
  lastUsedIp   String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model BlockedIP {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  ipAddress   String    @unique
  blockedUser UserAPI   @relation("BlockedUserRelation", fields: [blockedBy], references: [id])
  blockedBy   String    @db.ObjectId
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  reason      String?
  isActive    Boolean   @default(true)
}

model FailedAttempt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ipAddress   String
  attemptTime DateTime @default(now())
  userAgent   String?
  licenseKey  String?

  @@index([ipAddress])
  @@index([attemptTime])
}

model RateLimitViolation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  ipAddress     String
  endpoint      String
  violationTime DateTime @default(now())

  @@index([ipAddress])
  @@index([violationTime])
}

//******************* END API MODELS ******************//

//******************* TASK MODELS ********************//

model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  createdBy   String    @map("created_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  dueDate     DateTime? @map("due_date")
  status      String    @default("pending")
  priority    String    @default("medium")
  tags        String[]
  reminder    Json?
  recurrence  Json?
  autoDelete  DateTime? @map("auto_delete")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  completedAt DateTime? @map("completed_at")
  UserAPI     UserAPI?  @relation("UserTasks", fields: [userAPIId], references: [id])
  userAPIId   String?   @db.ObjectId

  @@map("tasks")
}

//******************* END TASK MODELS ******************//

//******************* WHATSAPP MODELS *****************//

model WhatsApp {
  id        String   @id @default(cuid()) @map("_id") @db.ObjectId
  session   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//******************* END WHATSAPP MODELS ************//

//******************* DISCORD MODELS ****************//

model MyDiscord {
  id           String   @id @default(cuid()) @map("_id") @db.ObjectId
  clientId     String   @unique
  clientSecret String
  token        String   @unique
  logconsole   Boolean  @default(false)
  errorlog     Boolean  @default(false)
  webhookURL   String?
  logchannel   String?
  createdAt    DateTime @default(now())
}

model MyGuild {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  guildId   String  @unique
  modlogId  String? @db.ObjectId
  discordId String
  rooms     String?

  reminders Reminder[]
  warns     UserWarn[]
  bans      BanUser[]

  modlog    ServerModlog? @relation
  eventlogs EventLogs?
  economy   Economy?
  captcha   Captcha?

  membercount_channel1 String?
  membercount_message1 String?
  membercount_channel2 String?
  membercount_message2 String?
  membercount_channel3 String?
  membercount_message3 String?
  membercount_channel4 String?
  membercount_message4 String?
  membercount_channel5 String?
  membercount_message5 String?

  suggestChannel String?
  embedColor     String?
  footerText     String?
  approveEmoji   String?
  denyEmoji      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BanUser {
  id            String       @id @default(cuid()) @map("_id")
  guildId       String       @db.ObjectId
  guild         MyGuild      @relation(fields: [guildId], references: [id])
  userId        String       @db.ObjectId
  user          UserAPI      @relation("UserBans", fields: [userId], references: [id])
  userDiscordId String?      @db.ObjectId
  userDiscord   UserDiscord? @relation(fields: [userDiscordId], references: [id])
  banReason     String?
  banTime       DateTime?
  createdAt     DateTime     @default(now())
}

model UserWarn {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  guildId    String       @db.ObjectId
  guild      MyGuild      @relation(fields: [guildId], references: [id])
  userId     String       @db.ObjectId
  user       UserDiscord? @relation(fields: [userId], references: [id])
  warnReason String
  warnDate   String
  moderator  String
}

model ServerModlog {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  guildId   String  @unique @db.ObjectId
  guild     MyGuild @relation(fields: [guildId], references: [id])
  channelId String

  @@map("serverModlogs")
}

model Reminder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  guildId   String   @db.ObjectId
  guild     MyGuild  @relation(fields: [guildId], references: [id])
  message   String
  remindAt  DateTime
  createdAt DateTime @default(now())
  isSent    Boolean  @default(false)

  @@index([remindAt])
}

model Economy {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  guildId        String  @unique @db.ObjectId
  guild          MyGuild @relation(fields: [guildId], references: [id])
  currencyName   String
  currencyEmoji  String
  currencyPerMsg String
}

model UserInventory {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  guildId         String
  userId          String
  itemIdentifier  String
  itemName        String
  itemDescription String
  itemPrice       String
  role            String
  money           Float
}

model ShopEconomy {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  guildId String

  itemName        String
  itemDescription String
  itemPrice       String
  itemIdentifier  String @unique

  role  String
  money Float
}

model UserEconomy {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  guildId      String
  userId       String
  messageCount Int?   @default(0)

  balance   Float @default(0)
  lostduels Int?  @default(0)
  wonduels  Int?  @default(0)
}

model UserDiscord {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  userId String     @unique
  guilds Int?       @default(0)
  warns  UserWarn[]
  bans   BanUser[]
}

model UserLevel {
  id          String  @id @default(cuid()) @map("_id")
  guildId     String
  userId      String
  xp          Int
  level       Int
  background  String?
  barColor    String?
  borderColor String?
  blur        Int?

  @@unique([guildId, userId]) // Clave Ãºnica compuesta
}

model LevelConfig {
  id        String  @id @default(cuid()) @map("_id")
  guildId   String
  channelId String?
  status    Boolean
}

model Captcha {
  id        String  @id @map("_id") @db.ObjectId
  isEnabled Boolean @default(false)
  role      String
  guild     MyGuild @relation(fields: [id], references: [id])
}

model Suggestion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  suggestId  String
  messageId  String   @unique
  content    String
  imageUrl   String?
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  voters     String[] @default([]) // Array of user IDs who upvoted
  downvoters String[] @default([]) // Array of user IDs who downvoted
  authorId   String
  guildId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type EventLogs {
  enabled   Boolean
  channelId String?
  events    String[]
}

//******************* END DISCORD MODELS **************//

//******************* LICENSE ENUMS *******************//

enum LicenseType {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
  CUSTOM
}

enum LicenseStatus {
  ACTIVE
  EXPIRED
  BANNED
  REVOKED
}

//******************* END LICENSE ENUMS *****************//

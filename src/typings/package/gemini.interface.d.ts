import { Request } from "express";

/**
 * Options for configuring the Gemini API.
 */
export interface GeminiOptions {
  /**
   * The API key used for authentication with the Gemini API.
   */
  apiKey: string;

  /**
   * The model to be used for processing requests.
   */
  model: string;

  /**
   * Optional system instruction to guide the model's behavior.
   */
  systemInstruction?: string;

  /**
   * Optional hashed version of the API key for added security.
   */
  apiKeyHash?: string;
}

/**
 * Response structure returned by the Gemini API.
 */
export interface GeminiResponse {
  /**
   * The response generated by the model.
   */
  response: string;

  /**
   * The model used to generate the response.
   */
  model: string;

  /**
   * The timestamp indicating when the response was generated.
   */
  timestamp: Date;

  /**
   * Optional hashed version of the user's token for added security.
   */
  userTokenHash?: string;
}

/**
 * Request structure for sending text-based input to the Gemini API.
 */
export interface GeminiTextRequest {
  /**
   * The text input to be processed by the model.
   */
  text: string;

  /**
   * Optional system instruction to guide the model's behavior.
   */
  systemInstruction?: string;
}

/**
 * Request structure for sending file-based input to the Gemini API.
 */
export interface GeminiFileRequest {
  /**
   * The file to be processed by the model, represented as a Buffer.
   */
  file: Buffer;

  /**
   * The MIME type of the file being sent.
   */
  mimeType: string;

  /**
   * Optional text input to accompany the file.
   */
  text?: string;

  /**
   * Optional system instruction to guide the model's behavior.
   */
  systemInstruction?: string;
}

/**
 * Request structure for sending both text and file-based input to the Gemini API.
 */
export interface GeminiCombinedRequest {
  /**
   * The text input to be processed by the model.
   */
  text: string;

  /**
   * The file to be processed by the model, represented as a Buffer.
   */
  file: Buffer;

  /**
   * The MIME type of the file being sent.
   */
  mimeType: string;

  /**
   * Optional system instruction to guide the model's behavior.
   */
  systemInstruction?: string;
}

/**
 * Extended Express Request object with additional Gemini configuration.
 */
export interface AuthenticatedRequest extends Request {
  /**
   * Optional Gemini configuration object containing API key, model, and hashed API key.
   */
  geminiConfig?: {
    /**
     * The API key used for authentication with the Gemini API.
     */
    apiKey: string;

    /**
     * The model to be used for processing requests.
     */
    model: string;

    /**
     * The hashed version of the API key for added security.
     */
    apiKeyHash: string;
  };
}

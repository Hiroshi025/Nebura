{"version":3,"file":"jest.config.js","sources":["jest.config.ts"],"sourceRoot":"/","sourcesContent":["/**\r\n * For a detailed explanation regarding each configuration property, visit:\r\n * https://jestjs.io/docs/configuration\r\n */\r\n\r\nimport type { Config } from \"jest\";\r\nimport { pathsToModuleNameMapper } from \"ts-jest\";\r\n\r\nimport { compilerOptions } from \"./tsconfig.json\";\r\n\r\nconst config: Config = {\r\n  // modulePaths is an array of directory names to be searched recursively up from the requiring module's location\r\n  modulePaths: [compilerOptions.baseUrl],\r\n\r\n  // All imported modules in your tests should be mocked automatically\r\n  // automock: false,\r\n\r\n  // Stop running tests after `n` failures\r\n  // bail: 0,\r\n\r\n  // The directory where Jest should store its cached dependency information\r\n  // cacheDirectory: \"C:\\\\Users\\\\Antonio\\\\AppData\\\\Local\\\\Temp\\\\jest\",\r\n\r\n  // Automatically clear mock calls, instances, contexts and results before every test\r\n  clearMocks: true,\r\n\r\n  // Indicates whether the coverage information should be collected while executing the test\r\n  collectCoverage: false,\r\n\r\n  // An array of glob patterns indicating a set of files for which coverage information should be collected\r\n  // collectCoverageFrom: undefined,\r\n\r\n  // The directory where Jest should output its coverage files\r\n  coverageDirectory: \"__tests__/coverage\",\r\n\r\n  // An array of regexp pattern strings used to skip coverage collection\r\n  coveragePathIgnorePatterns: [\"\\\\\\\\node_modules\\\\\\\\\"],\r\n\r\n  // Indicates which provider should be used to instrument code for coverage\r\n  coverageProvider: \"v8\",\r\n\r\n  // A list of reporter names that Jest uses when writing coverage reports\r\n  // coverageReporters: [\r\n  //   \"json\",\r\n  //   \"text\",\r\n  //   \"lcov\",\r\n  //   \"clover\"\r\n  // ],\r\n\r\n  // An object that configures minimum threshold enforcement for coverage results\r\n  // coverageThreshold: undefined,\r\n\r\n  // A path to a custom dependency extractor\r\n  // dependencyExtractor: undefined,\r\n\r\n  // Make calling deprecated APIs throw helpful error messages\r\n  // errorOnDeprecated: false,\r\n\r\n  // The default configuration for fake timers\r\n  // fakeTimers: {\r\n  //   \"enableGlobally\": false\r\n  // },\r\n\r\n  // Force coverage collection from ignored files using an array of glob patterns\r\n  // forceCoverageMatch: [],\r\n\r\n  // A path to a module which exports an async function that is triggered once before all test suites\r\n  // globalSetup: undefined,\r\n\r\n  // A path to a module which exports an async function that is triggered once after all test suites\r\n  // globalTeardown: undefined,\r\n\r\n  // A set of global variables that need to be available in all test environments\r\n  // globals: {},\r\n\r\n  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\r\n  // maxWorkers: \"50%\",\r\n\r\n  // An array of directory names to be searched recursively up from the requiring module's location\r\n  // moduleDirectories: [\r\n  //   \"node_modules\"\r\n  // ],\r\n\r\n  // An array of file extensions your modules use\r\n  // moduleFileExtensions: [\r\n  //   \"js\",\r\n  //   \"mjs\",\r\n  //   \"cjs\",\r\n  //   \"jsx\",\r\n  //   \"ts\",\r\n  //   \"tsx\",\r\n  //   \"json\",\r\n  //   \"node\"\r\n  // ],\r\n\r\n  // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module\r\nmoduleNameMapper: {\r\n  ...pathsToModuleNameMapper(compilerOptions.paths),\r\n  \"^@config/(.*)$\": \"<rootDir>/config/$1\", // <-- Corrección aquí\r\n  \"^@/(.*)$\": \"<rootDir>/src/$1\",\r\n},\r\n\r\n  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\r\n  // modulePathIgnorePatterns: [],\r\n\r\n  // Activates notifications for test results\r\n  notify: true,\r\n\r\n  // An enum that specifies notification mode. Requires { notify: true }\r\n  notifyMode: \"always\",\r\n\r\n  // A preset that is used as a base for Jest's configuration\r\n  preset: \"ts-jest\",\r\n\r\n  // Run tests from one or more projects\r\n  // projects: undefined,\r\n\r\n  // Use this configuration option to add custom reporters to Jest\r\n  // reporters: undefined,\r\n\r\n  // Automatically reset mock state before every test\r\n  resetMocks: true,\r\n\r\n  // Reset the module registry before running each individual test\r\n  resetModules: true,\r\n\r\n  // A path to a custom resolver\r\n  // resolver: undefined,\r\n\r\n  // Automatically restore mock state and implementation before every test\r\n  // restoreMocks: false,\r\n\r\n  // The root directory that Jest should scan for tests and modules within\r\n  // rootDir: undefined,\r\n\r\n  // A list of paths to directories that Jest should use to search for files in\r\n  // roots: [\r\n  //  \"<rootDir>/src\",\r\n  //  \"<rootDir>/__tests__\",\r\n  // ],\r\n\r\n  // Allows you to use a custom runner instead of Jest's default test runner\r\n  // runner: \"jest-runner\",\r\n\r\n  // The paths to modules that run some code to configure or set up the testing environment before each test\r\n  // setupFiles: [\"<rootDir>/jest.setup.ts\"],\r\n\r\n  // A list of paths to modules that run some code to configure or set up the testing framework before each test\r\n  // setupFilesAfterEnv: [],\r\n\r\n  // The number of seconds after which a test is considered as slow and reported as such in the results.\r\n  // slowTestThreshold: 5,\r\n\r\n  // A list of paths to snapshot serializer modules Jest should use for snapshot testing\r\n  // snapshotSerializers: [],\r\n\r\n  // The test environment that will be used for testing\r\n  testEnvironment: \"node\",\r\n\r\n  // Options that will be passed to the testEnvironment\r\n  // testEnvironmentOptions: {},\r\n\r\n  // Adds a location field to test results\r\n  // testLocationInResults: false,\r\n\r\n  // The glob patterns Jest uses to detect test files\r\n  testMatch: [\"**/__tests__/**/*.[jt]s?(x)\", \"**/?(*.)+(spec|test).[tj]s?(x)\"],\r\n\r\n  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\r\n  testPathIgnorePatterns: [\"\\\\\\\\node_modules\\\\\\\\\", \"\\\\\\\\helpers\\\\\\\\\", \"\\\\\\\\utils\\\\\\\\\"],\r\n\r\n  // The regexp pattern or array of patterns that Jest uses to detect test files\r\n  // testRegex: [],\r\n\r\n  // This option allows the use of a custom results processor\r\n  // testResultsProcessor: undefined,\r\n\r\n  // This option allows use of a custom test runner\r\n  // testRunner: \"jest-circus/runner\",\r\n\r\n  // A map from regular expressions to paths to transformers\r\n  transform: {\r\n    \"^.+\\\\.(ts|tsx)$\": \"ts-jest\",\r\n  },\r\n\r\n  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\r\n  transformIgnorePatterns: [\"\\\\\\\\node_modules\\\\\\\\\", \"\\\\.pnp\\\\.[^\\\\\\\\]+$\"],\r\n\r\n  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\r\n  // unmockedModulePathPatterns: undefined,\r\n\r\n  // Indicates whether each individual test should be reported during the run\r\n  // verbose: undefined,\r\n\r\n  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\r\n  // watchPathIgnorePatterns: [],\r\n\r\n  // Whether to use watchman for file crawling\r\n  // watchman: true,\r\n\r\n  // The configuration of the watch plugins\r\n  displayName: {\r\n    name: \"Asistente\",\r\n    color: \"blue\",\r\n  },\r\n};\r\n\r\nexport default config;\r\n"],"names":[],"mappings":"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","debug_id":"3b85b8e3-acc7-5288-999d-9f3f42d99cf3"}
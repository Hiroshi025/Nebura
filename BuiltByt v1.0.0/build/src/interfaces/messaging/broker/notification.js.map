{"version":3,"file":"notification.js","sources":["src/interfaces/messaging/broker/notification.ts"],"sourceRoot":"/","sourcesContent":["import axios from \"axios\";\r\nimport { APIEmbed, ColorResolvable, EmbedField } from \"discord.js\";\r\nimport nodemailer from \"nodemailer\";\r\n\r\nimport { config } from \"../../../shared/utils/config\";\r\n\r\n/**\r\n * Utility class for sending notifications via Discord webhooks and email.\r\n *\r\n * Supports advanced configuration for Discord embeds and email notifications.\r\n * Handles error reporting and parameter validation for robust notification delivery.\r\n *\r\n * @example\r\n * const notifier = new Notification();\r\n * await notifier.sendWebhookNotification(\"Title\", \"Description\", \"#00FF00\");\r\n * await notifier.sendEmailNotification(\"user@example.com\", \"Subject\", \"<b>Hello</b>\");\r\n */\r\nexport class Notification {\r\n  /**\r\n   * Notification configuration loaded from the application config.\r\n   * @private\r\n   */\r\n  private data: typeof config.moderation.notifications;\r\n\r\n  /**\r\n   * Initializes the Notification utility with configuration.\r\n   */\r\n  constructor() {\r\n    this.data = config.moderation.notifications;\r\n  }\r\n\r\n  /**\r\n   * Sends a notification to a Discord webhook with advanced embed options.\r\n   *\r\n   * Validates parameters and configuration before sending. Supports custom content,\r\n   * username, avatar, timestamp, footer, and timeout. Handles Discord embed color\r\n   * as string (hex), array (RGB), or number.\r\n   *\r\n   * @param title - The embed title (required).\r\n   * @param description - The embed description (required).\r\n   * @param color - The embed color (hex string, RGB array, or number).\r\n   * @param fields - Optional array of embed fields.\r\n   * @param options - Additional options for the webhook message.\r\n   * @returns Promise resolving to an object with status and response data or error.\r\n   *\r\n   * @example\r\n   * await notifier.sendWebhookNotification(\r\n   *   \"Alert\",\r\n   *   \"Something happened\",\r\n   *   \"#FF0000\",\r\n   *   [{ name: \"Field\", value: \"Value\" }],\r\n   *   { content: \"Custom content\", username: \"Bot\" }\r\n   * );\r\n   */\r\n  public async sendWebhookNotification(\r\n    title: string,\r\n    description: string,\r\n    color: ColorResolvable,\r\n    fields?: EmbedField[],\r\n    options?: {\r\n      content?: string;\r\n      username?: string;\r\n      avatarURL?: string;\r\n      timestamp?: boolean;\r\n      footer?: { text: string; iconURL?: string };\r\n      timeout?: number;\r\n    },\r\n  ) {\r\n    try {\r\n      // Validaci칩n b치sica de par치metros\r\n      if (!title || typeof title !== \"string\" || title.trim().length === 0) {\r\n        throw new Error(\"Title is required and must be a non-empty string\");\r\n      }\r\n      if (!description || typeof description !== \"string\" || description.trim().length === 0) {\r\n        throw new Error(\"Description is required and must be a non-empty string\");\r\n      }\r\n      if (typeof color !== \"string\" && !Array.isArray(color) && typeof color !== \"number\") {\r\n        throw new Error(\"Invalid color format\");\r\n      }\r\n      if (\r\n        !this.data?.urlapi ||\r\n        !this.data?.version ||\r\n        !this.data?.webhooks?.id ||\r\n        !this.data?.webhooks?.token\r\n      ) {\r\n        throw new Error(\"Webhook configuration is missing or incomplete\");\r\n      }\r\n      if (!process.env.TOKEN_DISCORD) {\r\n        throw new Error(\"Discord bot token is missing in configuration\");\r\n      }\r\n\r\n      // Configuraci칩n por defecto\r\n      const defaultOptions = {\r\n        content: \"游댒 Notification Alert\",\r\n        username: \"API Notifications\",\r\n        avatarURL: this.data.webhooks.avatarURL,\r\n        timestamp: true,\r\n        timeout: 5000,\r\n      };\r\n\r\n      const mergedOptions = { ...defaultOptions, ...options };\r\n\r\n      // Construir el embed\r\n      const embed: APIEmbed = {\r\n        title,\r\n        description,\r\n        color:\r\n          typeof color === \"string\"\r\n            ? parseInt(color.replace(\"#\", \"\"), 16)\r\n            : Array.isArray(color)\r\n              ? (color[0] << 16) + (color[1] << 8) + color[2]\r\n              : color,\r\n        fields: fields ?? [],\r\n        timestamp: mergedOptions.timestamp ? new Date().toISOString() : undefined,\r\n      };\r\n\r\n      if (mergedOptions.footer) {\r\n        embed.footer = mergedOptions.footer;\r\n      }\r\n\r\n      // Enviar la solicitud\r\n      const response = await axios({\r\n        baseURL: `${this.data.urlapi}/${this.data.version}`,\r\n        url: `/webhooks/${this.data.webhooks.id}/${this.data.webhooks.token}`,\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bot ${process.env.TOKEN_DISCORD}`,\r\n        },\r\n        data: {\r\n          content: mergedOptions.content,\r\n          username: mergedOptions.username,\r\n          avatar_url: mergedOptions.avatarURL,\r\n          tts: false,\r\n          embeds: [embed],\r\n        },\r\n        timeout: mergedOptions.timeout,\r\n      });\r\n\r\n      return {\r\n        status: true,\r\n        data: response.data,\r\n      };\r\n    } catch (error) {\r\n      // Manejo detallado de errores\r\n      if (axios.isAxiosError(error)) {\r\n        const errorMessage = error.response?.data?.message || error.message;\r\n        return {\r\n          status: false,\r\n          message: `Failed to send webhook notification: ${errorMessage}`,\r\n          error: error.response?.data ?? error.message,\r\n        };\r\n      }\r\n      return {\r\n        status: false,\r\n        message: error instanceof Error ? error.message : \"Unknown error occurred\",\r\n        error,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a highly customizable notification email using Gmail.\r\n   *\r\n   * Validates parameters and environment variables. Supports attachments,\r\n   * plain text fallback, and reply-to address.\r\n   *\r\n   * @param to - Recipient email address.\r\n   * @param subject - Email subject.\r\n   * @param html - HTML content of the email.\r\n   * @param options - Optional nodemailer options (attachments, text, replyTo, from).\r\n   * @returns Promise resolving to an object with status and info or error.\r\n   *\r\n   * @example\r\n   * await notifier.sendEmailNotification(\r\n   *   \"user@example.com\",\r\n   *   \"Subject\",\r\n   *   \"<b>Hello</b>\",\r\n   *   { attachments: [{ filename: \"file.txt\", content: \"data\" }] }\r\n   * );\r\n   */\r\n  public async sendEmailNotification(\r\n    to: string,\r\n    subject: string,\r\n    html: string,\r\n    options?: Partial<{\r\n      from: string;\r\n      attachments: any[];\r\n      text: string;\r\n      replyTo: string;\r\n    }>,\r\n  ) {\r\n    try {\r\n      // Validaciones de par치metros\r\n      if (!to || typeof to !== \"string\" || !to.includes(\"@\")) {\r\n        throw new Error(\"Recipient email address (to) is required and must be valid\");\r\n      }\r\n      if (!subject || typeof subject !== \"string\" || subject.trim().length === 0) {\r\n        throw new Error(\"Subject is required and must be a non-empty string\");\r\n      }\r\n      if (!html || typeof html !== \"string\" || html.trim().length === 0) {\r\n        throw new Error(\"HTML content is required and must be a non-empty string\");\r\n      }\r\n      if (!process.env.USER_EMAIL || !process.env.PASS_EMAIL) {\r\n        throw new Error(\"Gmail credentials are missing in environment variables\");\r\n      }\r\n\r\n      // Configure transporter for Gmail\r\n      const transporter = nodemailer.createTransport({\r\n        service: \"gmail\",\r\n        auth: {\r\n          user: process.env.USER_EMAIL,\r\n          pass: process.env.PASS_EMAIL,\r\n        },\r\n      });\r\n\r\n      const mailOptions = {\r\n        from: options?.from || process.env.USER_EMAIL,\r\n        to,\r\n        subject,\r\n        html,\r\n        text: options?.text,\r\n        attachments: options?.attachments,\r\n        replyTo: options?.replyTo,\r\n      };\r\n\r\n      // Validar opciones de correo\r\n      if (mailOptions.attachments && !Array.isArray(mailOptions.attachments)) {\r\n        throw new Error(\"Attachments must be an array\");\r\n      }\r\n\r\n      const info = await transporter.sendMail(mailOptions);\r\n\r\n      return {\r\n        status: true,\r\n        info,\r\n      };\r\n    } catch (error) {\r\n      // Manejo detallado de errores\r\n      return {\r\n        status: false,\r\n        message: error instanceof Error ? error.message : \"Unknown error occurred\",\r\n        error,\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"dbe038ec-9f1d-5983-a9cb-b3df56e6020a"}
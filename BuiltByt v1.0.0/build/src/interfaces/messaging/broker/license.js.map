{"version":3,"file":"license.js","sources":["src/interfaces/messaging/broker/license.ts"],"sourceRoot":"/","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\r\n\r\nimport { main } from \"@/main\";\r\nimport { config } from \"@utils/config\";\r\nimport { logWithLabel } from \"@utils/functions/console\";\r\n\r\nimport { IPBlocker } from \"./administrator\";\r\nimport { Notification } from \"./notification\";\r\n\r\n/**\r\n * Middleware to handle license validation and IP blocking.\r\n * Ensures that requests are authorized based on license keys, IP addresses, and hardware IDs (HWIDs).\r\n */\r\nexport class LicenseIPMiddleware {\r\n  private notifications: typeof config.moderation.notifications;\r\n  private static instance: LicenseIPMiddleware;\r\n  private ipBlocker = IPBlocker.getInstance();\r\n\r\n  private constructor() {\r\n    this.notifications = config.moderation.notifications;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the singleton instance of the LicenseIPMiddleware.\r\n   * @returns {LicenseIPMiddleware} The singleton instance.\r\n   */\r\n  public static getInstance(): LicenseIPMiddleware {\r\n    if (!LicenseIPMiddleware.instance) {\r\n      LicenseIPMiddleware.instance = new LicenseIPMiddleware();\r\n    }\r\n    return LicenseIPMiddleware.instance;\r\n  }\r\n\r\n  /**\r\n   * Validates the provided license key, client IP, and hardware ID (HWID).\r\n   * @param licenseKey - The license key to validate.\r\n   * @param clientIp - The IP address of the client making the request.\r\n   * @param hwid - The hardware ID of the client making the request.\r\n   * @throws Will throw an error if the license is invalid, expired, or unauthorized.\r\n   * @returns The validated license object.\r\n   */\r\n  private async checkLicense(licenseKey: string, clientIp?: string, hwid?: string) {\r\n    if (!licenseKey) {\r\n      throw new Error(\"License key is required\");\r\n    }\r\n\r\n    const license = await main.prisma.license.findUnique({\r\n      where: { key: licenseKey },\r\n    });\r\n\r\n    if (!license) {\r\n      throw new Error(\"License not found\");\r\n    }\r\n\r\n    // Verificar IP bloqueada\r\n    if (clientIp && this.ipBlocker.isIPBlocked(clientIp)) {\r\n      // Send notification if webhook token is valid\r\n      if (this.notifications.webhooks.token) {\r\n        const notification = new Notification();\r\n        await notification.sendWebhookNotification(\r\n          \"Access Denied: IP Blocked\",\r\n          `The IP address ${clientIp} attempted to access with a blocked IP.`,\r\n          \"#FF0000\",\r\n          [{ name: \"IP Address\", value: clientIp, inline: true }],\r\n        );\r\n      }\r\n      throw new Error(\"IP address has been blocked\");\r\n    }\r\n\r\n    // Verificar HWID si se proporciona\r\n    if (hwid && license.hwid && license.hwid.length > 0 && !license.hwid.includes(hwid)) {\r\n      // Send notification if webhook token is valid\r\n      if (this.notifications.webhooks.token) {\r\n        const notification = new Notification();\r\n        await notification.sendWebhookNotification(\r\n          \"Access Denied: HWID Mismatch\",\r\n          `The HWID ${hwid} does not match the authorized HWIDs for the license.`,\r\n          \"#FFA500\",\r\n          [\r\n            { name: \"HWID\", value: hwid, inline: true },\r\n            { name: \"License Key\", value: licenseKey, inline: true },\r\n          ],\r\n        );\r\n      }\r\n      throw new Error(\"Unauthorized hardware ID\");\r\n    }\r\n\r\n    // Verificar fecha de expiración\r\n    if (license.validUntil < new Date()) {\r\n      // Send notification if webhook token is valid\r\n      if (this.notifications.webhooks.token) {\r\n        const notification = new Notification();\r\n        await notification.sendWebhookNotification(\r\n          \"Access Denied: License Expired\",\r\n          `The license ${licenseKey} has expired.`,\r\n          \"#FF0000\",\r\n          [\r\n            { name: \"License Key\", value: licenseKey, inline: true },\r\n            { name: \"Expiration Date\", value: license.validUntil.toISOString(), inline: true },\r\n          ],\r\n        );\r\n      }\r\n      throw new Error(\"License has expired\");\r\n    }\r\n\r\n    // Verificar límite de solicitudes\r\n    if (license.requestLimit && license.requestCount >= license.requestLimit) {\r\n      // Send notification if webhook token is valid\r\n      if (this.notifications.webhooks.token) {\r\n        const notification = new Notification();\r\n        await notification.sendWebhookNotification(\r\n          \"Access Denied: Request Limit Exceeded\",\r\n          `The license ${licenseKey} has exceeded its request limit.`,\r\n          \"#FF0000\",\r\n          [\r\n            { name: \"License Key\", value: licenseKey, inline: true },\r\n            { name: \"Request Limit\", value: license.requestLimit.toString(), inline: true },\r\n          ],\r\n        );\r\n      }\r\n      throw new Error(\"Request limit exceeded\");\r\n    }\r\n\r\n    return license;\r\n  }\r\n\r\n  /**\r\n   * Returns the Express middleware function for license validation.\r\n   * This middleware validates the license key, client IP, and HWID, and attaches license information to the request object.\r\n   * @returns {Function} The middleware function.\r\n   */\r\n  public getMiddleware() {\r\n    return async (req: Request, res: Response, next: NextFunction) => {\r\n      try {\r\n        const licenseKey = req.headers[\"x-license-key\"] as string;\r\n        const clientIp = req.ip || req.headers[\"x-forwarded-for\"] || req.connection.remoteAddress;\r\n        const hwid = req.headers[\"x-hwid\"] as string;\r\n\r\n        // Extraer la IP real si está detrás de un proxy\r\n        const realIp = typeof clientIp === \"string\" ? clientIp.split(\",\")[0].trim() : \"\";\r\n\r\n        const license = await this.checkLicense(licenseKey, realIp, hwid);\r\n        const ips = license.ips || [];\r\n        // Verificar si la IP ya está registrada\r\n        if (realIp && !ips.includes(realIp)) {\r\n          ips.push(realIp); // Agregar la IP a la lista si no está ya registrada\r\n        }\r\n\r\n        //verificar si hay mas ips registradas que el maximo permitido\r\n        if (license.maxIps && ips.length > license.maxIps) {\r\n          // Eliminar la IP más antigua si se supera el límite\r\n          ips.shift();\r\n        }\r\n\r\n        // Incrementar el contador de solicitudes\r\n        await main.prisma.license.update({\r\n          where: { key: licenseKey },\r\n          data: {\r\n            requestCount: { increment: 1 },\r\n            lastUsedIp: realIp,\r\n            ...(hwid ? { lastUsedHwid: hwid } : {}),\r\n            ips: ips, // Actualizar la lista de IPs\r\n          },\r\n        });\r\n\r\n        // Adjuntar información de licencia e IP a la solicitud\r\n        req.license = {\r\n          ...license,\r\n          type: [\"FREE\", \"BASIC\", \"PREMIUM\"].includes(license.type as string)\r\n            ? (license.type as \"FREE\" | \"BASIC\" | \"PREMIUM\")\r\n            : \"FREE\",\r\n        };\r\n        req.clientIp = realIp;\r\n\r\n        next();\r\n      } catch (error: any) {\r\n        logWithLabel(\"LicenseIP\", \"Error in LicenseIPMiddleware \" + error.message);\r\n\r\n        // Registrar intento fallido para posible bloqueo automático\r\n        if (req.clientIp) {\r\n          await this.recordFailedAttempt(req.clientIp);\r\n        }\r\n\r\n        res.status(403).json({\r\n          error: \"Access denied\",\r\n          reason: \"Invalid license\",\r\n          code: this.getErrorCode(error.message),\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Records a failed attempt for a specific IP address.\r\n   * This method can be extended to implement automatic IP blocking after a certain number of failed attempts.\r\n   * @param _ipAddress - The IP address to record the failed attempt for.\r\n   */\r\n  private async recordFailedAttempt(_ipAddress: string) {\r\n    try {\r\n      // Implementar lógica para registrar intentos fallidos\r\n      // y bloquear IPs después de cierto número de intentos\r\n      logWithLabel(\"IPBlocker\", \"The IP has been blocked due to failed attempts\");\r\n\r\n      // Send notification if webhook token is valid\r\n      if (this.notifications.webhooks.token) {\r\n        const notification = new Notification();\r\n        await notification.sendWebhookNotification(\r\n          \"Failed Attempt Logged\",\r\n          `A failed attempt was logged for IP address ${_ipAddress}.`,\r\n          \"#FFA500\",\r\n          [{ name: \"IP Address\", value: _ipAddress, inline: true }],\r\n        );\r\n      }\r\n\r\n      // Ejemplo: Bloquear después de 5 intentos fallidos\r\n      // (Implementar lógica completa según tus necesidades)\r\n    } catch (error) {\r\n      logWithLabel(\"IPBlocker\", \"Error the IP has been blocked\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maps error messages to specific error codes.\r\n   * @param message - The error message to map.\r\n   * @returns {string} The corresponding error code.\r\n   */\r\n  private getErrorCode(message: string): string {\r\n    const codes: Record<string, string> = {\r\n      \"License key is required\": \"LICENSE_REQUIRED\",\r\n      \"License not found\": \"LICENSE_NOT_FOUND\",\r\n      \"IP address has been blocked\": \"IP_BLOCKED\",\r\n      \"Unauthorized hardware ID\": \"HWID_MISMATCH\",\r\n      \"License has expired\": \"LICENSE_EXPIRED\",\r\n      \"Request limit exceeded\": \"REQUEST_LIMIT_EXCEEDED\",\r\n    };\r\n\r\n    return codes[message] || \"ACCESS_DENIED\";\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"5146b647-dcf1-5131-8653-ec32a98bf3e8"}
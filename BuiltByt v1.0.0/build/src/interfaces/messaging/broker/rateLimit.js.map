{"version":3,"file":"rateLimit.js","sources":["src/interfaces/messaging/broker/rateLimit.ts"],"sourceRoot":"/","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\r\nimport { rateLimit } from \"express-rate-limit\";\r\n\r\nimport { main } from \"@/main\";\r\n\r\nimport { config } from \"../../../shared/utils/config\";\r\nimport { logWithLabel } from \"../../../shared/utils/functions/console\";\r\nimport { IPBlocker } from \"./administrator\";\r\nimport { Notification } from \"./notification\";\r\n\r\nconst ipBlocker = IPBlocker.getInstance();\r\nconst notification = new Notification();\r\n\r\n/**\r\n * Manages rate limiting for the application, including default and custom configurations.\r\n * Also handles IP blocking for repeated violations.\r\n */\r\nexport class RateLimitManager {\r\n  private notifications: typeof config.moderation.notifications;\r\n  private static instance: RateLimitManager;\r\n  private defaultLimiter: any;\r\n\r\n  /**\r\n   * Private constructor to enforce singleton pattern.\r\n   */\r\n  private constructor() {\r\n    this.notifications = config.moderation.notifications;\r\n    // Default rate limiter configuration\r\n    this.defaultLimiter = rateLimit({\r\n      windowMs: 15 * 60 * 1000, // 15 minutes\r\n      max: 100, // Limit each IP to 100 requests per windowMs\r\n      standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\r\n      legacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n      handler: async (req, res) => {\r\n        const ip = req.ip || req.socket.remoteAddress;\r\n        if (ip) {\r\n          await this.recordRateLimitViolation(ip, req.path);\r\n          const violationCount = await this.getViolationCount(ip);\r\n          if (violationCount >= 3) {\r\n            await ipBlocker.blockIP(\r\n              ip,\r\n              \"system\",\r\n              `Automatic block due to ${violationCount} rate limit violations`,\r\n              new Date(Date.now() + 24 * 60 * 60 * 1000), // Block for 24 hours\r\n            );\r\n          }\r\n        }\r\n\r\n        res.status(429).json({\r\n          success: false,\r\n          error: \"Too many requests\",\r\n          message: \"You have exceeded the allowed request limit\",\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieves the singleton instance of the RateLimitManager.\r\n   * @returns {RateLimitManager} The singleton instance.\r\n   */\r\n  public static getInstance(): RateLimitManager {\r\n    if (!RateLimitManager.instance) {\r\n      RateLimitManager.instance = new RateLimitManager();\r\n    }\r\n    return RateLimitManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Gets the default rate limiter middleware.\r\n   * @returns {any} The default rate limiter middleware.\r\n   */\r\n  public getDefaultLimiter() {\r\n    return this.defaultLimiter;\r\n  }\r\n\r\n  /**\r\n   * Creates a custom rate limiter with specific options.\r\n   * @param {any} options - Configuration options for the custom rate limiter.\r\n   * @returns {any} The custom rate limiter middleware.\r\n   */\r\n  public createCustomLimiter(options: any) {\r\n    return rateLimit({\r\n      ...options,\r\n      handler: async (req, res) => {\r\n        const ip = req.ip || req.socket.remoteAddress;\r\n        if (ip) {\r\n          await this.recordRateLimitViolation(ip, req.path);\r\n        }\r\n        res.status(429).json({\r\n          success: false,\r\n          error: \"Too many requests\",\r\n          message: options.message || \"You have exceeded the custom request limit\",\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Records a rate limit violation in the database.\r\n   * @param {string} ip - The IP address of the violator.\r\n   * @param {string} endpoint - The endpoint where the violation occurred.\r\n   * @returns {Promise<void>} A promise that resolves when the violation is recorded.\r\n   */\r\n  public async recordRateLimitViolation(ip: string, endpoint: string): Promise<void> {\r\n    try {\r\n      await main.prisma.rateLimitViolation.create({\r\n        data: {\r\n          ipAddress: ip,\r\n          endpoint,\r\n          violationTime: new Date(),\r\n        },\r\n      });\r\n\r\n      // Send notification if the webhook token is valid\r\n      if (this.notifications.webhooks.token) {\r\n        await notification.sendWebhookNotification(\r\n          \"Rate Limit Violation\",\r\n          `IP: ${ip} has exceeded the request limit on endpoint: ${endpoint}`,\r\n          \"#FF0000\",\r\n          [\r\n            { name: \"IP Address\", value: ip, inline: true },\r\n            { name: \"Endpoint\", value: endpoint, inline: true },\r\n            { name: \"Time\", value: new Date().toISOString(), inline: true },\r\n          ],\r\n          {\r\n            content: \"üö® Rate Limit Violation Alert\",\r\n            username: \"Rate Limit Manager\",\r\n          },\r\n        );\r\n      }\r\n    } catch (error) {\r\n      logWithLabel(\"error\", \"Error recording rate limit violation:\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the count of rate limit violations for a specific IP in the last 24 hours.\r\n   * @param {string} ip - The IP address to check.\r\n   * @returns {Promise<number>} The count of violations.\r\n   */\r\n  public async getViolationCount(ip: string): Promise<number> {\r\n    try {\r\n      const count = await main.prisma.rateLimitViolation.count({\r\n        where: {\r\n          ipAddress: ip,\r\n          violationTime: {\r\n            gte: new Date(Date.now() - 24 * 60 * 60 * 1000), // Last 24 hours\r\n          },\r\n        },\r\n      });\r\n\r\n      // Send notification if the webhook token is valid and the count is critical\r\n      if (this.notifications.webhooks.token && count >= 3) {\r\n        await notification.sendWebhookNotification(\r\n          \"Critical Rate Limit Violations\",\r\n          `IP: ${ip} has reached ${count} violations in the last 24 hours.`,\r\n          \"#FFA500\",\r\n          [\r\n            { name: \"IP Address\", value: ip, inline: true },\r\n            { name: \"Violation Count\", value: count.toString(), inline: true },\r\n            { name: \"Time\", value: new Date().toISOString(), inline: true },\r\n          ],\r\n          {\r\n            content: \"‚ö†Ô∏è Critical Rate Limit Violations Alert\",\r\n            username: \"Rate Limit Manager\",\r\n          },\r\n        );\r\n      }\r\n\r\n      return count;\r\n    } catch (error) {\r\n      logWithLabel(\"error\", \"Error getting rate limit violation count:\");\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Middleware to apply rate limiting based on license type or default settings.\r\n   * Also checks if the IP is blocked.\r\n   * @param {Request} req - The Express request object.\r\n   * @param {Response} res - The Express response object.\r\n   * @param {NextFunction} next - The next middleware function.\r\n   */\r\n  public async getRateLimitMiddleware(req: Request, res: Response, next: NextFunction) {\r\n    try {\r\n      // Check if IP is blocked first\r\n      const ip = req.ip || req.socket.remoteAddress;\r\n      if (ip && ipBlocker.isIPBlocked(ip)) {\r\n        return res.status(403).json({\r\n          success: false,\r\n          error: \"Access denied\",\r\n          message: \"Your IP address has been blocked\",\r\n        });\r\n      }\r\n\r\n      if (req.license) {\r\n        switch (req.license.type) {\r\n          case \"FREE\":\r\n            return this.createCustomLimiter({\r\n              windowMs: 15 * 60 * 1000,\r\n              max: 50,\r\n              message: \"Free tier limit exceeded (50 requests per 15 minutes)\",\r\n            })(req, res, next);\r\n          case \"BASIC\":\r\n            return this.createCustomLimiter({\r\n              windowMs: 15 * 60 * 1000,\r\n              max: 200,\r\n              message: \"Basic tier limit exceeded (200 requests per 15 minutes)\",\r\n            })(req, res, next);\r\n          case \"PREMIUM\":\r\n            return this.createCustomLimiter({\r\n              windowMs: 15 * 60 * 1000,\r\n              max: 1000,\r\n              message: \"Premium tier limit exceeded (1000 requests per 15 minutes)\",\r\n            })(req, res, next);\r\n          default:\r\n            return this.defaultLimiter(req, res, next);\r\n        }\r\n      }\r\n\r\n      return this.defaultLimiter(req, res, next);\r\n    } catch (error) {\r\n      logWithLabel(\"error\", \"Error in rate limit middleware:\");\r\n      next(error);\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"3343f9eb-6b9a-52de-b80c-1b83a0cd1c0c"}
{"version":3,"file":"youtube.js","sources":["src/interfaces/messaging/modules/discord/structure/handlers/youtube.ts"],"sourceRoot":"/","sourcesContent":["/**\r\n * YouTube Notification Handler for Discord Bot\r\n *\r\n * This module integrates YouTube channel monitoring with a Discord bot.\r\n * It periodically checks configured YouTube channels for new videos and sends notifications\r\n * to specified Discord channels using rich embeds.\r\n *\r\n * Main Features:\r\n * - Uses a cron job to poll YouTube channels at regular intervals.\r\n * - Fetches channel and video data using youtubei.js (Innertube).\r\n * - Sends notifications to Discord channels only when a new video is detected.\r\n * - Stores and updates the last notified video in a database (via Prisma).\r\n *\r\n * Key Technologies:\r\n * - Discord.js: For interacting with Discord servers and channels.\r\n * - youtubei.js: For fetching YouTube channel and video data.\r\n * - Prisma: For database access and persistence.\r\n * - Cron: For scheduling periodic checks.\r\n * - Moment.js: For timestamp formatting.\r\n * - ms: For human-friendly time parsing.\r\n *\r\n * Usage:\r\n * Call the exported async function `YouTube(client)` with your Discord client instance.\r\n * The function will set up the cron job and event listeners automatically.\r\n */\r\n\r\nimport { CronJob } from \"cron\";\r\nimport { Guild, TextChannel } from \"discord.js\";\r\nimport moment from \"moment\";\r\nimport ms from \"ms\";\r\nimport { Innertube } from \"youtubei.js\";\r\n\r\nimport { main } from \"@/main\";\r\nimport { EmbedCorrect } from \"@/shared/adapters/extends/embeds.extend\";\r\nimport { MyClient } from \"@modules/discord/client\";\r\n\r\n/**\r\n * Initializes the YouTube notification system for Discord servers.\r\n * This function sets up a cron job to periodically check YouTube channels for new videos\r\n * and sends notifications to configured Discord channels.\r\n *\r\n * @param client - The Discord client instance\r\n * @see https://ytjs.dev/guide/\r\n * @see https://www.npmjs.com/package/cron\r\n */\r\nexport const YouTube = async (client: MyClient) => {\r\n  console.info(\r\n    `[YOUTUBE][INIT] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Initializing YouTube notification system for Discord.`,\r\n  );\r\n\r\n  // Initialize youtube.js client (Innertube)\r\n  // This client is used to fetch YouTube channel and video data.\r\n  const youtube = await Innertube.create();\r\n\r\n  /**\r\n   * Cron job to check YouTube channels for new videos at specific intervals.\r\n   * The cron expression runs the job every 6 minutes (at minute 1, 9, 17, etc.).\r\n   * Uses Europe/Berlin timezone.\r\n   */\r\n  client.Youtubelog = new CronJob(\r\n    \"0 1,9,17,23,29,35,41,47,53,59 * * * *\",\r\n    async function () {\r\n      // Log the start of the cron job\r\n      console.debug(`[YOUTUBE][CRON][START] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Checking YouTube accounts.`);\r\n      // Fetch all guilds (Discord servers) with YouTube configuration from the database\r\n      let guilds = await main.prisma.youtube.findMany({\r\n        include: {\r\n          youtubers: true,\r\n        },\r\n      });\r\n      console.debug(\r\n        `[YOUTUBE][CRON][DB] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Found ${guilds.length} guilds with YouTube configuration.`,\r\n      );\r\n      if (!guilds) {\r\n        // No guilds found in the database\r\n        console.warn(`[YOUTUBE][CRON][DB] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: No guilds found in database.`);\r\n        return;\r\n      }\r\n      // Iterate over each guild and process their YouTube configuration\r\n      for await (const g of guilds) {\r\n        // Get the Discord guild object from the client's cache\r\n        if (!g.serverId) return;\r\n        let guild = client.guilds.cache.get(g.serverId);\r\n        if (!guild) {\r\n          // Guild not found in cache (may have been removed)\r\n          console.warn(\r\n            `[YOUTUBE][CRON][GUILD] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Guild not found in cache: ${g.serverId}`,\r\n          );\r\n          continue;\r\n        }\r\n        console.debug(\r\n          `[YOUTUBE][CRON][GUILD] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Processing guild: ${guild.name} (${guild.id})`,\r\n        );\r\n        // Wait 2 seconds before checking videos for each guild to avoid rate limits\r\n        await setTimeout(() => getVideos(guild), ms(\"2s\"));\r\n      }\r\n      // Log the end of the cron job\r\n      console.debug(\r\n        `[YOUTUBE][CRON][END] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Finished checking all guilds.`,\r\n      );\r\n    },\r\n    null,\r\n    true,\r\n    \"Europe/Berlin\",\r\n  );\r\n\r\n  // Start the cron job when the Discord client is ready\r\n  client.on(\"ready\", async () => {\r\n    console.info(\r\n      `[YOUTUBE][READY] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: YouTube system started. Starting cron job.`,\r\n    );\r\n    client.Youtubelog.start();\r\n  });\r\n\r\n  /**\r\n   * Checks all configured YouTube channels for a given Discord guild.\r\n   * If a new video is found, sends a notification to the configured Discord channel.\r\n   *\r\n   * @param guild - The Discord guild to process\r\n   */\r\n  async function getVideos(guild: Guild) {\r\n    console.debug(\r\n      `[YOUTUBE][GUILD][START] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Checking YouTube channels for guild: ${guild.name} (${guild.id})`,\r\n    );\r\n    // Fetch all YouTube channel configurations for this guild from the database\r\n    let tempData = await main.prisma.youtuber.findMany({ where: { guildId: guild.id } });\r\n    console.debug(\r\n      `[YOUTUBE][GUILD][DB] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Found ${tempData.length} YouTube channels for guild: ${guild.name} (${guild.id})`,\r\n    );\r\n    if (!tempData || !tempData.length) {\r\n      // No YouTube channels configured for this guild\r\n      console.warn(\r\n        `[YOUTUBE][GUILD][DB] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: No YouTube channels configured for guild: ${guild.name} (${guild.id})`,\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Iterate over each YouTube channel configuration for this guild\r\n    for (const chan of tempData) {\r\n      console.debug(\r\n        `[YOUTUBE][CHANNEL][START] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Processing channel config: ${JSON.stringify(chan)}`,\r\n      );\r\n\r\n      // Validate channel configuration\r\n      if (!chan.userId || !chan.channelId) {\r\n        // Missing required fields\r\n        console.warn(\r\n          `[YOUTUBE][CHANNEL][SKIP] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Missing userId or channelId for config: ${JSON.stringify(chan)}`,\r\n        );\r\n        continue;\r\n      }\r\n\r\n      if (chan.channelId === undefined || chan.channelId.length < 18) {\r\n        // Invalid Discord channel ID\r\n        console.warn(\r\n          `[YOUTUBE][CHANNEL][SKIP] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Invalid channelId: ${chan.channelId}`,\r\n        );\r\n        continue;\r\n      }\r\n\r\n      try {\r\n        // Fetch YouTube channel information using youtube.js (Innertube)\r\n        const channel = await youtube.getChannel(chan.userId);\r\n\r\n        if (!channel) {\r\n          // Channel not found or error fetching data\r\n          console.error(\r\n            `[YOUTUBE][CHANNEL][INFO_ERROR] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} | Channel: ${chan.userId} | Error: Channel not found`,\r\n          );\r\n          continue;\r\n        }\r\n\r\n        // Fetch the list of videos for this channel\r\n        const videosResult = await channel.getVideos();\r\n\r\n        // Normalize the result to always be an array of videos\r\n        const videos = Array.isArray(videosResult) ? videosResult : videosResult?.videos || [];\r\n\r\n        if (!videos || videos.length === 0) {\r\n          // No videos found for this channel\r\n          console.warn(\r\n            `[YOUTUBE][CHANNEL][NO_VIDEO] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: No videos found for channel: ${chan.userId}`,\r\n          );\r\n          continue;\r\n        }\r\n\r\n        // Get the latest video from the list\r\n        const latestVideo = videos[0];\r\n        // Extract relevant information for the notification\r\n        // Extraer título como string\r\n        let title =\r\n          latestVideo.title?.text ||\r\n          (Array.isArray(latestVideo.title?.runs) ? latestVideo.title.runs.map((r: any) => r.text).join(\"\") : \"\\u200b\");\r\n\r\n        // Extraer descripción como string\r\n        let description =\r\n          latestVideo.description_snippet?.text ||\r\n          (Array.isArray(latestVideo.description_snippet?.runs)\r\n            ? latestVideo.description_snippet.runs.map((r: any) => r.text).join(\"\")\r\n            : \"\\u200b\");\r\n\r\n        // Extraer duración\r\n        const duration = latestVideo.length_text?.text || latestVideo.duration?.text || \"Unknown\";\r\n\r\n        // Extraer miniatura del canal (avatar)\r\n        let channelAvatar = null;\r\n        if (Array.isArray(channel.metadata?.thumbnail)) {\r\n          channelAvatar = channel.metadata.thumbnail[0]?.url;\r\n        } else if (channel.metadata?.avatar && Array.isArray(channel.metadata.avatar)) {\r\n          channelAvatar = channel.metadata.avatar[0]?.url;\r\n        }\r\n\r\n        // Extraer la mejor miniatura del video\r\n        let videoThumbnail = null;\r\n        if (Array.isArray(latestVideo.rich_thumbnail) && latestVideo.rich_thumbnail.length > 0) {\r\n          videoThumbnail = latestVideo.rich_thumbnail[0].url;\r\n        } else if (Array.isArray(latestVideo.thumbnails) && latestVideo.thumbnails.length > 0) {\r\n          videoThumbnail = latestVideo.thumbnails[0].url;\r\n        } else {\r\n          videoThumbnail =\r\n            latestVideo.thumbnails?.maxres?.url ||\r\n            latestVideo.thumbnails?.standard?.url ||\r\n            latestVideo.thumbnails?.high?.url ||\r\n            null;\r\n        }\r\n\r\n        // Extraer fecha de publicación y vistas\r\n        const published = latestVideo.published?.text || \"Unknown\";\r\n        const views = latestVideo.view_count?.text || latestVideo.short_view_count?.text || \"Unknown\";\r\n\r\n        // Extraer nombre del autor\r\n        const authorName = channel.title || latestVideo.author?.name || \"Unknown\";\r\n        const userUrl = `https://www.youtube.com/channel/${chan.userId}`;\r\n        const lastVideoId = latestVideo.video_id || latestVideo.id;\r\n        const lastVideoUrl = `https://www.youtube.com/watch?v=${lastVideoId}`;\r\n\r\n        // Construir el embed mejorado\r\n        let embed = new EmbedCorrect()\r\n          .setAuthor({\r\n            name: `${authorName}`,\r\n            iconURL: channelAvatar || `https://i.imgur.com/ThXFUPL.png`,\r\n            url: userUrl,\r\n          })\r\n          .setTitle(`<a:online:983334659075211315> ${authorName} publicó un nuevo video`)\r\n          .setURL(lastVideoUrl)\r\n          .setThumbnail(channelAvatar || `https://i.imgur.com/ThXFUPL.png`)\r\n          .setDescription(`${title}\\n\\n${description}`)\r\n          .addFields([\r\n            {\r\n              name: `Duración`,\r\n              value: `\\`${duration}\\``,\r\n              inline: true,\r\n            },\r\n            {\r\n              name: `Publicado`,\r\n              value: published,\r\n              inline: true,\r\n            },\r\n            {\r\n              name: `Vistas`,\r\n              value: views,\r\n              inline: true,\r\n            },\r\n            {\r\n              name: `Ver en YouTube`,\r\n              value: `[${title}](${lastVideoUrl})`,\r\n              inline: false,\r\n            },\r\n          ])\r\n          .setFooter({ text: `YouTube`, iconURL: `https://i.imgur.com/ThXFUPL.png` })\r\n          .setImage(videoThumbnail)\r\n          .setTimestamp();\r\n\r\n        // Fetch the Discord channel for notifications\r\n        try {\r\n          const ch = await client.channels.fetch(chan.channelId as string);\r\n\r\n          // Only send a notification if the latest video is new (not previously notified)\r\n          if (chan.lastVideo !== lastVideoId) {\r\n            // Replace {user} placeholder in the message with the channel's author name\r\n            const message = chan.message.replace(\"{user}\", authorName);\r\n            await (ch as TextChannel)\r\n              .send({ content: `${message}`, embeds: [embed] })\r\n              .then(async () => {\r\n                // Update the last notified video in the database\r\n                await main.prisma.youtuber.update({\r\n                  where: {\r\n                    id: chan.id,\r\n                  },\r\n                  data: {\r\n                    lastVideo: lastVideoId,\r\n                  },\r\n                });\r\n                console.info(\r\n                  `[YOUTUBE][NOTIFY][SUCCESS] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} | Guild: ${guild.name} (${guild.id}) | Channel: ${chan.channelId} | Video: ${lastVideoUrl} | Notification sent successfully.`,\r\n                );\r\n              })\r\n              .catch((e) => {\r\n                // Handle errors sending the notification\r\n                console.error(\r\n                  `[YOUTUBE][NOTIFY][ERROR] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} | Guild: ${guild.name} (${guild.id}) | Channel: ${chan.channelId} | Error sending notification:`,\r\n                  e,\r\n                );\r\n              });\r\n          } else {\r\n            // No new video to notify\r\n            console.debug(\r\n              `[YOUTUBE][NOTIFY][SKIP] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} | Guild: ${guild.name} (${guild.id}) | Channel: ${chan.channelId} | No new video to notify.`,\r\n            );\r\n          }\r\n        } catch (e) {\r\n          // Handle errors fetching the Discord channel\r\n          console.error(\r\n            `[YOUTUBE][CHANNEL][FETCH_ERROR] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} | Guild: ${guild.name} (${guild.id}) | Channel: ${chan.channelId} | Error fetching Discord channel:`,\r\n            e,\r\n          );\r\n        }\r\n      } catch (error) {\r\n        // Handle errors fetching YouTube channel or video data\r\n        console.error(\r\n          `[YOUTUBE][CHANNEL][ERROR] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} | Channel: ${chan.userId} | Error:`,\r\n          error,\r\n        );\r\n      }\r\n\r\n      console.debug(\r\n        `[YOUTUBE][CHANNEL][END] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Finished processing channel config: ${JSON.stringify(chan)}`,\r\n      );\r\n    }\r\n\r\n    console.debug(\r\n      `[YOUTUBE][GUILD][END] | ${moment().format(\"YYYY-MM-DD HH:mm:ss\")} :: Finished checking YouTube channels for guild: ${guild.name} (${guild.id})`,\r\n    );\r\n  }\r\n};\r\n"],"names":[],"mappings":"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","debug_id":"a1942e2b-45b9-5fcf-9072-b9fd87000ef4"}
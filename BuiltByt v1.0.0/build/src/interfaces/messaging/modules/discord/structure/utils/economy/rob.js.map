{"version":3,"file":"rob.js","sources":["src/interfaces/messaging/modules/discord/structure/utils/economy/rob.ts"],"sourceRoot":"/","sourcesContent":["import { Message } from \"discord.js\";\r\n\r\nimport { main } from \"@/main\";\r\nimport { EmbedCorrect, ErrorEmbed } from \"@/shared/adapters/extends/embeds.extend\";\r\n\r\nimport { MyClient } from \"../../../client\";\r\nimport { fetchBalance } from \"../functions\";\r\n\r\nexport const RobCommand = {\r\n  Message: async (message: Message, client: MyClient, args: string[]) => {\r\n    if (!message.guild || !message.channel || !message.member) return;\r\n    const user = message.mentions.users.first() || message.guild.members.cache.get(args[0])?.user;\r\n    if (!user) {\r\n      return message.reply({\r\n        embeds: [new ErrorEmbed().setDescription(\"Please mention a user to rob!\")],\r\n      });\r\n    }\r\n\r\n    const userBalance = await fetchBalance(user?.id as string, message.guild.id);\r\n\r\n    const robChance = Math.floor(Math.random() * 100) + 1;\r\n    const robAmount = Math.floor(Math.random() * userBalance.balance) + 1;\r\n\r\n    if (robChance > 50) {\r\n      await main.prisma.userEconomy.update({\r\n        where: { id: userBalance.id },\r\n        data: { balance: userBalance.balance - robAmount },\r\n      });\r\n      await main.prisma.userEconomy.update({\r\n        where: { id: userBalance.id },\r\n        data: { balance: userBalance.balance + robAmount },\r\n      });\r\n\r\n      return message.reply({\r\n        embeds: [\r\n          new EmbedCorrect().setDescription(\r\n            [\r\n              `${client.getEmoji(message.guild.id, \"success\")} You successfully robbed ${user}!`,\r\n              `You stole $${robAmount} from them.`,\r\n            ].join(\"\\n\"),\r\n          ),\r\n        ],\r\n      });\r\n    } else {\r\n      return message.reply({\r\n        embeds: [\r\n          new ErrorEmbed().setDescription(\r\n            [\r\n              `${client.getEmoji(message.guild.id, \"error\")} You failed to rob ${user}!`,\r\n              `You lost $${robAmount} in the process.`,\r\n            ].join(\"\\n\"),\r\n          ),\r\n        ],\r\n      });\r\n    }\r\n  },\r\n};\r\n"],"names":[],"mappings":";;;;;AAEA,iCAA8B;AAC9B,2EAAmF;AAGnF,4CAA4C;AAE/B,QAAA,UAAU,GAAG;IACxB,OAAO,EAAE,KAAK,EAAE,OAAgB,EAAE,MAAgB,EAAE,IAAc,EAAE,EAAE;QACpE,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM;YAAE,OAAO;QAClE,MAAM,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;QAC9F,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,OAAO,CAAC,KAAK,CAAC;gBACnB,MAAM,EAAE,CAAC,IAAI,0BAAU,EAAE,CAAC,cAAc,CAAC,+BAA+B,CAAC,CAAC;aAC3E,CAAC,CAAC;QACL,CAAC;QAED,MAAM,WAAW,GAAG,MAAM,IAAA,wBAAY,EAAC,IAAI,EAAE,EAAY,EAAE,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAE7E,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;QACtD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAEtE,IAAI,SAAS,GAAG,EAAE,EAAE,CAAC;YACnB,MAAM,WAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;gBACnC,KAAK,EAAE,EAAE,EAAE,EAAE,WAAW,CAAC,EAAE,EAAE;gBAC7B,IAAI,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,GAAG,SAAS,EAAE;aACnD,CAAC,CAAC;YACH,MAAM,WAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;gBACnC,KAAK,EAAE,EAAE,EAAE,EAAE,WAAW,CAAC,EAAE,EAAE;gBAC7B,IAAI,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,OAAO,GAAG,SAAS,EAAE;aACnD,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC,KAAK,CAAC;gBACnB,MAAM,EAAE;oBACN,IAAI,4BAAY,EAAE,CAAC,cAAc,CAC/B;wBACE,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,SAAS,CAAC,4BAA4B,IAAI,GAAG;wBAClF,cAAc,SAAS,aAAa;qBACrC,CAAC,IAAI,CAAC,IAAI,CAAC,CACb;iBACF;aACF,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,OAAO,OAAO,CAAC,KAAK,CAAC;gBACnB,MAAM,EAAE;oBACN,IAAI,0BAAU,EAAE,CAAC,cAAc,CAC7B;wBACE,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,sBAAsB,IAAI,GAAG;wBAC1E,aAAa,SAAS,kBAAkB;qBACzC,CAAC,IAAI,CAAC,IAAI,CAAC,CACb;iBACF;aACF,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CACF,CAAC","debug_id":"35818c32-852e-59a0-88aa-d71b495a8fc9"}
{"version":3,"file":"files.js","sources":["src/interfaces/messaging/modules/discord/structure/utils/files.ts"],"sourceRoot":"/","sourcesContent":["import fs from \"fs\";\r\nimport path from \"path\";\r\n\r\n/**\r\n * Recursively retrieves all files from a given directory that match the specified extensions.\r\n *\r\n * @param requestedPath - The path to the directory where files should be searched.\r\n * @param allowedExtensions - An array of file extensions to filter the files. Defaults to [\".js\", \".mjs\", \".cjs\", \".ts\"].\r\n *                             If a single string is provided, it will be converted into an array.\r\n * @returns An array of file paths that match the allowed extensions.\r\n *\r\n * @example\r\n * ```typescript\r\n * const files = getFiles(\"./src\", [\".ts\", \".js\"]);\r\n * console.log(files); // Outputs an array of file paths with .ts or .js extensions\r\n * ```\r\n */\r\nexport const getFiles = (\r\n  requestedPath: string,\r\n  allowedExtensions: string[] = [\".js\", \".mjs\", \".cjs\", \".ts\"],\r\n): string[] => {\r\n  // If allowedExtensions is a string, convert it to an array\r\n  if (typeof allowedExtensions === \"string\") {\r\n    allowedExtensions = [allowedExtensions];\r\n  }\r\n\r\n  // Resolve the requested path to an absolute path\r\n  requestedPath ??= path.resolve(requestedPath);\r\n  let res: string[] = [];\r\n\r\n  // Iterate through the directory contents\r\n  for (let itemInDir of fs.readdirSync(requestedPath)) {\r\n    itemInDir = path.resolve(requestedPath, itemInDir);\r\n    const stat = fs.statSync(itemInDir);\r\n\r\n    // If the item is a directory, recursively retrieve files\r\n    if (stat.isDirectory()) {\r\n      res = res.concat(getFiles(itemInDir, allowedExtensions));\r\n    }\r\n\r\n    // If the item is a file and matches the allowed extensions, add it to the result\r\n    if (\r\n      stat.isFile() &&\r\n      allowedExtensions.find((ext) => itemInDir.endsWith(ext)) &&\r\n      !itemInDir.slice(itemInDir.lastIndexOf(path.sep) + 1, itemInDir.length).startsWith(\".\")\r\n    ) {\r\n      res.push(itemInDir);\r\n    }\r\n  }\r\n\r\n  return res;\r\n};\r\n"],"names":[],"mappings":";;;;;;;;AAAA,4CAAoB;AACpB,gDAAwB;AAExB;;;;;;;;;;;;;GAaG;AACI,MAAM,QAAQ,GAAG,CACtB,aAAqB,EACrB,oBAA8B,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,EAClD,EAAE;IACZ,2DAA2D;IAC3D,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE,CAAC;QAC1C,iBAAiB,GAAG,CAAC,iBAAiB,CAAC,CAAC;IAC1C,CAAC;IAED,iDAAiD;IACjD,aAAa,KAAK,cAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC9C,IAAI,GAAG,GAAa,EAAE,CAAC;IAEvB,yCAAyC;IACzC,KAAK,IAAI,SAAS,IAAI,YAAE,CAAC,WAAW,CAAC,aAAa,CAAC,EAAE,CAAC;QACpD,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,IAAI,GAAG,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAEpC,yDAAyD;QACzD,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;YACvB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,IAAA,gBAAQ,EAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC,CAAC;QAC3D,CAAC;QAED,iFAAiF;QACjF,IACE,IAAI,CAAC,MAAM,EAAE;YACb,iBAAiB,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACxD,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,cAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,EACvF,CAAC;YACD,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACtB,CAAC;IACH,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAlCW,QAAA,QAAQ,YAkCnB","debug_id":"c1fbd0fc-7817-500f-8307-343a55d5d0ab"}
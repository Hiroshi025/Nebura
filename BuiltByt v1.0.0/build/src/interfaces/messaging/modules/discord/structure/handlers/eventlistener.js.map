{"version":3,"file":"eventlistener.js","sources":["src/interfaces/messaging/modules/discord/structure/handlers/eventlistener.ts"],"sourceRoot":"/","sourcesContent":["import {\r\n\tChannelType, ColorResolvable, Events, Guild, OverwriteType, roleMention, TextChannel,\r\n\tuserMention\r\n} from \"discord.js\";\r\n\r\nimport { main } from \"@/main\";\r\nimport { EmbedCorrect } from \"@/shared/adapters/extends/embeds.extend\";\r\nimport { Fields } from \"@typings/utils\";\r\n\r\nimport { MyClient } from \"../../client\";\r\n\r\n//TODO correjir a que solo los fields con datos se manden\r\n\r\n/**\r\n * Class responsible for logging various Discord events for multiple guilds.\r\n */\r\nexport class LogClass {\r\n  /**\r\n   * The Discord client instance.\r\n   */\r\n  private client: MyClient;\r\n\r\n  /**\r\n   * List of guilds where the event logger is active.\r\n   */\r\n  private guilds: Guild[];\r\n\r\n  /**\r\n   * Delay in milliseconds before processing an event.\r\n   */\r\n  private delay: number;\r\n\r\n  /**\r\n   * Creates an instance of the LogClass.\r\n   *\r\n   * @param client - The Discord client instance.\r\n   * @param guilds - Array of guilds where the logger will operate.\r\n   * @param delay - Optional delay in milliseconds for event processing. Default is 500ms.\r\n   */\r\n  constructor(client: MyClient, guilds: Guild[], delay: number = 500) {\r\n    this.client = client;\r\n    this.guilds = guilds;\r\n    this.delay = delay;\r\n  }\r\n\r\n  /**\r\n   * Enables or disables the event logger.\r\n   *\r\n   * @param status - Boolean indicating whether to enable or disable the logger.\r\n   * @returns A promise that resolves to `true` if enabled, otherwise `false`.\r\n   */\r\n  public async enabled(status: boolean): Promise<boolean> {\r\n    if (!status) return false;\r\n    await this.registerEvents();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Registers event listeners for the specified guilds based on their configuration.\r\n   *\r\n   * @private\r\n   * @returns A promise that resolves when all events are registered.\r\n   */\r\n  private async registerEvents(): Promise<boolean> {\r\n    for (const guild of this.guilds) {\r\n      const data = await main.prisma.myGuild.findUnique({ where: { guildId: guild.id } });\r\n      if (!data) continue;\r\n\r\n      const events = data.eventlogs?.events;\r\n      if (!events) {\r\n        console.log(`[DEBUG] No hay eventos configurados para el servidor: ${guild.id}`); // Log de depuración\r\n        continue;\r\n      }\r\n\r\n      console.log(`[DEBUG] Registrando eventos para el servidor: ${guild.id}, eventos: ${events.join(\", \")}`); // Log de depuración\r\n\r\n      events.forEach((event) => {\r\n        switch (event) {\r\n          case \"VoiceStateUpdate\":\r\n            this.client.on(Events.VoiceStateUpdate, async (oldState, newState) => {\r\n              console.log(`[DEBUG] Evento VoiceStateUpdate detectado para el usuario: ${newState.id}`); // Log de depuración\r\n              if (oldState.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n\r\n              if (oldState.channelId === newState.channelId) return; // Ignore if the channel hasn't changed\r\n              if (oldState.selfMute !== newState.selfMute || oldState.selfDeaf !== newState.selfDeaf) {\r\n                setTimeout(async () => {\r\n                  const fields: Fields[] = [\r\n                    {\r\n                      name: \"__Voice State Information__\",\r\n                      value: [\r\n                        `> **User:** ${userMention(newState.id)}`,\r\n                        `> **Old Channel:** ${oldState.channelId ? `<#${oldState.channelId}>` : \"None\"}`,\r\n                        `> **New Channel:** ${newState.channelId ? `<#${newState.channelId}>` : \"None\"}`,\r\n                        `> **Self Mute:** ${newState.selfMute ? \"Yes\" : \"No\"}`,\r\n                        `> **Self Deaf:** ${newState.selfDeaf ? \"Yes\" : \"No\"}`,\r\n                      ].join(\"\\n\"),\r\n                      inline: false,\r\n                    },\r\n                  ];\r\n\r\n                  this.send_log(\r\n                    guild,\r\n                    newState.selfMute || newState.selfDeaf ? \"Red\" : \"Green\",\r\n                    \"Events Logger - Voice State Update\",\r\n                    [\r\n                      `> **User ID:** \\`${newState.id}\\``,\r\n                      `> **Old Channel ID:** \\`${oldState.channelId ?? \"None\"}\\``,\r\n                      `> **New Channel ID:** \\`${newState.channelId ?? \"None\"}\\``,\r\n                    ].join(\"\\n\"),\r\n                    guild.iconURL({ forceStatic: true }) as string,\r\n                    fields,\r\n                  );\r\n                }, this.delay);\r\n              }\r\n\r\n              if (newState.channelId && !oldState.channelId) {\r\n                setTimeout(async () => {\r\n                  const fields: Fields[] = [\r\n                    {\r\n                      name: \"__Voice Channel Information__\",\r\n                      value: [\r\n                        `> **User:** ${userMention(newState.id)}`,\r\n                        `> **Channel:** <#${newState.channelId}>`,\r\n                      ].join(\"\\n\"),\r\n                      inline: false,\r\n                    },\r\n                  ];\r\n\r\n                  this.send_log(\r\n                    guild,\r\n                    \"Green\",\r\n                    \"Events Logger - Voice Channel Join\",\r\n                    [`> **User ID:** \\`${newState.id}\\``, `> **Channel ID:** \\`${newState.channelId}\\``].join(\"\\n\"),\r\n                    guild.iconURL({ forceStatic: true }) as string,\r\n                    fields,\r\n                  );\r\n                }, this.delay);\r\n              }\r\n            });\r\n            break;\r\n          case \"InviteDelete\":\r\n            this.client.on(Events.InviteDelete, async (invite) => {\r\n              console.log(`[DEBUG] Evento InviteDelete detectado para la invitación: ${invite.code}`); // Log de depuración\r\n              if (!invite.guild || invite.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              setTimeout(async () => {\r\n                const fields: Fields[] = [\r\n                  {\r\n                    name: \"__Invite Information__\",\r\n                    value: [\r\n                      `> **Invite Created At:** ${invite.createdAt ? invite.createdAt.toLocaleString() : \"Unknown\"}`,\r\n                      `> **Invite Channel:** ${invite.channel ? `${invite.channel.name} (\\`${invite.channel.id}\\`)` : \"Unknown\"}`,\r\n                      `> **Invite Inviter:** ${userMention(invite.inviter?.id ?? \"Unknown\")}`,\r\n                    ].join(\"\\n\"),\r\n                    inline: false,\r\n                  },\r\n                ];\r\n\r\n                this.send_log(\r\n                  guild,\r\n                  \"Red\",\r\n                  \"Events Logger - Invite Delete\",\r\n                  [\r\n                    `> **Invite Code:** \\`${invite.code}\\``,\r\n                    `> **Invite Uses:** ${invite.uses}`,\r\n                    `> **Invite Max Uses:** ${invite.maxUses ?? \"Unlimited\"}`,\r\n                    `> **Invite Max Age:** ${invite.maxAge ? `${invite.maxAge} seconds` : \"No Limit\"}`,\r\n                  ].join(\"\\n\"),\r\n                  guild.iconURL({ forceStatic: true }) as string,\r\n                  fields,\r\n                );\r\n              }, this.delay);\r\n            });\r\n            break;\r\n          case \"InviteCreate\":\r\n            this.client.on(Events.InviteCreate, async (invite) => {\r\n              console.log(`[DEBUG] Evento InviteCreate detectado para la invitación: ${invite.code}`); // Log de depuración\r\n              if (!invite.guild || invite.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              setTimeout(async () => {\r\n                const fields: Fields[] = [\r\n                  {\r\n                    name: \"__Invite Information__\",\r\n                    value: [\r\n                      `> **Invite Created At:** ${invite.createdAt ? invite.createdAt.toLocaleString() : \"Unknown\"}`,\r\n                      `> **Invite Channel:** ${invite.channel ? `${invite.channel.name} (\\`${invite.channel.id}\\`)` : \"Unknown\"}`,\r\n                      `> **Invite Inviter:** ${userMention(invite.inviter?.id ?? \"Unknown\")}`,\r\n                    ].join(\"\\n\"),\r\n                    inline: false,\r\n                  },\r\n                ];\r\n\r\n                this.send_log(\r\n                  guild,\r\n                  \"Green\",\r\n                  \"Events Logger - Invite Create\",\r\n                  [\r\n                    `> **Invite Code:** \\`${invite.code}\\``,\r\n                    `> **Invite Uses:** ${invite.uses}`,\r\n                    `> **Invite Max Uses:** ${invite.maxUses ?? \"Unlimited\"}`,\r\n                    `> **Invite Max Age:** ${invite.maxAge ? `${invite.maxAge} seconds` : \"No Limit\"}`,\r\n                  ].join(\"\\n\"),\r\n                  guild.iconURL({ forceStatic: true }) as string,\r\n                  fields,\r\n                );\r\n              }, this.delay);\r\n            });\r\n            break;\r\n          case \"ChannelCreate\":\r\n            this.client.on(Events.ChannelCreate, async (channel) => {\r\n              console.log(`[DEBUG] Evento ChannelCreate detectado para el canal: ${channel.id}`); // Log de depuración\r\n              if (channel.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              setTimeout(async () => {\r\n                const fields: Fields[] = [\r\n                  {\r\n                    name: \"__Channel Information__\",\r\n                    value: [\r\n                      `> **Channel Created At:** ${channel.createdAt.toLocaleString()}`,\r\n                      `> **Voice Channel:** ${channel.isVoiceBased() ? \"Yes\" : \"No\"}`,\r\n                      `> **Category:** ${channel.isThread() ? \"Yes\" : \"No\"}`,\r\n                    ].join(\"\\n\"),\r\n                    inline: false,\r\n                  },\r\n                  {\r\n                    name: \"__Channel View Roles__\",\r\n                    value: channel.permissionOverwrites.cache\r\n                      .filter((perm) => perm.type === OverwriteType.Role)\r\n                      .map((perm) => {\r\n                        return roleMention(perm.id);\r\n                      })\r\n                      .join(\", \"),\r\n                  },\r\n                  {\r\n                    name: \"__Channel View Members__\",\r\n                    value: channel.permissionOverwrites.cache\r\n                      .filter((perm) => perm.type === OverwriteType.Member)\r\n                      .map((perm) => {\r\n                        return `<@${perm.id}>`;\r\n                      })\r\n                      .join(\", \"),\r\n                  },\r\n                  {\r\n                    name: \"__Permissions Channel__\",\r\n                    value: channel.permissionOverwrites.cache\r\n                      .filter((perm) => perm.type === OverwriteType.Role)\r\n                      .map((perm) => {\r\n                        return `> **${roleMention(perm.id)}**: ${perm.allow.toArray().join(\", \")}`;\r\n                      })\r\n                      .join(\"\\n\"),\r\n                    inline: false,\r\n                  },\r\n                ];\r\n\r\n                this.send_log(\r\n                  guild,\r\n                  \"Green\",\r\n                  \"Events Logger - Channel Create\",\r\n                  [\r\n                    `> **Channel Name:** ${channel.name} (\\`${channel.id}\\`)`,\r\n                    `> **Channel Type:** ${channel.type}`,\r\n                    `> **Channel Position:** ${channel.position}`,\r\n                    `> **Channel Parent:** ${channel.parentId ? channel.parentId : \"No Parent\"}`,\r\n                  ].join(\"\\n\"),\r\n                  guild.iconURL({ forceStatic: true }) as string,\r\n                  fields,\r\n                );\r\n              }, this.delay);\r\n            });\r\n            break;\r\n          case \"ChannelDelete\":\r\n            this.client.on(Events.ChannelDelete, async (channel) => {\r\n              console.log(`[DEBUG] Evento ChannelDelete detectado para el canal: ${channel.id}`); // Log de depuración\r\n              if (channel.type === ChannelType.DM || !channel.guild) return;\r\n              if (channel.guild.id !== guild.id) {\r\n                console.log(`[DEBUG] El canal no pertenece al servidor configurado: ${guild.id}`); // Log de depuración\r\n                return;\r\n              }\r\n              setTimeout(async () => {\r\n                console.log(`[DEBUG] Procesando evento ChannelDelete para el canal: ${channel.id}`); // Log de depuración\r\n                const fields: Fields[] = [\r\n                  {\r\n                    name: \"__Channel Information__\",\r\n                    value: [\r\n                      `> **Channel Created At:** ${channel.createdAt.toLocaleString()}`,\r\n                      `> **Voice Channel:** ${channel.isVoiceBased() ? \"Yes\" : \"No\"}`,\r\n                      `> **Category:** ${channel.isThread() ? \"Yes\" : \"No\"}`,\r\n                    ].join(\"\\n\"),\r\n                    inline: false,\r\n                  },\r\n                  {\r\n                    name: \"__Channel View Roles__\",\r\n                    value: channel.permissionOverwrites.cache\r\n                      .filter((perm) => perm.type === OverwriteType.Role)\r\n                      .map((perm) => {\r\n                        return roleMention(perm.id);\r\n                      })\r\n                      .join(\", \"),\r\n                  },\r\n                  {\r\n                    name: \"__Channel View Members__\",\r\n                    value: channel.permissionOverwrites.cache\r\n                      .filter((perm) => perm.type === OverwriteType.Member)\r\n                      .map((perm) => {\r\n                        return `<@${perm.id}>`;\r\n                      })\r\n                      .join(\", \"),\r\n                  },\r\n                ];\r\n\r\n                this.send_log(\r\n                  guild,\r\n                  \"Red\",\r\n                  \"Events Logger - Channel Delete\",\r\n                  [\r\n                    `> **Channel Name:** ${channel.name} (\\`${channel.id}\\`)`,\r\n                    `> **Channel Type:** ${channel.type}`,\r\n                    `> **Channel Position:** ${channel.position}`,\r\n                    `> **Channel Parent:** ${channel.parentId ? channel.parentId : \"No Parent\"}`,\r\n                  ].join(\"\\n\"),\r\n                  guild.iconURL({ forceStatic: true }) as string,\r\n                  fields,\r\n                );\r\n              }, this.delay);\r\n            });\r\n            break;\r\n          case \"GuildMemberAdd\":\r\n            this.client.on(Events.GuildMemberAdd, async (member) => {\r\n              if (member.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              const fields: Fields[] = [\r\n                {\r\n                  name: \"__Member Information__\",\r\n                  value: [\r\n                    `> **Member Created At:** ${member.user.createdAt.toLocaleString()}`,\r\n                    `> **Member Joined At:** ${member.joinedAt?.toLocaleString()}`,\r\n                  ].join(\"\\n\"),\r\n                  inline: false,\r\n                },\r\n              ];\r\n\r\n              this.send_log(\r\n                guild,\r\n                \"Green\",\r\n                \"Events Logger - Member Add\",\r\n                [\r\n                  `> **Member Name:** ${member.user.username} (\\`${member.user.id}\\`)`,\r\n                  `> **Member Tag:** ${member.user.tag}`,\r\n                ].join(\"\\n\"),\r\n                guild.iconURL({ forceStatic: true }) as string,\r\n                fields,\r\n              );\r\n            });\r\n            break;\r\n          case \"GuildBanAdd\":\r\n            this.client.on(Events.GuildBanAdd, async (ban) => {\r\n              if (ban.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              const fields: Fields[] = [\r\n                {\r\n                  name: \"__Member Information__\",\r\n                  value: [\r\n                    `> **Member Created At:** ${ban.user.createdAt.toLocaleString()}`,\r\n                    `> **Member Banned At:** ${new Date().toLocaleString()}`,\r\n                  ].join(\"\\n\"),\r\n                  inline: false,\r\n                },\r\n              ];\r\n\r\n              this.send_log(\r\n                guild,\r\n                \"Red\",\r\n                \"Events Logger - Member Ban\",\r\n                [\r\n                  `> **Member Name:** ${ban.user.username} (\\`${ban.user.id}\\`)`,\r\n                  `> **Member Tag:** ${ban.user.tag}`,\r\n                ].join(\"\\n\"),\r\n                guild.iconURL({ forceStatic: true }) as string,\r\n                fields,\r\n              );\r\n            });\r\n            break;\r\n          case \"GuildBanRemove\":\r\n            this.client.on(Events.GuildBanRemove, async (ban) => {\r\n              if (ban.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              const fields: Fields[] = [\r\n                {\r\n                  name: \"__Member Information__\",\r\n                  value: [\r\n                    `> **Member Created At:** ${ban.user.createdAt.toLocaleString()}`,\r\n                    `> **Member Unbanned At:** ${new Date().toLocaleString()}`,\r\n                  ].join(\"\\n\"),\r\n                  inline: false,\r\n                },\r\n              ];\r\n\r\n              this.send_log(\r\n                guild,\r\n                \"Green\",\r\n                \"Events Logger - Member Unban\",\r\n                [\r\n                  `> **Member Name:** ${ban.user.username} (\\`${ban.user.id}\\`)`,\r\n                  `> **Member Tag:** ${ban.user.tag}`,\r\n                ].join(\"\\n\"),\r\n                guild.iconURL({ forceStatic: true }) as string,\r\n                fields,\r\n              );\r\n            });\r\n            break;\r\n          case \"GuildMemberRemove\":\r\n            this.client.on(Events.GuildMemberRemove, async (member) => {\r\n              if (member.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              const fields: Fields[] = [\r\n                {\r\n                  name: \"__Member Information__\",\r\n                  value: [\r\n                    `> **Member Created At:** ${member.user.createdAt.toLocaleString()}`,\r\n                    `> **Member Left At:** ${new Date().toLocaleString()}`,\r\n                  ].join(\"\\n\"),\r\n                  inline: false,\r\n                },\r\n              ];\r\n\r\n              this.send_log(\r\n                guild,\r\n                \"Red\",\r\n                \"Events Logger - Member Remove\",\r\n                [\r\n                  `> **Member Name:** ${member.user.username} (\\`${member.user.id}\\`)`,\r\n                  `> **Member Tag:** ${member.user.tag}`,\r\n                ].join(\"\\n\"),\r\n                guild.iconURL({ forceStatic: true }) as string,\r\n                fields,\r\n              );\r\n            });\r\n            break;\r\n          case \"AutoModerationRuleCreate\":\r\n            this.client.on(Events.AutoModerationRuleCreate, async (rule) => {\r\n              if (rule.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              const fields: Fields[] = [\r\n                {\r\n                  name: \"__Rule Information__\",\r\n                  value: [\r\n                    `> **Creator:** ${userMention(rule.creatorId)} (\\`${rule.creatorId}\\`)`,\r\n                    `> **Exeptions:** ${rule.exemptRoles\r\n                      .map((role) => {\r\n                        return `${roleMention(role.id)}`;\r\n                      })\r\n                      .join(\", \")}`,\r\n                    `> **Actions:** ${rule.actions\r\n                      .map((action) => {\r\n                        return `${action.type}`;\r\n                      })\r\n                      .join(\", \")}`,\r\n                    `> **Trigger Type:** ${rule.triggerType}`,\r\n                    `> **Enabled:** ${rule.enabled ? \"Yes\" : \"No\"}`,\r\n                  ].join(\"\\n\"),\r\n                  inline: false,\r\n                },\r\n              ];\r\n\r\n              this.send_log(\r\n                guild,\r\n                \"Green\",\r\n                \"Events Logger - Auto Moderation Rule Create\",\r\n                [`> **Rule Name:** ${rule.name} (\\`${rule.id}\\`)`, `> **Rule Type:** ${rule.eventType}`].join(\"\\n\"),\r\n                guild.iconURL({ forceStatic: true }) as string,\r\n                fields,\r\n              );\r\n            });\r\n            break;\r\n          case \"AutoModerationRuleDelete\":\r\n            this.client.on(Events.AutoModerationRuleDelete, async (rule) => {\r\n              if (rule.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              const fields: Fields[] = [\r\n                {\r\n                  name: \"__Rule Information__\",\r\n                  value: [\r\n                    `> **Creator:** ${userMention(rule.creatorId)} (\\`${rule.creatorId}\\`)`,\r\n                    `> **Exeptions:** ${rule.exemptRoles\r\n                      .map((role) => {\r\n                        return `${roleMention(role.id)}`;\r\n                      })\r\n                      .join(\", \")}`,\r\n                    `> **Actions:** ${rule.actions\r\n                      .map((action) => {\r\n                        return `${action.type}`;\r\n                      })\r\n                      .join(\", \")}`,\r\n                    `> **Trigger Type:** ${rule.triggerType}`,\r\n                    `> **Enabled:** ${rule.enabled ? \"Yes\" : \"No\"}`,\r\n                  ].join(\"\\n\"),\r\n                  inline: false,\r\n                },\r\n              ];\r\n\r\n              this.send_log(\r\n                guild,\r\n                \"Red\",\r\n                \"Events Logger - Auto Moderation Rule Delete\",\r\n                [`> **Rule Name:** ${rule.name} (\\`${rule.id}\\`)`, `> **Rule Type:** ${rule.eventType}`].join(\"\\n\"),\r\n                guild.iconURL({ forceStatic: true }) as string,\r\n                fields,\r\n              );\r\n            });\r\n            break;\r\n          case \"GuildRoleCreate\":\r\n            this.client.on(Events.GuildRoleCreate, async (role) => {\r\n              if (role.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              const fields: Fields[] = [\r\n                {\r\n                  name: \"__Role Information__\",\r\n                  value: [\r\n                    `> **Role Created At:** ${role.createdAt.toLocaleString()}`,\r\n                    `> **Role Color:** ${role.color}`,\r\n                    `> **Role Position:** ${role.position}`,\r\n                  ].join(\"\\n\"),\r\n                  inline: false,\r\n                },\r\n              ];\r\n\r\n              this.send_log(\r\n                guild,\r\n                \"Green\",\r\n                \"Events Logger - Role Create\",\r\n                [\r\n                  `> **Role Name:** ${role.name} (\\`${role.id}\\`)`,\r\n                  `> **Role Permissions:** ${role.permissions.toArray().join(\", \")}`,\r\n                ].join(\"\\n\"),\r\n                guild.iconURL({ forceStatic: true }) as string,\r\n                fields,\r\n              );\r\n            });\r\n            break;\r\n          case \"GuildRoleDelete\":\r\n            this.client.on(Events.GuildRoleDelete, async (role) => {\r\n              if (role.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              const fields: Fields[] = [\r\n                {\r\n                  name: \"__Role Information__\",\r\n                  value: [\r\n                    `> **Role Created At:** ${role.createdAt.toLocaleString()}`,\r\n                    `> **Role Color:** ${role.color}`,\r\n                    `> **Role Position:** ${role.position}`,\r\n                  ].join(\"\\n\"),\r\n                  inline: false,\r\n                },\r\n              ];\r\n\r\n              this.send_log(\r\n                guild,\r\n                \"Red\",\r\n                \"Events Logger - Role Delete\",\r\n                [\r\n                  `> **Role Name:** ${role.name} (\\`${role.id}\\`)`,\r\n                  `> **Role Permissions:** ${role.permissions.toArray().join(\", \")}`,\r\n                ].join(\"\\n\"),\r\n                guild.iconURL({ forceStatic: true }) as string,\r\n                fields,\r\n              );\r\n            });\r\n            break;\r\n          case \"GuildEmojiCreate\":\r\n            this.client.on(Events.GuildEmojiCreate, async (emoji) => {\r\n              if (emoji.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              const fields: Fields[] = [\r\n                {\r\n                  name: \"__Emoji Information__\",\r\n                  value: [\r\n                    `> **Emoji Created At:** ${emoji.createdAt.toLocaleString()}`,\r\n                    `> **Emoji Animated:** ${emoji.animated ? \"Yes\" : \"No\"}`,\r\n                  ].join(\"\\n\"),\r\n                  inline: false,\r\n                },\r\n              ];\r\n\r\n              this.send_log(\r\n                guild,\r\n                \"Green\",\r\n                \"Events Logger - Emoji Create\",\r\n                [\r\n                  `> **Emoji Name:** ${emoji.name} (\\`${emoji.id}\\`)`,\r\n                  `> **Emoji URL:** [\r\n                    ${emoji.url}](https://cdn.discordapp.com/emojis/${emoji.id}.${emoji.animated ? \"gif\" : \"png\"}?v=1)`,\r\n                  `> **Emoji Roles:** ${emoji.roles.cache\r\n                    .map((role) => {\r\n                      return `${roleMention(role.id)}`;\r\n                    })\r\n                    .join(\", \")}`,\r\n                ].join(\"\\n\"),\r\n                guild.iconURL({ forceStatic: true }) as string,\r\n                fields,\r\n              );\r\n            });\r\n            break;\r\n          case \"GuildEmojiDelete\":\r\n            this.client.on(Events.GuildEmojiDelete, async (emoji) => {\r\n              if (emoji.guild.id !== guild.id) return; // Ensure the event is for the current guild\r\n              const fields: Fields[] = [\r\n                {\r\n                  name: \"__Emoji Information__\",\r\n                  value: [\r\n                    `> **Emoji Created At:** ${emoji.createdAt.toLocaleString()}`,\r\n                    `> **Emoji Animated:** ${emoji.animated ? \"Yes\" : \"No\"}`,\r\n                  ].join(\"\\n\"),\r\n                  inline: false,\r\n                },\r\n              ];\r\n\r\n              this.send_log(\r\n                guild,\r\n                \"Red\",\r\n                \"Events Logger - Emoji Delete\",\r\n                [\r\n                  `> **Emoji Name:** ${emoji.name} (\\`${emoji.id}\\`)`,\r\n                  `> **Emoji URL:** [\r\n                    ${emoji.url}](https://cdn.discordapp.com/emojis/${emoji.id}.${emoji.animated ? \"gif\" : \"png\"}?v=1)`,\r\n                  `> **Emoji Roles:** ${emoji.roles.cache\r\n                    .map((role) => {\r\n                      return `${roleMention(role.id)}`;\r\n                    })\r\n                    .join(\", \")}`,\r\n                ].join(\"\\n\"),\r\n                guild.iconURL({ forceStatic: true }) as string,\r\n                fields,\r\n              );\r\n            });\r\n            break;\r\n        }\r\n      });\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sends a log message to the configured log channel of a guild.\r\n   *\r\n   * @private\r\n   * @param guild - The guild where the log will be sent.\r\n   * @param color - The color of the embed.\r\n   * @param title - The title of the embed.\r\n   * @param description - The description of the embed.\r\n   * @param thumb - The thumbnail URL for the embed.\r\n   * @param fields - Array of fields to include in the embed.\r\n   */\r\n  private async send_log(\r\n    guild: Guild,\r\n    color: ColorResolvable,\r\n    title: string,\r\n    description: string,\r\n    thumb: string,\r\n    fields: Fields[],\r\n  ): Promise<void> {\r\n    try {\r\n      if (!guild || guild?.available == false) return console.log(\"NO GUILD\");\r\n      // Create the embed\r\n      const LogEmbed = new EmbedCorrect()\r\n        .setColor(color)\r\n        .setDescription(description ? description.substring(0, 2048) : \"\\u200b\")\r\n        .setTitle(title ? title.substring(0, 256) : \"\\u200b\")\r\n        .setTimestamp()\r\n        .setThumbnail(\r\n          thumb\r\n            ? thumb\r\n            : guild?.iconURL({\r\n                extension: \"png\",\r\n              }),\r\n        )\r\n        .setAuthor({\r\n          name: guild?.name,\r\n          iconURL: guild?.iconURL({\r\n            extension: \"png\",\r\n          }) as string,\r\n        })\r\n        .setFields(\r\n          fields.map((field) => {\r\n            return {\r\n              name: field.name.substring(0, 256),\r\n              value: field.value.substring(0, 1024),\r\n              inline: field.inline ? field.inline : false,\r\n            };\r\n          }),\r\n        );\r\n\r\n      // Send the embed\r\n      const data = await main.prisma.myGuild.findUnique({ where: { guildId: guild.id } });\r\n      if (!data || !data.eventlogs || !data.eventlogs.channelId) return;\r\n\r\n      const channelId = data.eventlogs.channelId;\r\n      const channel = guild.channels.cache.get(channelId);\r\n      if (!channel || channel.type !== ChannelType.GuildText) return; // Ensure the channel is a text channel\r\n      (channel as TextChannel).send({ embeds: [LogEmbed] }).catch(() => {});\r\n    } catch (e) {\r\n      console.error(\"Error sending log:\", e); // Added error handling\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"7170ff29-f784-50e7-9244-d9674fbbac91"}
{"version":3,"file":"collection.js","sources":["src/interfaces/messaging/modules/discord/structure/handlers/collection.ts"],"sourceRoot":"/","sourcesContent":["import chalk from \"chalk\";\r\nimport { ClientEvents, REST, Routes } from \"discord.js\";\r\nimport { Discord } from \"eternal-support\";\r\nimport { readdirSync } from \"fs\";\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\nimport { main } from \"@/main\";\r\nimport { DiscordError } from \"@/shared/adapters/extends/error.extend\";\r\nimport { clientID } from \"@/shared/class/DB\";\r\nimport { config } from \"@/shared/utils/config\";\r\nimport { logWithLabel } from \"@/shared/utils/functions/console\";\r\nimport { getFiles } from \"@modules/discord/structure/utils/files\";\r\nimport { FileType } from \"@typings/modules/discord\";\r\n\r\nimport { MyClient } from \"../../client\";\r\nimport { Addons } from \"../addons\";\r\nimport { Command, Event } from \"../utils/builders\";\r\n\r\n/**\r\n * A list of file paths that have been loaded.\r\n * Each entry in the array represents the path of a loaded file or `undefined` if no file was loaded.\r\n */\r\nconst filesLoaded: (string | undefined)[] = [];\r\n\r\n/**\r\n * Core handler for Discord module functionality.\r\n * Manages command, event, and addon loading, deployment, and component management.\r\n */\r\nexport class DiscordHandler {\r\n  private readonly settings: typeof config.modules.discord;\r\n  private readonly client: MyClient;\r\n  private readonly rest: REST;\r\n\r\n  /**\r\n   * Initializes the Discord handler with the client instance.\r\n   * @param client - The Discord client instance\r\n   */\r\n  constructor(client: MyClient) {\r\n    this.settings = config.modules.discord;\r\n    this.client = client;\r\n    this.rest = new REST({ version: \"10\" }).setToken(process.env.TOKEN_DISCORD as string);\r\n  }\r\n\r\n  /**\r\n   * Loads all Discord components (commands, events, addons, precommands) asynchronously.\r\n   * @throws {Error} If any component fails to load\r\n   */\r\n  public async loadAll(): Promise<void> {\r\n    try {\r\n      await Promise.all([this.loadCommands(), this.loadEvents(), this.loadAddons(), this.loadPrecommands()]);\r\n    } catch (error) {\r\n      throw new Error(`Failed to load Discord components: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads commands from the configured commands directory.\r\n   * Organizes commands by category and registers them in the client.\r\n   * @private\r\n   */\r\n  private async loadCommands(): Promise<void> {\r\n    const commandsPath = path.join(this.settings.configs.default, this.settings.configs.paths.commands);\r\n\r\n    for (const category of readdirSync(commandsPath)) {\r\n      this.client.categories.set(category, []);\r\n\r\n      const commandFiles = getFiles(path.join(commandsPath, category), this.settings.configs[\"bot-extensions\"]);\r\n\r\n      for (const file of commandFiles) {\r\n        try {\r\n          const command: Command = (await import(file)).default;\r\n          this.registerCommand(command, category);\r\n        } catch (error) {\r\n          logWithLabel(\"error\", `Failed to load command ${file}: ${error}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a single command in the client's collections.\r\n   * @param command - The command to register\r\n   * @param category - The command category\r\n   * @private\r\n   */\r\n  private registerCommand(command: Command, category: string): void {\r\n    this.client.commands.set(command.structure.name, command);\r\n    const categoryCommands = this.client.categories.get(category) || [];\r\n    categoryCommands.push(command.structure.name);\r\n    this.client.categories.set(category, categoryCommands);\r\n  }\r\n\r\n  /**\r\n   * Loads events from the configured events directory.\r\n   * Binds events to the client with appropriate once/on handlers.\r\n   * @private\r\n   */\r\n  private async loadEvents(): Promise<void> {\r\n    const eventsPath = path.join(this.settings.configs.default, this.settings.configs.paths.events);\r\n\r\n    for (const category of readdirSync(eventsPath)) {\r\n      const eventFiles = getFiles(path.join(eventsPath, category), this.settings.configs[\"bot-extensions\"]);\r\n\r\n      for (const file of eventFiles) {\r\n        try {\r\n          const event: Event<keyof ClientEvents> = (await import(file)).default;\r\n          filesLoaded.push(path.basename(file));\r\n          this.registerEvent(event);\r\n        } catch (error) {\r\n          logWithLabel(\"error\", `Failed to load event ${file}: ${error}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a single event in the client.\r\n   * @param event - The event to register\r\n   * @private\r\n   */\r\n  private registerEvent(event: Event<keyof ClientEvents>): void {\r\n    if (event.once) {\r\n      this.client.once(event.event, (...args) => event.run(...args));\r\n    } else {\r\n      this.client.on(event.event, (...args) => event.run(...args));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads addons from the configured addons directory.\r\n   * Initializes each addon and registers it in the client.\r\n   * @private\r\n   */\r\n  private async loadAddons(): Promise<void> {\r\n    // Verificar si el cliente estÃ¡ en mantenimiento antes de cargar addons\r\n    const data = await main.DB.findClient(clientID);\r\n    if (data?.maintenance) {\r\n      console.log(\"[DEBUG] The bot is in maintenance mode. Skipping addon loading.\");\r\n      return;\r\n    }\r\n\r\n    const addonBasePath = path.join(this.settings.configs.default, this.settings.configs.paths.addons);\r\n\r\n    console.log(\"\\n[DEBUG] Starting Addon loading...\");\r\n    console.time(\"Addon Loading Time\");\r\n\r\n    try {\r\n      const addonDirs = (await fs.readdir(addonBasePath, { withFileTypes: true }))\r\n        .filter((dirent) => dirent.isDirectory())\r\n        .map((dirent) => dirent.name);\r\n\r\n      const loadResults = await Promise.all(addonDirs.map(async (dir) => this.loadAddonFromDir(addonBasePath, dir)));\r\n\r\n      const stats = {\r\n        files: loadResults.filter(Boolean).length,\r\n        loaded: loadResults.filter((r) => r?.loaded).length,\r\n        code: loadResults.reduce((sum, r) => sum + (r?.codeLength || 0), 0),\r\n      };\r\n\r\n      console.timeEnd(\"Addon Loading Time\");\r\n      console.log(\r\n        `[DEBUG] Addons: Files read: ${stats.files}, ` +\r\n          `Addons loaded: ${stats.loaded}, ` +\r\n          `Code read: ${stats.code} characters`,\r\n      );\r\n    } catch (error) {\r\n      console.error(\"[DEBUG] Error loading addons:\", error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads an addon from a specific directory.\r\n   * @param basePath - Base addons directory path\r\n   * @param dir - Specific addon directory name\r\n   * @returns Loading statistics or null if failed\r\n   * @private\r\n   */\r\n  private async loadAddonFromDir(\r\n    basePath: string,\r\n    dir: string,\r\n  ): Promise<{ loaded: boolean; codeLength: number } | null> {\r\n    const addonFolderPath = path.join(basePath, dir);\r\n    const filesInFolder = await fs.readdir(addonFolderPath);\r\n    const addonFile = filesInFolder.find((file) => file.endsWith(\".addon.ts\") || file.endsWith(\".addon.js\"));\r\n\r\n    if (!addonFile) return null;\r\n\r\n    try {\r\n      const addonPath = path.join(addonFolderPath, addonFile);\r\n      const code = await fs.readFile(addonPath, \"utf8\");\r\n      const addonModule = (await import(path.resolve(addonPath))).default;\r\n\r\n      if (addonModule instanceof Addons) {\r\n        this.client.addons.set(addonModule.structure.name, addonModule);\r\n        await addonModule.initialize(this.client, config);\r\n        return { loaded: true, codeLength: code.length };\r\n      }\r\n    } catch (error) {\r\n      logWithLabel(\"error\", `Failed to load addon ${dir}: ${error}`);\r\n    }\r\n\r\n    return { loaded: false, codeLength: 0 };\r\n  }\r\n\r\n  /**\r\n   * Loads precommands (prefix commands) from the configured directory.\r\n   * @private\r\n   */\r\n  private async loadPrecommands(): Promise<void> {\r\n    console.log(\"\\n[DEBUG] Starting Precommand loading...\");\r\n    console.time(\"Precommand Loading Time\");\r\n\r\n    const stats = { files: 0, loaded: 0, code: 0 };\r\n    const componentsDir = path.resolve(\r\n      path.join(config.modules.discord.configs.default, config.modules.discord.configs.paths.precommands),\r\n    );\r\n\r\n    try {\r\n      await this.readComponentsRecursively(componentsDir, stats);\r\n      console.timeEnd(\"Precommand Loading Time\");\r\n      console.log(\r\n        `[DEBUG] Precommands: Files read: ${stats.files}, ` +\r\n          `Precommands loaded: ${stats.loaded}, ` +\r\n          `Code read: ${stats.code} characters`,\r\n      );\r\n    } catch (error) {\r\n      console.error(\"[DEBUG] Error loading precommands:\", error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recursively reads components from a directory.\r\n   * @param directory - Directory to scan\r\n   * @param stats - Statistics object to update\r\n   * @private\r\n   */\r\n  private async readComponentsRecursively(\r\n    directory: string,\r\n    stats: { files: number; loaded: number; code: number },\r\n  ): Promise<void> {\r\n    const items = await fs.readdir(directory, { withFileTypes: true });\r\n\r\n    await Promise.all(\r\n      items.map(async (item) => {\r\n        const fullPath = path.join(directory, item.name);\r\n        if (item.isDirectory()) {\r\n          await this.readComponentsRecursively(fullPath, stats);\r\n        } else if (item.name.endsWith(\".ts\") || item.name.endsWith(\".js\")) {\r\n          stats.files++;\r\n          await this.loadPrecommandFile(fullPath, stats);\r\n        }\r\n      }),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Attempts to load a precommand from a file.\r\n   * @param filePath - Path to the precommand file\r\n   * @param stats - Statistics object to update\r\n   * @private\r\n   */\r\n  private async loadPrecommandFile(\r\n    filePath: string,\r\n    stats: { files: number; loaded: number; code: number },\r\n  ): Promise<void> {\r\n    try {\r\n      const code = await fs.readFile(filePath, \"utf8\");\r\n      stats.code += code.length;\r\n      const commandModule = (await import(filePath)).default;\r\n\r\n      if (commandModule.name && commandModule.execute) {\r\n        commandModule.path = filePath;\r\n        this.client.precommands.set(commandModule.name, commandModule);\r\n\r\n        if (Array.isArray(commandModule.aliases)) {\r\n          commandModule.aliases.forEach((alias: string) => {\r\n            this.client.aliases.set(alias, commandModule.name);\r\n          });\r\n        }\r\n        stats.loaded++;\r\n      }\r\n    } catch (error) {\r\n      logWithLabel(\"error\", `Failed to load precommand ${filePath}: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deploys slash commands to Discord's API.\r\n   * @throws {Error} If deployment fails\r\n   */\r\n  public async deployCommands(): Promise<void> {\r\n    const startTime = performance.now();\r\n    const commands = [...this.client.commands.values()].map((cmd) => cmd.structure);\r\n\r\n    try {\r\n      await this.rest.put(Routes.applicationCommands(this.settings.id), { body: commands });\r\n      const duration = Math.round(performance.now() - startTime);\r\n\r\n      logWithLabel(\r\n        \"info\",\r\n        [\r\n          `Loaded Bot Events:\\n`,\r\n          filesLoaded.map((file) => chalk.grey(`  â  Template-Typescript-Loaded: ${file}`)).join(\"\\n\"),\r\n        ].join(\"\\n\"),\r\n      );\r\n\r\n      logWithLabel(\r\n        \"info\",\r\n        [\r\n          `Deployed Slash Commands:\\n`,\r\n          chalk.grey(`  â  Successfully deployed ${commands.length} commands`),\r\n          chalk.grey(`  ð  Took: ${duration}ms`),\r\n        ].join(\"\\n\"),\r\n      );\r\n    } catch (error) {\r\n      throw new Error(`Failed to deploy commands: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads and registers interactive components (buttons, modals, menus).\r\n   * @param fileType - Type of component to load\r\n   * @throws {DiscordError} If loading fails\r\n   */\r\n  public async loadComponents(fileType: FileType): Promise<void> {\r\n    const folderPath = path.join(\r\n      this.settings.configs.default,\r\n      `${config.modules.discord.configs.paths.components}/${fileType}`,\r\n    );\r\n\r\n    try {\r\n      const files = await Discord.loadFiles(folderPath);\r\n      await Promise.all(\r\n        files.map(async (file) => {\r\n          try {\r\n            const component = (await import(file)).default;\r\n            if (!component.id) return;\r\n\r\n            switch (fileType) {\r\n              case \"buttons\":\r\n                this.client.buttons.set(component.id, component);\r\n                break;\r\n              case \"modals\":\r\n                this.client.modals.set(component.id, component);\r\n                break;\r\n              case \"menus\":\r\n                this.client.menus.set(component.id, component);\r\n                break;\r\n            }\r\n          } catch (error) {\r\n            logWithLabel(\"error\", `Failed to load component ${file}: ${error}`);\r\n          }\r\n        }),\r\n      );\r\n    } catch (error) {\r\n      throw new DiscordError(`Error loading ${fileType}: ${error}`);\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"773c8884-8829-5ed3-ba60-735515e501ce"}
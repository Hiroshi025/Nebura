{"version":3,"file":"giveaway.js","sources":["src/interfaces/messaging/modules/discord/structure/giveaway.ts"],"sourceRoot":"/","sourcesContent":["import { GiveawaysManager } from \"discord-giveaways\";\r\nimport { ChannelType, NewsChannel, TextChannel, ThreadChannel, User } from \"discord.js\";\r\n\r\nimport { client, main } from \"@/main\";\r\nimport { EmbedCorrect, ErrorEmbed } from \"@/shared/adapters/extends/embeds.extend\";\r\nimport { Prisma } from \"@prisma/client\";\r\nimport { GiveawayInterface } from \"@typings/modules/discord\";\r\n\r\n/**\r\n * Service class for managing Discord giveaways using the [discord-giveaways](https://github.com/Androz2091/discord-giveaways) library.\r\n * Handles loading, starting, rerolling, ending, and deleting giveaways, as well as custom requirements and event listeners.\r\n */\r\nexport class GiveawayService {\r\n  private manager: GiveawaysManager;\r\n  private readyPromise: Promise<void>; // <--- NUEVO\r\n\r\n  /**\r\n   * List of valid Discord channel types for hosting giveaways.\r\n   * @private\r\n   * @see {@link https://discord.js.org/#/docs/discord.js/main/typedef/ChannelType Discord.js ChannelType}\r\n   */\r\n  private static readonly VALID_CHANNEL_TYPES = [\r\n    ChannelType.GuildText,\r\n    ChannelType.PublicThread,\r\n    ChannelType.PrivateThread,\r\n    ChannelType.AnnouncementThread,\r\n  ];\r\n\r\n  /**\r\n   * Constructs a new GiveawayService and initializes the GiveawaysManager.\r\n   * Loads active giveaways from the database and sets up event listeners.\r\n   */\r\n  constructor() {\r\n    this.manager = new GiveawaysManager(client, {\r\n      default: {\r\n        botsCanWin: false,\r\n        exemptPermissions: [\"Administrator\"],\r\n        embedColor: \"#FFA500\",\r\n        embedColorEnd: \"#008000\",\r\n        reaction: \"🎉\",\r\n        lastChance: {\r\n          enabled: true,\r\n          content: \"⚠️ **LAST CHANCE TO ENTER!** ⚠️\",\r\n          threshold: 5000,\r\n          embedColor: \"#FF0000\",\r\n        },\r\n      },\r\n    });\r\n\r\n    // Cambia esto:\r\n    // this.loadGiveaways()\r\n    //   .then(() => console.log(\"[GiveawayService] Giveaways loaded successfully\"))\r\n    //   .catch((err) => console.error(\"[GiveawayService] Error loading giveaways:\", err));\r\n\r\n    // Por esto:\r\n    this.readyPromise = this.loadGiveaways()\r\n      .then(() => console.log(\"[GiveawayService] Giveaways loaded successfully\"))\r\n      .catch((err) => console.error(\"[GiveawayService] Error loading giveaways:\", err));\r\n\r\n    this.setupListeners();\r\n  }\r\n\r\n  // NUEVO MÉTODO\r\n  public async waitUntilReady(): Promise<void> {\r\n    await this.readyPromise;\r\n  }\r\n\r\n  /**\r\n   * Loads all active giveaways from the database and restarts them in the manager.\r\n   * Skips giveaways that are already running or whose channels are invalid.\r\n   *\r\n   * @private\r\n   * @returns Promise that resolves when all giveaways are loaded.\r\n   */\r\n  private async loadGiveaways(): Promise<void> {\r\n    try {\r\n      const giveaways = await main.prisma.giveaway.findMany({\r\n        where: { endsAt: { gt: new Date() } },\r\n        include: { requirements: true },\r\n      });\r\n\r\n      const loadPromises = giveaways.map(async (giveaway) => {\r\n        if (this.manager.giveaways.some((g) => g.messageId === giveaway.messageId)) {\r\n          return; // Skip already running giveaways\r\n        }\r\n\r\n        const channel = await this.getValidChannel(giveaway.channelId);\r\n        if (!channel) {\r\n          console.warn(\r\n            `[GiveawayService] Channel ${giveaway.channelId} not found or invalid for giveaway ${giveaway.messageId}`,\r\n          );\r\n          return;\r\n        }\r\n\r\n        // Fix: Ensure createdTimestamp is not null for ThreadChannels\r\n        if (\"createdTimestamp\" in channel && channel.createdTimestamp === null) {\r\n          console.warn(\r\n            `[GiveawayService] Channel ${giveaway.channelId} has null createdTimestamp and cannot be used for giveaway ${giveaway.messageId}`,\r\n          );\r\n          return;\r\n        }\r\n\r\n        const options: GiveawayInterface.Options = {\r\n          duration: giveaway.endsAt.getTime() - Date.now(),\r\n          prize: giveaway.prize,\r\n          winnerCount: giveaway.winnerCount,\r\n          hostedBy: client.users.cache.get(giveaway.hostedBy) as User,\r\n          messages: {\r\n            giveaway: \"🎉 **GIVEAWAY** 🎉\",\r\n            giveawayEnded: \"🎉 **GIVEAWAY ENDED** 🎉\",\r\n            inviteToParticipate: \"Click the 🎉 reaction to enter!\",\r\n            timeRemaining: \"Time remaining: **{duration}**\",\r\n            winMessage: \"Congratulations, {winners}! You won **{prize}**!\",\r\n            noWinner: \"Giveaway cancelled, no valid participations.\",\r\n            hostedBy: \"Hosted by: {user}\",\r\n            winners: \"winner(s)\",\r\n            endedAt: \"Ended at\",\r\n          },\r\n        };\r\n\r\n        if (giveaway.requirements) {\r\n          options.requirements = {\r\n            requiredRoles: giveaway.requirements.requiredRoles,\r\n            minAccountAge: giveaway.requirements.minAccountAge ?? undefined,\r\n            minMessages: giveaway.requirements.minMessages ?? undefined,\r\n          };\r\n        }\r\n\r\n        try {\r\n          await this.manager.start(channel as any, options);\r\n          console.log(`[GiveawayService] Successfully reloaded giveaway ${giveaway.messageId}`);\r\n        } catch (error) {\r\n          console.error(`[GiveawayService] Failed to reload giveaway ${giveaway.messageId}:`, error);\r\n        }\r\n      });\r\n\r\n      await Promise.all(loadPromises);\r\n    } catch (error) {\r\n      console.error(\"[GiveawayService] Error loading giveaways from database:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches and validates a Discord channel for hosting a giveaway.\r\n   * Checks channel type and required bot permissions.\r\n   *\r\n   * @private\r\n   * @param channelId - The ID of the channel to fetch.\r\n   * @returns The valid channel or null if invalid.\r\n   */\r\n  private async getValidChannel(channelId: string): Promise<TextChannel | NewsChannel | ThreadChannel | null> {\r\n    try {\r\n      const channel = await client.channels.fetch(channelId);\r\n\r\n      if (!channel || !GiveawayService.VALID_CHANNEL_TYPES.includes(channel.type)) {\r\n        return null;\r\n      }\r\n\r\n      // Check bot permissions\r\n      // Only GuildChannels have permissionsFor\r\n      if (\"permissionsFor\" in channel && typeof channel.permissionsFor === \"function\") {\r\n        const permissions = channel.permissionsFor(client.user!.id);\r\n        if (!permissions?.has([\"ViewChannel\", \"SendMessages\", \"EmbedLinks\", \"AddReactions\"])) {\r\n          console.warn(`[GiveawayService] Missing permissions in channel ${channel.id}`);\r\n          return null;\r\n        }\r\n      } else {\r\n        console.warn(`[GiveawayService] Channel ${channel.id} does not support permissionsFor`);\r\n        return null;\r\n      }\r\n\r\n      return channel as TextChannel | NewsChannel | ThreadChannel;\r\n    } catch (error) {\r\n      console.error(`[GiveawayService] Error fetching channel ${channelId}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets up event listeners for the GiveawaysManager.\r\n   * Handles giveaway ended, rerolled, and no participants scenarios.\r\n   *\r\n   * @private\r\n   */\r\n  private setupListeners(): void {\r\n    // Giveaway ended\r\n    this.manager.on(\"giveawayEnded\", async (giveaway, winners) => {\r\n      try {\r\n        // 1. First find the giveaway data with requirements\r\n        const giveawayData = await main.prisma.giveaway.findUnique({\r\n          where: { messageId: giveaway.messageId },\r\n          include: { requirements: true },\r\n        });\r\n\r\n        if (!giveawayData) {\r\n          console.warn(`[GiveawayService] Giveaway ${giveaway.messageId} not found in database`);\r\n          return;\r\n        }\r\n\r\n        // 2. Prepare transaction for atomic deletion\r\n        const deleteOperations = [];\r\n\r\n        // Delete requirements if they exist\r\n        if (giveawayData.requirements) {\r\n          deleteOperations.push(\r\n            main.prisma.giveawayRequirements.delete({\r\n              where: { giveawayId: giveawayData.id },\r\n            }),\r\n          );\r\n        }\r\n\r\n        // Delete the main giveaway entry\r\n        deleteOperations.push(\r\n          main.prisma.giveaway.delete({\r\n            where: { messageId: giveaway.messageId },\r\n          }),\r\n        );\r\n\r\n        // 3. Execute transaction\r\n        await main.prisma.$transaction(deleteOperations);\r\n\r\n        // 4. Log successful deletion\r\n        console.log(\r\n          `[GiveawayService] Successfully deleted giveaway ${giveaway.messageId} and its requirements from DB`,\r\n        );\r\n\r\n        // 5. Optional: Send winner announcement if winners exist\r\n        if (winners && winners.length > 0) {\r\n          const channel = await this.getValidChannel(giveaway.channelId);\r\n          if (channel) {\r\n            await channel.send({\r\n              embeds: [\r\n                new EmbedCorrect()\r\n                  .setTitle(\"🎉 Giveaway Ended 🎉\")\r\n                  .setDescription(\r\n                    `Congratulations to the winner(s) of **${giveaway.prize}**!\\n` +\r\n                      `**Winner(s):** ${winners.map((w) => w.toString()).join(\", \")}\\n\\n` +\r\n                      `Thank you to everyone who participated!`,\r\n                  )\r\n                  .setFooter({ text: `Giveaway ID: ${giveaway.messageId}` }),\r\n              ],\r\n            });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(`[GiveawayService] Error processing ended giveaway ${giveaway.messageId}:`, error);\r\n\r\n        // Additional error handling for specific cases\r\n        if (error instanceof Prisma.PrismaClientKnownRequestError) {\r\n          if (error.code === \"P2025\") {\r\n            console.warn(`[GiveawayService] Record not found for giveaway ${giveaway.messageId}`);\r\n          } else {\r\n            console.error(`[GiveawayService] Database error for giveaway ${giveaway.messageId}:`, error.meta);\r\n          }\r\n        }\r\n\r\n        // Optionally attempt to clean up again or notify admins\r\n        try {\r\n          await main.prisma.giveaway.deleteMany({\r\n            where: { messageId: giveaway.messageId },\r\n          });\r\n          console.warn(`[GiveawayService] Performed cleanup deletion for giveaway ${giveaway.messageId}`);\r\n        } catch (cleanupError) {\r\n          console.error(`[GiveawayService] Cleanup failed for giveaway ${giveaway.messageId}:`, cleanupError);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Giveaway rerolled\r\n    this.manager.on(\"giveawayRerolled\", async (giveaway, winners) => {\r\n      try {\r\n        const channel = await this.getValidChannel(giveaway.channelId);\r\n        if (channel) {\r\n          await channel.send({\r\n            embeds: [\r\n              new EmbedCorrect()\r\n                .setTitle(\"🎉 Giveaway Rerolled\")\r\n                .setDescription(\r\n                  `The giveaway for **${giveaway.prize}** has been rerolled!\\n` +\r\n                    `New winner(s): ${winners.map((w) => w.toString()).join(\", \")}`,\r\n                ),\r\n            ],\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(`[GiveawayService] Error handling reroll for giveaway ${giveaway.messageId}:`, error);\r\n      }\r\n    });\r\n\r\n    this.manager.on(\"giveawayReactionAdded\", async (giveaway, member) => {\r\n      try {\r\n        const channel = await this.getValidChannel(giveaway.channelId);\r\n        if (!channel) return;\r\n\r\n        // Check if user meets requirements\r\n        // Retrieve requirements from the database or cache if needed\r\n        const dbGiveaway = await main.prisma.giveaway.findUnique({\r\n          where: { messageId: giveaway.messageId },\r\n          include: { requirements: true },\r\n        });\r\n\r\n        const requirements = dbGiveaway?.requirements as GiveawayInterface.Requirements | undefined;\r\n        if (requirements) {\r\n          const guildMember = await member.guild.members.fetch(member.id);\r\n\r\n          // Check required roles\r\n          if (requirements.requiredRoles?.length) {\r\n            const hasRequiredRoles = requirements.requiredRoles.some((roleId) => guildMember.roles.cache.has(roleId));\r\n\r\n            if (!hasRequiredRoles) {\r\n              await member.send({\r\n                embeds: [\r\n                  new ErrorEmbed()\r\n                    .setTitle(\"Entry Requirements Not Met\")\r\n                    .setDescription(\r\n                      `You don't have the required roles to enter the giveaway for **${giveaway.prize}**`,\r\n                    ),\r\n                ],\r\n              });\r\n              try {\r\n                const channel = await this.getValidChannel(giveaway.channelId);\r\n                if (!channel) return;\r\n\r\n                const message = await channel.messages.fetch(giveaway.messageId);\r\n                // Busca la reacción 🎉 (o la que uses en tu configuración)\r\n                const reaction = message.reactions.cache.find(\r\n                  (r) => r.emoji.name === (giveaway.options?.reaction || \"🎉\"),\r\n                );\r\n                if (reaction) {\r\n                  await reaction.users.remove(member.id);\r\n                }\r\n              } catch (err) {\r\n                console.error(`[GiveawayService] Error removing reaction for user ${member.id}:`, err);\r\n              }\r\n              return;\r\n            }\r\n          }\r\n\r\n          // Check minimum account age\r\n          if (requirements.minAccountAge) {\r\n            const accountAgeDays = (Date.now() - member.user.createdTimestamp) / (1000 * 60 * 60 * 24);\r\n            if (accountAgeDays < requirements.minAccountAge) {\r\n              await member.send({\r\n                embeds: [\r\n                  new ErrorEmbed()\r\n                    .setTitle(\"Entry Requirements Not Met\")\r\n                    .setDescription(\r\n                      `Your account must be at least ${requirements.minAccountAge} days old to enter this giveaway`,\r\n                    ),\r\n                ],\r\n              });\r\n              try {\r\n                const channel = await this.getValidChannel(giveaway.channelId);\r\n                if (!channel) return;\r\n\r\n                const message = await channel.messages.fetch(giveaway.messageId);\r\n                // Busca la reacción 🎉 (o la que uses en tu configuración)\r\n                const reaction = message.reactions.cache.find(\r\n                  (r) => r.emoji.name === (giveaway.options?.reaction || \"🎉\"),\r\n                );\r\n                if (reaction) {\r\n                  await reaction.users.remove(member.id);\r\n                }\r\n              } catch (err) {\r\n                console.error(`[GiveawayService] Error removing reaction for user ${member.id}:`, err);\r\n              }\r\n              return;\r\n            }\r\n          }\r\n\r\n          // Check minimum messages (if implemented in your bot)\r\n          if (requirements.minMessages) {\r\n            const userMessages = 0; // Replace with your implementation\r\n            if (userMessages < requirements.minMessages) {\r\n              await member.send({\r\n                embeds: [\r\n                  new ErrorEmbed()\r\n                    .setTitle(\"Entry Requirements Not Met\")\r\n                    .setDescription(\r\n                      `You need at least ${requirements.minMessages} messages in this server to enter this giveaway`,\r\n                    ),\r\n                ],\r\n              });\r\n\r\n              //await giveaway.removeEntrant(member.id);\r\n              //removeEntrant no existe dentro de discord-giveaway por lo que crea tu mismo la logica para remover la reaccion del usuario\r\n              try {\r\n                const channel = await this.getValidChannel(giveaway.channelId);\r\n                if (!channel) return;\r\n\r\n                const message = await channel.messages.fetch(giveaway.messageId);\r\n                // Busca la reacción 🎉 (o la que uses en tu configuración)\r\n                const reaction = message.reactions.cache.find(\r\n                  (r) => r.emoji.name === (giveaway.options?.reaction || \"🎉\"),\r\n                );\r\n                if (reaction) {\r\n                  await reaction.users.remove(member.id);\r\n                }\r\n              } catch (err) {\r\n                console.error(`[GiveawayService] Error removing reaction for user ${member.id}:`, err);\r\n              }\r\n              return;\r\n            }\r\n          }\r\n        }\r\n\r\n        console.log(`[GiveawayService] User ${member.user.tag} (${member.id}) entered giveaway ${giveaway.messageId}`);\r\n      } catch (error) {\r\n        console.error(`[GiveawayService] Error handling giveaway reaction added for ${giveaway.messageId}:`, error);\r\n      }\r\n    });\r\n\r\n    this.manager.on(\"endedGiveawayReactionAdded\", async (giveaway, member) => {\r\n      try {\r\n        await member.send({\r\n          embeds: [\r\n            new ErrorEmbed()\r\n              .setTitle(\"Giveaway Already Ended\")\r\n              .setDescription(\r\n                `The giveaway for **${giveaway.prize}** has already ended. ` +\r\n                  \"Please check for new giveaways in the server!\",\r\n              ),\r\n          ],\r\n        });\r\n        console.log(`[GiveawayService] User ${member.user.tag} tried to enter ended giveaway ${giveaway.messageId}`);\r\n      } catch (error) {\r\n        console.error(`[GiveawayService] Error handling ended giveaway reaction for ${giveaway.messageId}:`, error);\r\n      }\r\n    });\r\n\r\n    this.manager.on(\"giveawayReactionRemoved\", async (giveaway, member) => {\r\n      try {\r\n        console.log(`[GiveawayService] User ${member.user.tag} (${member.id}) left giveaway ${giveaway.messageId}`);\r\n\r\n        // Optional: Send confirmation DM\r\n        await member.send({\r\n          embeds: [\r\n            new EmbedCorrect()\r\n              .setTitle(\"Giveaway Entry Removed\")\r\n              .setDescription(\r\n                `You've been removed from the giveaway for **${giveaway.prize}**. ` +\r\n                  \"You can re-enter by reacting again before the giveaway ends.\",\r\n              ),\r\n          ],\r\n        });\r\n      } catch (error) {\r\n        console.error(`[GiveawayService] Error handling giveaway reaction removed for ${giveaway.messageId}:`, error);\r\n      }\r\n    });\r\n\r\n    this.manager.on(\"giveawayDeleted\", async (giveaway) => {\r\n      try {\r\n        // Delete from database\r\n        await main.prisma.giveaway.delete({\r\n          where: { messageId: giveaway.messageId },\r\n        });\r\n\r\n        console.log(`[GiveawayService] Giveaway ${giveaway.messageId} was deleted and removed from DB`);\r\n\r\n        // Optional: Notify in the original channel if possible\r\n        const channel = await this.getValidChannel(giveaway.channelId);\r\n        if (channel) {\r\n          await channel.send({\r\n            embeds: [\r\n              new ErrorEmbed()\r\n                .setTitle(\"Giveaway Cancelled\")\r\n                .setDescription(\r\n                  `The giveaway for **${giveaway.prize}** has been cancelled. ` + \"All entries have been voided.\",\r\n                ),\r\n            ],\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(`[GiveawayService] Error handling deleted giveaway ${giveaway.messageId}:`, error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts a new giveaway in the specified channel with extended options.\r\n   * Saves the giveaway to the database.\r\n   *\r\n   * @param channel - The Discord channel to host the giveaway in.\r\n   * @param options - The options for the giveaway, including requirements.\r\n   * @returns The created giveaway object.\r\n   * @throws Error if the bot lacks permissions or the giveaway cannot be started.\r\n   */\r\n  public async startGiveaway(\r\n    channel: TextChannel | NewsChannel | ThreadChannel,\r\n    options: GiveawayInterface.Options,\r\n  ): Promise<any> {\r\n    try {\r\n      // Validate channel permissions\r\n      const permissions = channel.permissionsFor(client.user!.id);\r\n      if (!permissions?.has([\"ViewChannel\", \"SendMessages\", \"EmbedLinks\", \"AddReactions\"])) {\r\n        throw new Error(\"Bot lacks necessary permissions in the target channel\");\r\n      }\r\n\r\n      // Start the giveaway\r\n      const giveaway = await this.manager.start(channel as any, options);\r\n\r\n      // Prepare database data\r\n      const dbData = {\r\n        messageId: giveaway.messageId,\r\n        channelId: giveaway.channelId,\r\n        guildId: giveaway.guildId,\r\n        prize: giveaway.prize,\r\n        winnerCount: giveaway.winnerCount,\r\n        endsAt: new Date(giveaway.endAt),\r\n        hostedBy: options.hostedBy?.id || client.user!.id,\r\n        ...(options.requirements && {\r\n          requirements: {\r\n            create: {\r\n              ...(options.requirements.requiredRoles && {\r\n                requiredRoles: options.requirements.requiredRoles,\r\n              }),\r\n              ...(options.requirements.minAccountAge && {\r\n                minAccountAge: options.requirements.minAccountAge,\r\n              }),\r\n              ...(options.requirements.minMessages && {\r\n                minMessages: options.requirements.minMessages,\r\n              }),\r\n            },\r\n          },\r\n        }),\r\n      };\r\n\r\n      // Save to database\r\n      await main.prisma.giveaway.create({ data: dbData });\r\n\r\n      return giveaway;\r\n    } catch (error) {\r\n      console.error(\"[GiveawayService] Error starting giveaway:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the GiveawaysManager instance.\r\n   *\r\n   * @returns The GiveawaysManager used by this service.\r\n   */\r\n  public getManager(): GiveawaysManager {\r\n    return this.manager;\r\n  }\r\n\r\n  /**\r\n   * Rerolls a giveaway to select new winners.\r\n   *\r\n   * @param messageId - The message ID of the giveaway to reroll.\r\n   * @param options - Optional reroll options (e.g., new winner count).\r\n   * @throws Error if the reroll fails.\r\n   */\r\n  public async rerollGiveaway(messageId: string, options?: { winnerCount?: number }): Promise<void> {\r\n    try {\r\n      await this.manager.reroll(messageId, options);\r\n    } catch (error) {\r\n      console.error(`[GiveawayService] Error rerolling giveaway ${messageId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ends a giveaway early.\r\n   *\r\n   * @param messageId - The message ID of the giveaway to end.\r\n   * @throws Error if the giveaway cannot be ended.\r\n   */\r\n  public async endGiveaway(messageId: string): Promise<void> {\r\n    try {\r\n      await this.manager.end(messageId);\r\n    } catch (error) {\r\n      console.error(`[GiveawayService] Error ending giveaway ${messageId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes a giveaway from both the manager and the database.\r\n   *\r\n   * @param messageId - The message ID of the giveaway to delete.\r\n   * @throws Error if the giveaway cannot be deleted.\r\n   */\r\n  public async deleteGiveaway(messageId: string): Promise<void> {\r\n    try {\r\n      // Delete from manager\r\n      await this.manager.delete(messageId);\r\n\r\n      // Delete from database\r\n      await main.prisma.giveaway.delete({\r\n        where: { messageId },\r\n      });\r\n    } catch (error) {\r\n      console.error(`[GiveawayService] Error deleting giveaway ${messageId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"dfb3e57b-8c7a-5451-b803-a12a1417ef98"}
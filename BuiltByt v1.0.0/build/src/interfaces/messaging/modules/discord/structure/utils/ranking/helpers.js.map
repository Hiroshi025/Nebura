{"version":3,"file":"helpers.js","sources":["src/interfaces/messaging/modules/discord/structure/utils/ranking/helpers.ts"],"sourceRoot":"/","sourcesContent":["import { Profile } from \"discord-arts\";\r\nimport {\r\n\tAttachmentBuilder, GuildChannel, Message, PermissionFlagsBits, TextChannel\r\n} from \"discord.js\";\r\n\r\nimport { client, main } from \"@/main\";\r\nimport { LevelConfig, UserLevel } from \"@prisma/client\";\r\nimport { logWithLabel } from \"@utils/functions/console\";\r\n\r\nimport { MyClient } from \"../../../client\";\r\nimport { ACHIEVEMENTS, DAILY_QUESTS, MAX_LEVEL, SPAM_PENALTY_XP } from \"./constant\";\r\n\r\n// Define Achievement type if not imported from elsewhere\r\ntype Achievement = {\r\n  id: string;\r\n  name: string;\r\n  type: \"LEVEL\" | \"MESSAGES\";\r\n  requirement: number;\r\n  xpReward?: number;\r\n};\r\n\r\nconst cooldown = new Set<string>();\r\n\r\n/**\r\n * Enhanced ranking system for Discord with streaks, leaderboards, quests, and more\r\n *\r\n * @param message\r\n * @param client\r\n * @returns\r\n */\r\nexport async function Ranking(message: Message, client: MyClient) {\r\n  if (!message.guild || !message.channel || message.author.bot || !client.user) return;\r\n\r\n  const guildId = message.guild.id;\r\n  const userId = message.author.id;\r\n  const currentDate = new Date();\r\n  const currentDay = currentDate.toISOString().split(\"T\")[0]; // YYYY-MM-DD\r\n  const currentWeek = getWeekNumber(currentDate); // Helper function to get week number\r\n  const currentMonth = currentDate.getMonth() + 1;\r\n\r\n  // 1. Cooldown and anti-spam check\r\n  if (cooldown.has(userId)) {\r\n    logWithLabel(\"info\", `User: ${message.author.tag} | Cooldown activated.`, {\r\n      customLabel: \"Rank\",\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Check for spam (7. Penalizaciones por spam)\r\n  if (isSpam(message)) {\r\n    await handleSpamPenalty(message, client);\r\n    return;\r\n  }\r\n\r\n  // Fetch server configuration\r\n  let rankingConfig = await main.prisma.levelConfig.findFirst({\r\n    where: { guildId, status: true },\r\n  });\r\n\r\n  // Create default config if none exists\r\n  if (!rankingConfig) {\r\n    rankingConfig = await main.prisma.levelConfig.create({\r\n      data: { guildId, channelId: null, status: true },\r\n    });\r\n  }\r\n\r\n  // Skip if ranking is disabled\r\n  if (!rankingConfig.status) {\r\n    logWithLabel(\"info\", `Ranking is disabled for guild: ${guildId}`, {\r\n      customLabel: \"Rank\",\r\n    });\r\n    return;\r\n  }\r\n\r\n  // 5. Channel bonus check\r\n  const channelBonus = await getChannelBonus(message.channel.id, rankingConfig);\r\n\r\n  // Base XP with possible channel bonus\r\n  const baseXp = Math.floor(Math.random() * (25 - 15 + 1) + 15);\r\n  const xpAmount = baseXp + (channelBonus ? Math.floor(baseXp * channelBonus.multiplier) : 0);\r\n\r\n  // Get or create user data\r\n  let user = await main.prisma.userLevel.findFirst({\r\n    where: { guildId, userId },\r\n    include: { streaks: true, quests: true, achievements: true },\r\n  });\r\n\r\n  // 2. Streak system (Sistema de rachas)\r\n  const streakUpdate = await updateStreak(userId, guildId, currentDay);\r\n  const streakBonus =\r\n    streakUpdate.currentStreak > 1\r\n      ? Math.floor(xpAmount * (0.1 * Math.min(streakUpdate.currentStreak, 10)))\r\n      : 0; // Max 100% bonus for 10-day streak\r\n\r\n  // 4. Check and update quests (Misiones o retos)\r\n  const questUpdates = await updateQuests(userId, guildId, message);\r\n  const questXp = questUpdates.completedQuests.reduce((sum, quest) => sum + quest.xpReward, 0);\r\n\r\n  // Total XP with all bonuses\r\n  const totalXp = xpAmount + streakBonus + questXp;\r\n\r\n  // Update or create user data\r\n  user = await main.prisma.userLevel.upsert({\r\n    where: { guildId_userId: { guildId, userId } },\r\n    update: {\r\n      xp: { increment: totalXp },\r\n      lastActive: currentDate,\r\n      // Update weekly/monthly counters for leaderboards\r\n      weeklyXp: { increment: totalXp },\r\n      monthlyXp: { increment: totalXp },\r\n      totalMessages: { increment: 1 },\r\n    },\r\n    create: {\r\n      guildId,\r\n      userId,\r\n      xp: totalXp,\r\n      level: 0,\r\n      lastActive: currentDate,\r\n      weeklyXp: totalXp,\r\n      monthlyXp: totalXp,\r\n      totalMessages: 1,\r\n      streaks: {\r\n        create: {\r\n          lastActive: currentDay,\r\n          currentStreak: 1,\r\n          longestStreak: 1,\r\n        },\r\n      },\r\n      quests: {\r\n        create: {\r\n          dailyProgress: {},\r\n          dailyCompleted: {},\r\n          weeklyProgress: {},\r\n          weeklyCompleted: {},\r\n        },\r\n      },\r\n      achievements: {\r\n        create: {\r\n          achievements: [],\r\n        },\r\n      },\r\n    },\r\n    include: { streaks: true, quests: true, achievements: true },\r\n  });\r\n\r\n  if (!user) return;\r\n  let xp = user.xp;\r\n  let level = user.level;\r\n  let prestige = user.prestige;\r\n\r\n  // Log activity\r\n  logWithLabel(\r\n    \"info\",\r\n    `User: ${message.author.tag} | XP: ${xp}/${level * 100} | Level: ${level} | Streak: ${streakUpdate.currentStreak} | Earned: ${totalXp} XP (Base: ${xpAmount}, Streak: ${streakBonus}, Quests: ${questXp})`,\r\n    {\r\n      customLabel: \"Rank\",\r\n    },\r\n  );\r\n\r\n  // Check for level up\r\n  const requiredXp = calculateRequiredXp(level, prestige);\r\n  if (xp >= requiredXp) {\r\n    // 6. Prestige system (Sistema de prestigio)\r\n    if (level >= MAX_LEVEL) {\r\n      await handlePrestige(user, message, client);\r\n      return;\r\n    }\r\n\r\n    // Normal level up\r\n    level++;\r\n    xp = xp - requiredXp;\r\n\r\n    // 8. Check for achievements (Logros y medallas)\r\n    const newAchievements = await checkAchievements(userId, guildId, level, user.totalMessages);\r\n\r\n    // Update user data\r\n    await main.prisma.userLevel.update({\r\n      where: { id: user.id },\r\n      data: { xp, level },\r\n    });\r\n\r\n    // Send level up notification\r\n    await sendLevelUpNotification(message, client, rankingConfig, {\r\n      level,\r\n      prestige,\r\n      streak: streakUpdate.currentStreak,\r\n      achievements: newAchievements.map((a) => ({\r\n        ...a,\r\n        type: a.type as \"LEVEL\" | \"MESSAGES\",\r\n      })),\r\n    });\r\n\r\n    // Set cooldown\r\n    cooldown.add(userId);\r\n    setTimeout(() => cooldown.delete(userId), 60000);\r\n  }\r\n\r\n  // 3. Check weekly/monthly leaderboard resets\r\n  await checkLeaderboardReset(guildId, currentWeek, currentMonth);\r\n}\r\n\r\n// Helper functions for new features:\r\n\r\n// 2. Streak system\r\nasync function updateStreak(userId: string, guildId: string, currentDay: string) {\r\n  // First, try to find the existing streak\r\n  const existingStreak = await main.prisma.streak.findUnique({\r\n    where: { userId_guildId: { userId, guildId } },\r\n  });\r\n\r\n  if (existingStreak) {\r\n    const incrementStreak = isYesterday(existingStreak.lastActive, currentDay);\r\n    const newCurrentStreak = incrementStreak ? existingStreak.currentStreak + 1 : 1;\r\n    const newLongestStreak = Math.max(existingStreak.longestStreak, newCurrentStreak);\r\n\r\n    const updatedStreak = await main.prisma.streak.update({\r\n      where: { userId_guildId: { userId, guildId } },\r\n      data: {\r\n        lastActive: currentDay,\r\n        currentStreak: newCurrentStreak,\r\n        longestStreak: newLongestStreak,\r\n      },\r\n    });\r\n    return updatedStreak;\r\n  } else {\r\n    const createdStreak = await main.prisma.streak.create({\r\n      data: {\r\n        userId,\r\n        guildId,\r\n        lastActive: currentDay,\r\n        currentStreak: 1,\r\n        longestStreak: 1,\r\n      },\r\n    });\r\n    return createdStreak;\r\n  }\r\n}\r\n\r\n// 3. Leaderboard system\r\nasync function checkLeaderboardReset(guildId: string, currentWeek: number, currentMonth: number) {\r\n  const lastReset = await main.prisma.leaderboardReset.findFirst({ where: { guildId } });\r\n\r\n  if (!lastReset || lastReset.lastWeek !== currentWeek) {\r\n    // Weekly reset\r\n    await main.prisma.$transaction([\r\n      main.prisma.weeklyLeaderboard.create({\r\n        data: {\r\n          guildId,\r\n          week: lastReset?.lastWeek || currentWeek,\r\n          data: await getTopUsers(guildId, \"weeklyXp\", 10),\r\n        },\r\n      }),\r\n      main.prisma.userLevel.updateMany({\r\n        where: { guildId },\r\n        data: { weeklyXp: 0 },\r\n      }),\r\n      main.prisma.leaderboardReset.upsert({\r\n        where: { guildId },\r\n        update: { lastWeek: currentWeek },\r\n        create: { guildId, lastWeek: currentWeek, lastMonth: currentMonth },\r\n      }),\r\n    ]);\r\n\r\n    // Award weekly top users\r\n    await awardTopUsers(guildId, \"weekly\");\r\n  }\r\n\r\n  if (!lastReset || lastReset.lastMonth !== currentMonth) {\r\n    // Monthly reset\r\n    await main.prisma.$transaction([\r\n      main.prisma.monthlyLeaderboard.create({\r\n        data: {\r\n          guildId,\r\n          month: lastReset?.lastMonth || currentMonth,\r\n          year: new Date().getFullYear(),\r\n          data: await getTopUsers(guildId, \"monthlyXp\", 10),\r\n        },\r\n      }),\r\n      main.prisma.userLevel.updateMany({\r\n        where: { guildId },\r\n        data: { monthlyXp: 0 },\r\n      }),\r\n      main.prisma.leaderboardReset.upsert({\r\n        where: { guildId },\r\n        update: { lastMonth: currentMonth },\r\n        create: { guildId, lastWeek: currentWeek, lastMonth: currentMonth },\r\n      }),\r\n    ]);\r\n\r\n    // Award monthly top users\r\n    await awardTopUsers(guildId, \"monthly\");\r\n  }\r\n}\r\n\r\n// 4. Quest system\r\nasync function updateQuests(userId: string, guildId: string, message: Message) {\r\n  const quests = await main.prisma.userQuests.findUnique({\r\n    where: { userId_guildId: { userId, guildId } },\r\n  });\r\n\r\n  if (!quests) return { completedQuests: [], updatedQuests: quests };\r\n\r\n  const completedQuests = [];\r\n  // Ensure correct typing and initialization for dailyCompleted and dailyProgress\r\n  const updatedQuests = { ...quests };\r\n\r\n  // Make sure dailyCompleted and dailyProgress are objects\r\n  if (!updatedQuests.dailyCompleted || typeof updatedQuests.dailyCompleted !== \"object\") {\r\n    updatedQuests.dailyCompleted = {};\r\n  }\r\n  if (!updatedQuests.dailyProgress || typeof updatedQuests.dailyProgress !== \"object\") {\r\n    updatedQuests.dailyProgress = {};\r\n  }\r\n\r\n  // Check daily quests\r\n  for (const quest of DAILY_QUESTS) {\r\n    //const progressField = `dailyProgress.${quest.id}`;\r\n    //const completedField = `dailyCompleted.${quest.id}`;\r\n\r\n    const dailyProgress = (quests.dailyProgress ?? {}) as Record<string, number>;\r\n    const dailyCompleted = (quests.dailyCompleted ?? {}) as Record<string, boolean>;\r\n\r\n    if (quest.check(message, dailyProgress[quest.id] || 0)) {\r\n      const newProgress = (dailyProgress[quest.id] || 0) + 1;\r\n\r\n      if (newProgress >= quest.requirement && !dailyCompleted[quest.id]) {\r\n        completedQuests.push({\r\n          id: quest.id,\r\n          name: quest.name,\r\n          xpReward: quest.xpReward,\r\n        });\r\n        (updatedQuests.dailyCompleted as Record<string, boolean>)[quest.id] = true;\r\n      }\r\n\r\n      (updatedQuests.dailyProgress as Record<string, number>)[quest.id] = newProgress;\r\n    }\r\n  }\r\n\r\n  // Check weekly quests (similar logic)\r\n\r\n  // Save updated quests\r\n  await main.prisma.userQuests.update({\r\n    where: { userId_guildId: { userId, guildId } },\r\n    data: {\r\n      dailyProgress: updatedQuests.dailyProgress ?? {},\r\n      dailyCompleted: updatedQuests.dailyCompleted ?? {},\r\n      weeklyProgress: updatedQuests.weeklyProgress ?? {},\r\n      weeklyCompleted: updatedQuests.weeklyCompleted ?? {},\r\n    },\r\n  });\r\n\r\n  return { completedQuests, updatedQuests };\r\n}\r\n\r\n// 5. Channel bonus\r\nasync function getChannelBonus(channelId: string, rankingConfig: LevelConfig) {\r\n  if (!rankingConfig.bonusChannels) return null;\r\n  let bonusChannels: any[] = [];\r\n  if (Array.isArray(rankingConfig.bonusChannels)) {\r\n    bonusChannels = rankingConfig.bonusChannels;\r\n  } else if (typeof rankingConfig.bonusChannels === \"string\") {\r\n    try {\r\n      bonusChannels = JSON.parse(rankingConfig.bonusChannels);\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n  return bonusChannels.find((b: any) => b.channelId === channelId);\r\n}\r\n\r\n// 6. Prestige system\r\nasync function handlePrestige(user: UserLevel, message: Message, _client: MyClient) {\r\n  const prestige = user.prestige + 1;\r\n  const newLevel = 0;\r\n  const newXp = 0;\r\n\r\n  await main.prisma.userLevel.update({\r\n    where: { id: user.id },\r\n    data: {\r\n      level: newLevel,\r\n      xp: newXp,\r\n      prestige,\r\n      // Reset some stats but keep others\r\n      weeklyXp: 0,\r\n      monthlyXp: 0,\r\n      // Add to prestige history\r\n      prestigeHistory: {\r\n        create: {\r\n          date: new Date(),\r\n          levelAchieved: user.level,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  // Send prestige notification\r\n  const buffer = await Profile(user.userId, {\r\n    customTag: `Prestige ${prestige} achieved!`,\r\n    squareAvatar: true,\r\n    borderColor: [\"#ffd700\", \"#ff8800\"],\r\n    presenceStatus: \"online\",\r\n    badgesFrame: true,\r\n    customBackground: \"https://i.imgur.com/LWcWzlc.png\",\r\n    backgroundBrightness: 100,\r\n    moreBackgroundBlur: true,\r\n    customBadges: [\"./crown.png\"],\r\n    rankData: {\r\n      currentXp: 0,\r\n      requiredXp: calculateRequiredXp(0, prestige),\r\n      rank: 1,\r\n      level: 0,\r\n      barColor: \"#ffe066\",\r\n      levelColor: \"#ff8800\",\r\n      autoColorRank: true,\r\n    },\r\n  });\r\n\r\n  const attachment = new AttachmentBuilder(buffer, { name: \"prestige.png\" });\r\n\r\n  try {\r\n    await (message.channel as TextChannel).send({\r\n      content: `🎉 ${message.author} has reached Prestige ${prestige}!`,\r\n      files: [attachment],\r\n    });\r\n  } catch {\r\n    await message.author.send({\r\n      content: `🎉 You've reached Prestige ${prestige}!`,\r\n      files: [attachment],\r\n    });\r\n  }\r\n}\r\n\r\n// 7. Anti-spam system\r\nasync function handleSpamPenalty(message: Message, _client: MyClient) {\r\n  const guildId = message.guild?.id;\r\n  const userId = message.author.id;\r\n\r\n  if (!guildId) return;\r\n\r\n  // Apply XP penalty\r\n  await main.prisma.userLevel.update({\r\n    where: { guildId_userId: { guildId, userId } },\r\n    data: { xp: { decrement: SPAM_PENALTY_XP } },\r\n  });\r\n\r\n  // Log and notify\r\n  logWithLabel(\"warning\", `Spam detected from ${message.author.tag}, applying XP penalty`, {\r\n    customLabel: \"Ranking\",\r\n    context: { userId, userName: message.author.username },\r\n  });\r\n\r\n  try {\r\n    await message.author.send(`⚠️ Please avoid spamming! ${SPAM_PENALTY_XP} XP has been deducted.`);\r\n  } catch (err) {\r\n    console.error(\"Could not send spam warning DM\", err);\r\n  }\r\n}\r\n\r\n// 8. Achievement system\r\nasync function checkAchievements(\r\n  userId: string,\r\n  guildId: string,\r\n  level: number,\r\n  messageCount: number,\r\n) {\r\n  const unlockedAchievements = [];\r\n  const userAchievements = await main.prisma.userAchievements.findUnique({\r\n    where: { userId_guildId: { userId, guildId } },\r\n  });\r\n\r\n  // Check level-based achievements\r\n  for (const achievement of ACHIEVEMENTS) {\r\n    if (!userAchievements?.achievements.includes(achievement.id)) {\r\n      if (\r\n        (achievement.type === \"LEVEL\" && level >= achievement.requirement) ||\r\n        (achievement.type === \"MESSAGES\" && messageCount >= achievement.requirement)\r\n      ) {\r\n        unlockedAchievements.push(achievement);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (unlockedAchievements.length > 0) {\r\n    await main.prisma.userAchievements.upsert({\r\n      where: { userId_guildId: { userId, guildId } },\r\n      update: {\r\n        achievements: { push: unlockedAchievements.map((a) => a.id) },\r\n      },\r\n      create: {\r\n        userId,\r\n        guildId,\r\n        achievements: unlockedAchievements.map((a) => a.id),\r\n      },\r\n    });\r\n  }\r\n\r\n  return unlockedAchievements;\r\n}\r\n\r\nfunction getWeekNumber(date: Date): number {\r\n  const d = new Date(date);\r\n  d.setHours(0, 0, 0, 0);\r\n  d.setDate(d.getDate() + 3 - ((d.getDay() + 6) % 7));\r\n  const week1 = new Date(d.getFullYear(), 0, 4);\r\n  return (\r\n    1 +\r\n    Math.round(((d.getTime() - week1.getTime()) / 86400000 - 3 + ((week1.getDay() + 6) % 7)) / 7)\r\n  );\r\n}\r\n\r\nfunction isYesterday(lastDateStr: string, currentDateStr: string): boolean {\r\n  const lastDate = new Date(lastDateStr);\r\n  const currentDate = new Date(currentDateStr);\r\n  const yesterday = new Date(currentDate);\r\n  yesterday.setDate(yesterday.getDate() - 1);\r\n\r\n  return (\r\n    lastDate.getDate() === yesterday.getDate() &&\r\n    lastDate.getMonth() === yesterday.getMonth() &&\r\n    lastDate.getFullYear() === yesterday.getFullYear()\r\n  );\r\n}\r\n\r\nfunction calculateRequiredXp(level: number, prestige: number): number {\r\n  const baseXp = level * 100;\r\n  return prestige > 0 ? baseXp * (1 + prestige * 0.5) : baseXp; // 50% more XP per prestige level\r\n}\r\n\r\nfunction isSpam(_message: Message): boolean {\r\n  // Implement your spam detection logic\r\n  // Example: Check for repeated messages, too many messages in short time, etc.\r\n  return false;\r\n}\r\n\r\n/**\r\n * Sends a level up notification to the appropriate channel or user\r\n */\r\nasync function sendLevelUpNotification(\r\n  message: Message,\r\n  client: MyClient,\r\n  rankingConfig: LevelConfig,\r\n  details: {\r\n    level: number;\r\n    prestige: number;\r\n    streak: number;\r\n    achievements: Achievement[];\r\n  },\r\n) {\r\n  const { level, prestige, streak, achievements } = details;\r\n  const userId = message.author.id;\r\n  let notificationChannel: GuildChannel | null = null;\r\n\r\n  // Try to fetch the configured notification channel\r\n  if (rankingConfig.channelId) {\r\n    try {\r\n      notificationChannel = (await client.channels.fetch(rankingConfig.channelId)) as GuildChannel;\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch notification channel:\", err);\r\n    }\r\n  }\r\n\r\n  // Fall back to current channel if no notification channel\r\n  if (!notificationChannel) {\r\n    notificationChannel = message.channel as GuildChannel;\r\n  }\r\n\r\n  // Prepare achievement text if any\r\n  const achievementText =\r\n    achievements.length > 0\r\n      ? `\\n\\n**Achievements Unlocked:**\\n${achievements.map((a) => `🏆 ${a.name}`).join(\"\\n\")}`\r\n      : \"\";\r\n\r\n  // Prepare streak text if applicable\r\n  const streakText = streak > 3 ? `\\n🔥 Streak: ${streak} days!` : \"\";\r\n\r\n  // Create the profile image with level up info\r\n  const buffer = await Profile(userId, {\r\n    customTag: `Level Up! ${level}${prestige > 0 ? ` (Prestige ${prestige})` : \"\"}`,\r\n    squareAvatar: true,\r\n    borderColor: [\"#00bfff\", \"#ff00cc\"],\r\n    presenceStatus: \"online\",\r\n    badgesFrame: true,\r\n    customBackground: \"https://i.imgur.com/LWcWzlc.png\",\r\n    backgroundBrightness: 90,\r\n    moreBackgroundBlur: true,\r\n    customBadges: achievements.length > 0 ? achievements.map(() => \"./assets/badge.png\") : [],\r\n    rankData: {\r\n      currentXp: level * 100, // Puedes ajustar según tu lógica real\r\n      requiredXp: calculateRequiredXp(level, prestige),\r\n      rank: 1,\r\n      level: level,\r\n      barColor: \"#fcdce1\",\r\n      levelColor: \"#ada8c6\",\r\n      autoColorRank: true,\r\n    },\r\n  });\r\n\r\n  const attachment = new AttachmentBuilder(buffer, { name: \"levelup.png\" });\r\n\r\n  try {\r\n    // Check if we can send to the channel\r\n    if (notificationChannel.permissionsFor(client.user!)?.has(PermissionFlagsBits.SendMessages)) {\r\n      await (notificationChannel as TextChannel).send({\r\n        content: `🎉 ${message.author} has leveled up to level ${level}${prestige > 0 ? ` (Prestige ${prestige})` : \"\"}!${streakText}${achievementText}`,\r\n        files: [attachment],\r\n      });\r\n    } else {\r\n      // Fall back to DM\r\n      await message.author.send({\r\n        content: `🎉 You've leveled up to level ${level}${prestige > 0 ? ` (Prestige ${prestige})` : \"\"}!${streakText}${achievementText}`,\r\n        files: [attachment],\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Failed to send level up notification:\", error);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the top users for a specific XP category\r\n */\r\nexport async function getTopUsers(\r\n  guildId: string,\r\n  xpField: \"weeklyXp\" | \"monthlyXp\" | \"xp\",\r\n  limit: number = 10,\r\n) {\r\n  return await main.prisma.userLevel.findMany({\r\n    where: { guildId },\r\n    orderBy: { [xpField]: \"desc\" },\r\n    take: limit,\r\n    select: {\r\n      userId: true, // <-- Esto debe ser string\r\n      level: true,\r\n      [xpField]: true,\r\n      prestige: true,\r\n      // Si necesitas el historial de prestigio, usa otro nombre:\r\n      // prestigeHistory: true,\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * Awards top users at the end of weekly/monthly periods\r\n */\r\nasync function awardTopUsers(guildId: string, period: \"weekly\" | \"monthly\") {\r\n  const xpField = period === \"weekly\" ? \"weeklyXp\" : \"monthlyXp\";\r\n  const topUsers = await getTopUsers(guildId, xpField, 3);\r\n\r\n  // Get the server's reward configuration\r\n  const config = await main.prisma.levelConfig.findUnique({\r\n    where: { guildId },\r\n    select: { [period === \"weekly\" ? \"weeklyRewards\" : \"monthlyRewards\"]: true },\r\n  });\r\n\r\n  const rewards = config?.[period === \"weekly\" ? \"weeklyRewards\" : \"monthlyRewards\"] || [\r\n    { position: 1, xp: 500, roleId: null },\r\n    { position: 2, xp: 300, roleId: null },\r\n    { position: 3, xp: 200, roleId: null },\r\n  ];\r\n\r\n  // Apply rewards\r\n  for (const user of topUsers) {\r\n    const reward = rewards.find((r) => r.position === topUsers.indexOf(user) + 1);\r\n    // Si user.userId es un array, necesitas obtener el string correcto:\r\n    // Por ejemplo, si tienes user.userId como [{...}], usa user.userId[0].userId\r\n    // Pero lo correcto es que sea string, así:\r\n    const topUserId = typeof user.userId === \"string\" ? user.userId : user.userId[0]?.userId;\r\n    if (!reward) continue;\r\n    if (!topUserId) continue;\r\n\r\n    await main.prisma.userLevel.update({\r\n      where: { guildId_userId: { guildId, userId: topUserId } },\r\n      data: { xp: { increment: reward.xp } },\r\n    });\r\n\r\n    if (reward.roleId) {\r\n      try {\r\n        const guild = await client.guilds.fetch(guildId);\r\n        const member = await guild.members.fetch(topUserId);\r\n        await member.roles.add(reward.roleId);\r\n      } catch (error) {\r\n        console.error(`Failed to add reward role to user ${topUserId}:`, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Log the rewards\r\n  logWithLabel(\"info\", `Awarded ${period} top users in guild ${guildId}`, {\r\n    customLabel: \"Rank\",\r\n  });\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"f157b590-2a6f-5243-9d63-f2d2e6f2e733"}
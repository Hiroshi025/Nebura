{"version":3,"file":"voiceStateUpdate.js","sources":["src/interfaces/messaging/modules/discord/bot/events/client/voiceStateUpdate.ts"],"sourceRoot":"/","sourcesContent":["import { ChannelType } from \"discord.js\";\r\n\r\nimport { Event } from \"@/interfaces/messaging/modules/discord/structure/utils/builders\";\r\nimport { client, main } from \"@/main\";\r\nimport { DiscordError } from \"@/shared/adapters/extends/error.extend\";\r\n\r\n/**\r\n * Utility function to pause execution for a specified amount of milliseconds.\r\n * Useful for adding delays between asynchronous Discord actions to avoid race conditions or API errors.\r\n * @param ms Number of milliseconds to wait.\r\n * @returns Promise that resolves after the specified delay.\r\n */\r\nfunction delay(ms: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\n/**\r\n * Discord voiceStateUpdate event handler.\r\n *\r\n * Handles the logic for \"join to create\" voice channels and their corresponding text channels.\r\n * - When a user joins a specific voice channel, a new voice and text channel are created for them.\r\n * - When the user leaves their owned voice channel, both channels are deleted.\r\n * - Delays are added between actions to avoid Discord API errors.\r\n *\r\n * @event voiceStateUpdate\r\n * @param oldState The previous VoiceState of the member.\r\n * @param newState The new VoiceState of the member.\r\n */\r\nexport default new Event(\"voiceStateUpdate\", async (oldState, newState) => {\r\n  const { member, guild } = newState;\r\n  const oldChannel = oldState.channel;\r\n  const newChannel = newState.channel;\r\n\r\n  console.debug(`[voiceStateUpdate] Event triggered for guild: ${guild.id}, member: ${member?.id}`);\r\n  console.debug(\r\n    `[voiceStateUpdate] Old channel: ${oldChannel?.id ?? \"none\"}, New channel: ${newChannel?.id ?? \"none\"}`,\r\n  );\r\n\r\n  // Retrieve guild configuration from the database\r\n  const data = await main.prisma.myGuild.findFirst({ where: { guildId: guild.id } });\r\n  if (!data) {\r\n    console.debug(`[voiceStateUpdate] No guild data found for guildId: ${guild.id}`);\r\n    return;\r\n  }\r\n\r\n  const joinToCreate = data.rooms;\r\n  const user = member?.user;\r\n\r\n  // Validate configuration and user presence\r\n  if (!joinToCreate || joinToCreate === \"\" || !data.roomcategory) {\r\n    console.debug(`[voiceStateUpdate] joinToCreate or roomcategory not set for guildId: ${guild.id}`);\r\n    return;\r\n  }\r\n  if (!user) {\r\n    console.debug(`[voiceStateUpdate] No user found in member object`);\r\n    return;\r\n  }\r\n\r\n  // Handle user joining the \"join to create\" channel\r\n  if (oldChannel !== newChannel && newChannel && newChannel.id === joinToCreate) {\r\n    console.debug(\r\n      `[voiceStateUpdate] User ${user.username}#${user.discriminator} joined the joinToCreate channel (${joinToCreate}). Creating channels...`,\r\n    );\r\n    /**\r\n     * Create a new voice channel for the user.\r\n     * @type {import(\"discord.js\").VoiceChannel}\r\n     */\r\n    const voiceChannel = await guild.channels\r\n      .create({\r\n        name: `${user.username}-${user.discriminator}`,\r\n        type: ChannelType.GuildVoice,\r\n        parent: newChannel.parent,\r\n      })\r\n      .catch((err) => {\r\n        console.error(`[voiceStateUpdate] Failed to create the voice channel:`, err);\r\n        throw new DiscordError(\"Failed to create the voice channel\");\r\n      });\r\n\r\n    console.debug(`[voiceStateUpdate] Voice channel created: ${voiceChannel?.id}`);\r\n\r\n    // Wait 500ms before creating the text channel to avoid API errors\r\n    await delay(500);\r\n\r\n    /**\r\n     * Create a new text channel for the user with appropriate permissions.\r\n     * @type {import(\"discord.js\").TextChannel}\r\n     */\r\n    const textChannel = await guild.channels\r\n      .create({\r\n        name: `${user.username}-${user.discriminator}-text`,\r\n        type: ChannelType.GuildText,\r\n        parent: data.roomcategory,\r\n        permissionOverwrites: [\r\n          {\r\n            id: guild.roles.everyone.id,\r\n            deny: [\"ViewChannel\"],\r\n          },\r\n          {\r\n            id: member.id,\r\n            allow: [\"ViewChannel\", \"SendMessages\", \"ReadMessageHistory\"],\r\n          },\r\n        ],\r\n      })\r\n      .catch((err) => {\r\n        console.error(`[voiceStateUpdate] Failed to create the text channel:`, err);\r\n        throw new DiscordError(\"Failed to create the text channel\");\r\n      });\r\n\r\n    console.debug(`[voiceStateUpdate] Text channel created: ${textChannel?.id}`);\r\n\r\n    /**\r\n     * Store the mapping of the member's ID to their owned channels in the client.\r\n     */\r\n    client.voiceGenerator.set(member?.id, {\r\n      voiceChannelId: voiceChannel.id,\r\n      textChannelId: textChannel.id,\r\n    } as { voiceChannelId: string; textChannelId: string });\r\n\r\n    console.debug(`[voiceStateUpdate] voiceGenerator mapping set for member: ${member?.id}`);\r\n\r\n    // Wait 500ms before moving the user to the new voice channel\r\n    await delay(500);\r\n\r\n    // Move the member to their new voice channel\r\n    return member?.voice\r\n      .setChannel(voiceChannel)\r\n      .then(() => {\r\n        console.debug(`[voiceStateUpdate] Member ${member?.id} moved to voice channel ${voiceChannel.id}`);\r\n      })\r\n      .catch((err) => {\r\n        console.error(`[voiceStateUpdate] Failed to move the member to the voice channel:`, err);\r\n        throw new DiscordError(\"Failed to move the member to the voice channel\");\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieve the owned channel mapping for the member, if it exists.\r\n   */\r\n  const ownedChannel = client.voiceGenerator.get(member?.id) as\r\n    | { voiceChannelId: string; textChannelId: string }\r\n    | undefined;\r\n\r\n  // Handle user leaving their owned voice channel\r\n  if (\r\n    ownedChannel &&\r\n    oldChannel?.id === ownedChannel.voiceChannelId &&\r\n    (!newChannel || newChannel.id !== ownedChannel.voiceChannelId)\r\n  ) {\r\n    console.debug(\r\n      `[voiceStateUpdate] User ${member?.id} left their owned voice channel (${ownedChannel.voiceChannelId}). Deleting channels...`,\r\n    );\r\n    client.voiceGenerator.delete(member?.id);\r\n\r\n    // Wait 500ms before deleting the voice channel to avoid API errors\r\n    await delay(500);\r\n\r\n    // Delete the owned voice channel\r\n    oldChannel\r\n      ?.delete()\r\n      .then(() => {\r\n        console.debug(`[voiceStateUpdate] Voice channel deleted: ${oldChannel.id}`);\r\n      })\r\n      .catch((err) => {\r\n        console.error(`[voiceStateUpdate] Failed to delete the voice channel:`, err);\r\n        throw new DiscordError(\"Failed to delete the voice channel\");\r\n      });\r\n\r\n    // Wait 500ms before deleting the text channel to avoid API errors\r\n    await delay(500);\r\n\r\n    // Delete the owned text channel\r\n    const textChannel = guild.channels.cache.get(ownedChannel.textChannelId);\r\n    textChannel\r\n      ?.delete()\r\n      .then(() => {\r\n        console.debug(`[voiceStateUpdate] Text channel deleted: ${ownedChannel.textChannelId}`);\r\n      })\r\n      .catch((err) => {\r\n        console.error(`[voiceStateUpdate] Failed to delete the text channel:`, err);\r\n        throw new DiscordError(\"Failed to delete the text channel\");\r\n      });\r\n  }\r\n\r\n  return;\r\n});\r\n"],"names":[],"mappings":"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","debug_id":"4838f0d5-5d27-5942-b88d-665cc3dce4f2"}
{"version":3,"file":"extracttext.js","sources":["src/interfaces/messaging/modules/discord/bot/commands/message/utilities/extracttext.ts"],"sourceRoot":"/","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n\tActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType, EmbedBuilder\r\n} from \"discord.js\";\r\nimport { createWorker } from \"tesseract.js\";\r\n\r\nimport { EmbedCorrect } from \"@/shared/adapters/extends/embeds.extend\";\r\nimport { Precommand } from \"@typings/modules/discord\";\r\n\r\nconst ocrCommand: Precommand = {\r\n  name: \"extracttext\",\r\n  description: \"Extract text from images using OCR\",\r\n  examples: [\"extracttext [attachment|URL]\", \"ocr [image]\"],\r\n  nsfw: false,\r\n  owner: false,\r\n  cooldown: 60,\r\n  aliases: [\"ocr\", \"imagetext\", \"readimage\"],\r\n  botpermissions: [\"SendMessages\", \"EmbedLinks\", \"AttachFiles\"],\r\n  permissions: [\"SendMessages\"],\r\n  async execute(_client, message, args) {\r\n    if (!message.guild || !message.channel || message.channel.type !== ChannelType.GuildText) return;\r\n\r\n    // Check for attachments or URLs\r\n    const imageUrl = args[0]?.match(/https?:\\/\\/[^\\s]+\\.(?:png|jpg|jpeg|gif|bmp|webp)/gi)?.[0];\r\n    const attachment = message.attachments.first();\r\n\r\n    if (!imageUrl && !attachment) {\r\n      return message.reply({\r\n        embeds: [\r\n          new EmbedCorrect()\r\n            .setTitle(\"‚ùå Error\")\r\n            .setDescription(\r\n              \"Please provide an image attachment or valid image URL\\nSupported formats: PNG, JPG, JPEG, GIF, BMP, WEBP\",\r\n            ),\r\n        ],\r\n      });\r\n    }\r\n\r\n    const targetImage = attachment?.url || imageUrl;\r\n    if (!targetImage) {\r\n      return message.reply({\r\n        embeds: [\r\n          new EmbedCorrect()\r\n            .setTitle(\"‚ùå Error\")\r\n            .setDescription(\"No valid image found. Please attach an image or provide a valid image URL.\"),\r\n        ],\r\n      });\r\n    }\r\n\r\n    // Validate image URL\r\n    try {\r\n      new URL(targetImage);\r\n    } catch {\r\n      return message.reply({\r\n        embeds: [new EmbedCorrect().setTitle(\"‚ùå Invalid URL\").setDescription(\"Please provide a valid image URL\")],\r\n      });\r\n    }\r\n\r\n    // Check if the URL points to an image\r\n    if (!targetImage.match(/\\.(png|jpg|jpeg|gif|bmp|webp)$/i)) {\r\n      return message.reply({\r\n        embeds: [\r\n          new EmbedCorrect()\r\n            .setTitle(\"‚ùå Invalid Image Format\")\r\n            .setDescription(\"Supported formats: PNG, JPG, JPEG, GIF, BMP, WEBP\"),\r\n        ],\r\n      });\r\n    }\r\n\r\n    // Processing message\r\n    const processingMsg = await message.reply({\r\n      embeds: [\r\n        new EmbedCorrect()\r\n          .setTitle(\"üîç Processing Image...\")\r\n          .setDescription(\"Extracting text from the provided image\")\r\n          .setFooter({ text: \"This may take a moment\" }),\r\n      ],\r\n    });\r\n\r\n    try {\r\n      // Download the image\r\n      const response = await axios.get(targetImage, {\r\n        responseType: \"arraybuffer\",\r\n      });\r\n\r\n      // Initialize Tesseract.js worker\r\n      const worker = await createWorker({\r\n        logger: (m) => console.log(m),\r\n      });\r\n\r\n      await worker.loadLanguage(\"eng+spa+fra+deu+por+rus\");\r\n      await worker.initialize(\"eng+spa+fra+deu+por+rus\");\r\n\r\n      // Perform OCR\r\n      const {\r\n        data: { text, hocr, confidence },\r\n      } = await worker.recognize(response.data);\r\n      await worker.terminate();\r\n\r\n      // Analyze image metadata\r\n      const imageInfo = await extractImageMetadata(response.data);\r\n\r\n      // Prepare results\r\n      const extractedText = text.trim() || \"No text could be extracted from this image.\";\r\n      const confidencePercentage = Math.round(confidence * 100) / 100;\r\n\r\n      // Create result embed\r\n      const resultEmbed = new EmbedBuilder()\r\n        .setTitle(\"üìù Extracted Text Results\")\r\n        .setColor(\"#4CAF50\")\r\n        .addFields(\r\n          {\r\n            name: \"Extracted Text\",\r\n            value: extractedText.slice(0, 1000) + (extractedText.length > 1000 ? \"...\" : \"\"),\r\n            inline: false,\r\n          },\r\n          { name: \"Confidence\", value: `${confidencePercentage}%`, inline: true },\r\n          { name: \"Image Format\", value: imageInfo.format || \"Unknown\", inline: true },\r\n          { name: \"Dimensions\", value: imageInfo.dimensions || \"Unknown\", inline: true },\r\n        )\r\n        .setFooter({\r\n          text: `Requested by ${message.author.tag}`,\r\n          iconURL: message.author.displayAvatarURL(),\r\n        })\r\n        .setTimestamp();\r\n\r\n      // Create action buttons\r\n      const actionRow = new ActionRowBuilder<ButtonBuilder>().addComponents(\r\n        new ButtonBuilder()\r\n          .setCustomId(`fulltext_${message.id}`)\r\n          .setLabel(\"View Full Text\")\r\n          .setStyle(ButtonStyle.Primary),\r\n        new ButtonBuilder()\r\n          .setCustomId(`rawdata_${message.id}`)\r\n          .setLabel(\"View Raw Data\")\r\n          .setStyle(ButtonStyle.Secondary),\r\n        new ButtonBuilder().setLabel(\"Original Image\").setStyle(ButtonStyle.Link).setURL(targetImage),\r\n      );\r\n\r\n      // Edit processing message with results\r\n      await processingMsg.edit({\r\n        embeds: [resultEmbed],\r\n        components: [actionRow],\r\n      });\r\n\r\n      // Create collector for buttons\r\n      const collector = processingMsg.createMessageComponentCollector({ time: 60000 });\r\n\r\n      collector.on(\"collect\", async (interaction) => {\r\n        if (!interaction.isButton()) return;\r\n        if (!interaction.customId.startsWith(`fulltext_`) && !interaction.customId.startsWith(`rawdata_`)) return;\r\n\r\n        try {\r\n          if (interaction.customId.startsWith(`fulltext_`)) {\r\n            // Send full text as file if too long\r\n            if (extractedText.length > 2000) {\r\n              await interaction.reply({\r\n                content: \"The extracted text is too long for a message. Here's a file with the complete text:\",\r\n                files: [\r\n                  {\r\n                    attachment: Buffer.from(extractedText),\r\n                    name: \"extracted_text.txt\",\r\n                  },\r\n                ],\r\n                ephemeral: true,\r\n              });\r\n            } else {\r\n              await interaction.reply({\r\n                content: `**Complete Extracted Text:**\\n\\`\\`\\`\\n${extractedText}\\n\\`\\`\\``,\r\n                ephemeral: true,\r\n              });\r\n            }\r\n          } else if (interaction.customId.startsWith(`rawdata_`)) {\r\n            // Send raw OCR data\r\n            const rawData = {\r\n              text,\r\n              confidence,\r\n              hocr: hocr ? \"Available (too large to display)\" : \"Not available\",\r\n              metadata: imageInfo,\r\n            };\r\n\r\n            await interaction.reply({\r\n              content: `**Raw OCR Data:**\\n\\`\\`\\`json\\n${JSON.stringify(rawData, null, 2).slice(0, 1900)}\\n\\`\\`\\``,\r\n              ephemeral: true,\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error handling button interaction:\", error);\r\n          await interaction.reply({\r\n            content: \"‚ùå An error occurred while processing your request.\",\r\n            ephemeral: true,\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error(\"OCR Processing Error:\", error);\r\n      await processingMsg.edit({\r\n        embeds: [\r\n          new EmbedCorrect()\r\n            .setTitle(\"‚ùå Processing Failed\")\r\n            .setDescription(\r\n              \"An error occurred while processing the image.\\nPossible reasons:\\n- Image is too complex\\n- No readable text present\\n- Unsupported image format\",\r\n            )\r\n            .setColor(\"#F44336\"),\r\n        ],\r\n        components: [],\r\n      });\r\n    }\r\n\r\n    return;\r\n  },\r\n};\r\n\r\n// Helper function to extract basic image metadata\r\nasync function extractImageMetadata(buffer: Buffer): Promise<{\r\n  format?: string;\r\n  dimensions?: string;\r\n  size?: string;\r\n}> {\r\n  try {\r\n    // Simple image type detection\r\n    const signatures = {\r\n      \"89504E47\": \"PNG\",\r\n      FFD8FF: \"JPEG\",\r\n      \"47494638\": \"GIF\",\r\n      \"424D\": \"BMP\",\r\n      \"52494646\": \"WEBP\",\r\n    };\r\n\r\n    const hex = buffer.toString(\"hex\", 0, 8).toUpperCase();\r\n    let format: string | undefined;\r\n\r\n    for (const [sig, type] of Object.entries(signatures)) {\r\n      if (hex.startsWith(sig)) {\r\n        format = type;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Get dimensions for PNG/JPEG (simplified)\r\n    let width, height;\r\n    if (format === \"PNG\") {\r\n      width = buffer.readUInt32BE(16);\r\n      height = buffer.readUInt32BE(20);\r\n    } else if (format === \"JPEG\") {\r\n      let offset = 2;\r\n      while (offset < buffer.length) {\r\n        const marker = buffer.readUInt16BE(offset);\r\n        offset += 2;\r\n        if (marker === 0xffc0 || marker === 0xffc2) {\r\n          height = buffer.readUInt16BE(offset + 3);\r\n          width = buffer.readUInt16BE(offset + 5);\r\n          break;\r\n        } else {\r\n          const len = buffer.readUInt16BE(offset);\r\n          offset += len;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      format,\r\n      dimensions: width && height ? `${width}x${height}px` : undefined,\r\n      size: `${(buffer.length / 1024).toFixed(2)} KB`,\r\n    };\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\n\r\nexport = ocrCommand;\r\n"],"names":[],"mappings":"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","debug_id":"1aafee59-a9ee-57f8-90f9-148b3c5fd198"}
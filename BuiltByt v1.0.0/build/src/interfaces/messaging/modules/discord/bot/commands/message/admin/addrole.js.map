{"version":3,"file":"addrole.js","sources":["src/interfaces/messaging/modules/discord/bot/commands/message/admin/addrole.ts"],"sourceRoot":"/","sourcesContent":["import {\r\n\tActionRowBuilder, ButtonBuilder, ButtonInteraction, ButtonStyle, ChannelType, ComponentType,\r\n\tEmbedBuilder, MessageComponentInteraction, PermissionFlagsBits, Role, RoleSelectMenuBuilder,\r\n\tStringSelectMenuBuilder, TextChannel\r\n} from \"discord.js\";\r\n\r\nimport { EmbedCorrect, ErrorEmbed } from \"@/shared/adapters/extends/embeds.extend\";\r\nimport { Precommand, RoleAssignmentConfig } from \"@/typings/modules/discord\";\r\n\r\n//TODO: Arreglar los errores de respuesta, el codigo ya esta completo solo falta arreglar los errores de las interacciones\r\nconst AddRoleCommand: Precommand = {\r\n  name: \"addrole\",\r\n  description: \"Assign roles to multiple server members\",\r\n  examples: [\"addrole\"],\r\n  nsfw: false,\r\n  owner: false,\r\n  aliases: [\"massrole\"],\r\n  maintenance: true,\r\n  botpermissions: [PermissionFlagsBits.ManageRoles],\r\n  permissions: [PermissionFlagsBits.ManageRoles],\r\n  async execute(client, message) {\r\n    if (!message.guild || !message.channel || message.channel.type !== ChannelType.GuildText) return;\r\n\r\n    const config: RoleAssignmentConfig = {\r\n      roles: [],\r\n      delay: 1000,\r\n      target: \"all\",\r\n      skipExisting: false,\r\n      logChannel: null,\r\n    };\r\n\r\n    const botMember = await message.guild.members.fetchMe();\r\n    if (!botMember.permissions.has(PermissionFlagsBits.ManageRoles)) {\r\n      return message.reply({\r\n        embeds: [\r\n          new ErrorEmbed()\r\n            .setTitle(\"Permission Error\")\r\n            .setDescription(\r\n              [\r\n                `${client.getEmoji(message.guild.id, \"error\")} I need the \\`Manage Roles\\` permission to assign roles.`,\r\n                \"Please ensure that my role is above the roles you want to assign.\",\r\n              ].join(\"\\n\"),\r\n            ),\r\n        ],\r\n      });\r\n    }\r\n\r\n    const mainEmbed = new EmbedBuilder()\r\n      .setTitle(\"Role Assignment Configuration\")\r\n      .setColor(\"#0099ff\")\r\n      .setDescription(\"Configure mass role assignment\")\r\n      .addFields(\r\n        {\r\n          name: \"Selected Roles\",\r\n          value: config.roles.length > 0 ? config.roles.map((id) => `<@&${id}>`).join(\", \") : \"None\",\r\n          inline: true,\r\n        },\r\n        {\r\n          name: \"Target\",\r\n          value: config.target === \"all\" ? \"All members\" : config.target === \"bots\" ? \"Only bots\" : \"Only human users\",\r\n          inline: true,\r\n        },\r\n        {\r\n          name: \"Delay Between Assignments\",\r\n          value: `${config.delay / 1000} seconds`,\r\n          inline: true,\r\n        },\r\n        {\r\n          name: \"Skip Existing Roles\",\r\n          value: config.skipExisting ? \"Yes\" : \"No\",\r\n          inline: true,\r\n        },\r\n        {\r\n          name: \"Log Channel\",\r\n          value: config.logChannel ? `<#${config.logChannel}>` : \"None\",\r\n          inline: true,\r\n        },\r\n      )\r\n      .setFooter({ text: \"Select roles and configure options\" });\r\n\r\n    const roleSelectRow = new ActionRowBuilder<RoleSelectMenuBuilder>().addComponents(\r\n      new RoleSelectMenuBuilder()\r\n        .setCustomId(\"role_select\")\r\n        .setPlaceholder(\"Select up to 5 roles\")\r\n        .setMinValues(1)\r\n        .setMaxValues(5),\r\n    );\r\n\r\n    const targetSelectRow = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(\r\n      new StringSelectMenuBuilder()\r\n        .setCustomId(\"target_select\")\r\n        .setPlaceholder(\"Select the target\")\r\n        .addOptions(\r\n          { label: \"All members\", value: \"all\" },\r\n          { label: \"Only human users\", value: \"users\" },\r\n          { label: \"Only bots\", value: \"bots\" },\r\n        ),\r\n    );\r\n\r\n    const optionsSelectRow = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(\r\n      new StringSelectMenuBuilder()\r\n        .setCustomId(\"options_select\")\r\n        .setPlaceholder(\"Additional options\")\r\n        .addOptions(\r\n          { label: \"Toggle Skip Existing\", value: \"toggle_skip\" },\r\n          { label: \"Set Log Channel\", value: \"set_log\" },\r\n        ),\r\n    );\r\n\r\n    const delayButtonsRow = new ActionRowBuilder<ButtonBuilder>().addComponents(\r\n      new ButtonBuilder().setCustomId(\"delay_1\").setLabel(\"1s\").setStyle(ButtonStyle.Secondary),\r\n      new ButtonBuilder().setCustomId(\"delay_2\").setLabel(\"2s\").setStyle(ButtonStyle.Secondary),\r\n      new ButtonBuilder().setCustomId(\"delay_5\").setLabel(\"5s\").setStyle(ButtonStyle.Secondary),\r\n    );\r\n\r\n    const actionButtonsRow = new ActionRowBuilder<ButtonBuilder>().addComponents(\r\n      new ButtonBuilder()\r\n        .setCustomId(\"confirm\")\r\n        .setLabel(\"Confirm Configuration\")\r\n        .setStyle(ButtonStyle.Success)\r\n        .setDisabled(config.roles.length === 0),\r\n      new ButtonBuilder().setCustomId(\"edit_roles\").setLabel(\"Edit Roles\").setStyle(ButtonStyle.Primary),\r\n      new ButtonBuilder().setCustomId(\"cancel\").setLabel(\"Cancel\").setStyle(ButtonStyle.Danger),\r\n    );\r\n\r\n    const response = await message.reply({\r\n      embeds: [mainEmbed],\r\n      components: [roleSelectRow, targetSelectRow, optionsSelectRow, delayButtonsRow, actionButtonsRow],\r\n    });\r\n\r\n    const collector = response.createMessageComponentCollector({\r\n      filter: (interaction: MessageComponentInteraction) => {\r\n        return interaction.user.id === message.author.id;\r\n      },\r\n      time: 300000,\r\n    });\r\n\r\n    collector.on(\"collect\", async (interaction: MessageComponentInteraction) => {\r\n      try {\r\n        if (interaction.user.id !== message.author.id) {\r\n          return interaction.reply({\r\n            embeds: [new ErrorEmbed().setDescription(\"Only the command author can interact with this menu.\")],\r\n            flags: \"Ephemeral\",\r\n          });\r\n        }\r\n\r\n        // Defer update for all interactions to prevent \"InteractionNotReplied\" errors\r\n        if (!interaction.deferred && !interaction.replied) {\r\n          await interaction.deferUpdate();\r\n        }\r\n\r\n        if (interaction.isButton()) {\r\n          switch (interaction.customId) {\r\n            case \"delay_1\":\r\n              config.delay = 1000;\r\n              break;\r\n            case \"delay_2\":\r\n              config.delay = 2000;\r\n              break;\r\n            case \"delay_5\":\r\n              config.delay = 5000;\r\n              break;\r\n            case \"confirm\":\r\n              await handleConfirmation(interaction);\r\n              return;\r\n            case \"edit_roles\":\r\n              await interaction.followUp({\r\n                content: \"Select the roles you want to assign:\",\r\n                components: [roleSelectRow],\r\n                flags: \"Ephemeral\",\r\n              });\r\n              return;\r\n            case \"cancel\":\r\n              await interaction.editReply({\r\n                embeds: [\r\n                  new EmbedBuilder()\r\n                    .setTitle(\"Operation Cancelled\")\r\n                    .setDescription(\"Role assignment has been cancelled.\"),\r\n                ],\r\n                components: [],\r\n              });\r\n              collector.stop();\r\n              return;\r\n          }\r\n        }\r\n\r\n        if (interaction.isRoleSelectMenu() && interaction.customId === \"role_select\") {\r\n          config.roles = interaction.values;\r\n          actionButtonsRow.components[0].setDisabled(config.roles.length === 0);\r\n        }\r\n\r\n        if (interaction.isStringSelectMenu()) {\r\n          if (interaction.customId === \"target_select\") {\r\n            config.target = interaction.values[0] as \"users\" | \"bots\" | \"all\";\r\n          } else if (interaction.customId === \"options_select\") {\r\n            const selectedOption = interaction.values[0];\r\n            if (selectedOption === \"toggle_skip\") {\r\n              config.skipExisting = !config.skipExisting;\r\n            } else if (selectedOption === \"set_log\") {\r\n              // Prompt user to mention a log channel\r\n              await interaction.followUp({\r\n                content: \"Please mention or provide the ID of the channel where you want to log the results:\",\r\n                flags: \"Ephemeral\",\r\n              });\r\n\r\n              // Collect channel message\r\n              const channelFilter = (m: { author: { id: string } }) => m.author.id === interaction.user.id;\r\n              try {\r\n                const collected = await (interaction.channel as TextChannel).awaitMessages({\r\n                  filter: channelFilter,\r\n                  max: 1,\r\n                  time: 60000,\r\n                  errors: [\"time\"],\r\n                });\r\n\r\n                if (collected) {\r\n                  const content = collected.first()?.content;\r\n                  if (content) {\r\n                    const channelMatch = content.match(/<#(\\d+)>|(\\d+)/);\r\n                    const channelId = channelMatch?.[1] || channelMatch?.[2];\r\n                    if (channelId) {\r\n                      const channel = await message.guild?.channels.fetch(channelId);\r\n                      if (channel && channel.isTextBased()) {\r\n                        config.logChannel = channelId;\r\n                        await collected.first()?.reply({\r\n                          content: `Log channel set to ${channel.toString()}`,\r\n                          flags: \"SuppressNotifications\",\r\n                        });\r\n                      } else {\r\n                        await collected.first()?.reply({\r\n                          content: \"Invalid channel. Please provide a valid text channel.\",\r\n                          flags: \"SuppressNotifications\",\r\n                        });\r\n                      }\r\n                    } else {\r\n                      await collected.first()?.reply({\r\n                        content: \"No channel mentioned. Please mention a channel or provide its ID.\",\r\n                        flags: \"SuppressNotifications\",\r\n                      });\r\n                    }\r\n                  }\r\n                }\r\n              } catch (error) {\r\n                await interaction.followUp({\r\n                  content: \"Channel selection timed out or was cancelled.\",\r\n                  flags: \"Ephemeral\",\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Update the main embed with current configuration\r\n        mainEmbed.setFields(\r\n          {\r\n            name: \"Selected Roles\",\r\n            value: config.roles.length > 0 ? config.roles.map((id) => `<@&${id}>`).join(\", \") : \"None\",\r\n            inline: true,\r\n          },\r\n          {\r\n            name: \"Target\",\r\n            value:\r\n              config.target === \"all\" ? \"All members\" : config.target === \"bots\" ? \"Only bots\" : \"Only human users\",\r\n            inline: true,\r\n          },\r\n          {\r\n            name: \"Delay Between Assignments\",\r\n            value: `${config.delay / 1000} seconds`,\r\n            inline: true,\r\n          },\r\n          {\r\n            name: \"Skip Existing Roles\",\r\n            value: config.skipExisting ? \"Yes\" : \"No\",\r\n            inline: true,\r\n          },\r\n          {\r\n            name: \"Log Channel\",\r\n            value: config.logChannel ? `<#${config.logChannel}>` : \"None\",\r\n            inline: true,\r\n          },\r\n        );\r\n\r\n        await interaction.editReply({\r\n          embeds: [mainEmbed],\r\n          components: [roleSelectRow, targetSelectRow, optionsSelectRow, delayButtonsRow, actionButtonsRow],\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error in interaction handler:\", error);\r\n        if (!interaction.replied && !interaction.deferred) {\r\n          await interaction.reply({\r\n            embeds: [\r\n              new ErrorEmbed()\r\n                .setTitle(\"Interaction Error\")\r\n                .setDescription(\"An error occurred while processing your interaction.\"),\r\n            ],\r\n            flags: \"Ephemeral\",\r\n          });\r\n        } else {\r\n          await interaction.followUp({\r\n            embeds: [\r\n              new ErrorEmbed()\r\n                .setTitle(\"Interaction Error\")\r\n                .setDescription(\"An error occurred while processing your interaction.\"),\r\n            ],\r\n            flags: \"Ephemeral\",\r\n          });\r\n        }\r\n      }\r\n\r\n      return;\r\n    });\r\n\r\n    collector.on(\"end\", () => {\r\n      response.edit({ components: [] }).catch(console.error);\r\n    });\r\n\r\n    async function handleConfirmation(interaction: MessageComponentInteraction) {\r\n      if (!message.guild) return;\r\n\r\n      try {\r\n        const authorMember = await message.guild.members.fetch(message.author.id);\r\n        const botMember = await message.guild.members.fetchMe();\r\n\r\n        const invalidRoles: string[] = [];\r\n        const rolesToAssign: Role[] = [];\r\n\r\n        // Verify valid roles\r\n        for (const roleId of config.roles) {\r\n          const role = await message.guild.roles.fetch(roleId);\r\n          if (!role) continue;\r\n\r\n          if (role.comparePositionTo(botMember.roles.highest) >= 0) {\r\n            invalidRoles.push(role.name);\r\n            continue;\r\n          }\r\n\r\n          if (role.comparePositionTo(authorMember.roles.highest) >= 0) {\r\n            invalidRoles.push(role.name);\r\n            continue;\r\n          }\r\n\r\n          rolesToAssign.push(role);\r\n        }\r\n\r\n        if (invalidRoles.length > 0) {\r\n          await interaction.editReply({\r\n            embeds: [\r\n              new ErrorEmbed()\r\n                .setTitle(\"Permission Error\")\r\n                .setDescription(\r\n                  [\r\n                    `${client.getEmoji(message.guild.id, \"error\")} Error: The following roles are not valid: ${invalidRoles.join(\", \")}`,\r\n                    \"Make sure the bot's role is higher than the roles you want to assign.\",\r\n                  ].join(\"\\n\"),\r\n                ),\r\n            ],\r\n          });\r\n          return;\r\n        }\r\n\r\n        if (rolesToAssign.length === 0) {\r\n          await interaction.editReply({\r\n            embeds: [new ErrorEmbed().setTitle(\"Error\").setDescription(\"No valid roles were selected for assignment.\")],\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Get and filter members\r\n        let members = await message.guild.members.fetch();\r\n        if (config.target === \"bots\") {\r\n          members = members.filter((m) => m.user.bot);\r\n        } else if (config.target === \"users\") {\r\n          members = members.filter((m) => !m.user.bot);\r\n        }\r\n\r\n        if (members.size === 0) {\r\n          await interaction.editReply({\r\n            embeds: [\r\n              new ErrorEmbed()\r\n                .setTitle(\"No Members Found\")\r\n                .setDescription(`No members match the selected target: ${config.target}`),\r\n            ],\r\n            components: [],\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Show final confirmation\r\n        const confirmationEmbed = new EmbedCorrect()\r\n          .setTitle(\"Final Confirmation\")\r\n          .setColor(\"#0099ff\")\r\n          .setDescription(`You are about to assign ${rolesToAssign.length} role(s) to ${members.size} member(s).`)\r\n          .addFields(\r\n            {\r\n              name: \"Roles\",\r\n              value: rolesToAssign.map((r) => r.toString()).join(\", \"),\r\n              inline: true,\r\n            },\r\n            {\r\n              name: \"Target\",\r\n              value:\r\n                config.target === \"all\" ? \"All members\" : config.target === \"bots\" ? \"Only bots\" : \"Only human users\",\r\n              inline: true,\r\n            },\r\n            {\r\n              name: \"Delay\",\r\n              value: `${config.delay / 1000} seconds between assignments`,\r\n              inline: true,\r\n            },\r\n            {\r\n              name: \"Skip Existing\",\r\n              value: config.skipExisting ? \"Yes\" : \"No\",\r\n              inline: true,\r\n            },\r\n          );\r\n\r\n        const confirmButtons = new ActionRowBuilder<ButtonBuilder>().addComponents(\r\n          new ButtonBuilder()\r\n            .setCustomId(\"final-confirm-addrole\")\r\n            .setLabel(\"Confirm Assignment\")\r\n            .setStyle(ButtonStyle.Success),\r\n          new ButtonBuilder().setCustomId(\"final-cancel-addrole\").setLabel(\"Cancel\").setStyle(ButtonStyle.Danger),\r\n        );\r\n\r\n        await interaction.editReply({\r\n          embeds: [confirmationEmbed],\r\n          components: [confirmButtons],\r\n        });\r\n\r\n        const updatedMessage = await interaction.fetchReply();\r\n\r\n        // Collector for final confirmation\r\n        const finalCollector = updatedMessage.createMessageComponentCollector({\r\n          componentType: ComponentType.Button,\r\n          time: 60000,\r\n        });\r\n\r\n        finalCollector.on(\"collect\", async (finalInteraction: ButtonInteraction) => {\r\n          try {\r\n            if (finalInteraction.user.id !== message.author.id) {\r\n              await finalInteraction.reply({\r\n                embeds: [new ErrorEmbed().setDescription(\"Only the command author can confirm this action.\")],\r\n                flags: \"Ephemeral\",\r\n              });\r\n              return;\r\n            }\r\n\r\n            await finalInteraction.deferUpdate();\r\n\r\n            if (finalInteraction.customId === \"final-confirm-addrole\") {\r\n              const progressEmbed = new EmbedCorrect()\r\n                .setTitle(\"Assigning Roles...\")\r\n                .setDescription(`Progress: 0/${members.size} (0%)`)\r\n                .addFields(\r\n                  { name: \"Successes\", value: \"0\", inline: true },\r\n                  { name: \"Failures\", value: \"0\", inline: true },\r\n                  { name: \"Skipped\", value: \"0\", inline: true },\r\n                );\r\n\r\n              const progressMessage = await updatedMessage.edit({\r\n                embeds: [progressEmbed],\r\n                components: [],\r\n              });\r\n\r\n              let successCount = 0;\r\n              let failCount = 0;\r\n              let skipCount = 0;\r\n\r\n              // Create a log entry if log channel is specified\r\n              let logMessage = null;\r\n              if (config.logChannel) {\r\n                try {\r\n                  const logChannel = (await message.guild?.channels.fetch(config.logChannel)) as TextChannel;\r\n                  if (logChannel) {\r\n                    const logEmbed = new EmbedBuilder()\r\n                      .setTitle(\"Role Assignment Started\")\r\n                      .setColor(\"#0099ff\")\r\n                      .setDescription(`Mass role assignment initiated by ${message.author}`)\r\n                      .addFields(\r\n                        {\r\n                          name: \"Assigned Roles\",\r\n                          value: rolesToAssign.map((r) => r.toString()).join(\", \"),\r\n                          inline: false,\r\n                        },\r\n                        { name: \"Target Members\", value: members.size.toString(), inline: true },\r\n                        {\r\n                          name: \"Skip Existing\",\r\n                          value: config.skipExisting ? \"Yes\" : \"No\",\r\n                          inline: true,\r\n                        },\r\n                      )\r\n                      .setTimestamp();\r\n\r\n                    logMessage = await logChannel.send({ embeds: [logEmbed] });\r\n                  }\r\n                } catch (logError) {\r\n                  console.error(\"Failed to send log message:\", logError);\r\n                }\r\n              }\r\n\r\n              // Process members in batches to avoid rate limits\r\n              const memberArray = Array.from(members.values());\r\n              const batchSize = 10;\r\n              const totalBatches = Math.ceil(memberArray.length / batchSize);\r\n\r\n              for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {\r\n                const batchStart = batchIndex * batchSize;\r\n                const batchEnd = Math.min(batchStart + batchSize, memberArray.length);\r\n                const currentBatch = memberArray.slice(batchStart, batchEnd);\r\n\r\n                const batchPromises = currentBatch.map(async (member, index) => {\r\n                  const memberIndex = batchStart + index;\r\n                  try {\r\n                    // Check if member already has all roles and skip if configured\r\n                    if (config.skipExisting) {\r\n                      const hasAllRoles = rolesToAssign.every((role) => member.roles.cache.has(role.id));\r\n                      if (hasAllRoles) {\r\n                        skipCount++;\r\n                        return;\r\n                      }\r\n                    }\r\n\r\n                    await member.roles.add(rolesToAssign);\r\n                    successCount++;\r\n                  } catch (error) {\r\n                    console.error(`Failed to assign roles to ${member.user.tag}:`, error);\r\n                    failCount++;\r\n                  }\r\n\r\n                  // Update progress every 10 members or at the end of each batch\r\n                  if (index % 5 === 0 || index === currentBatch.length - 1) {\r\n                    const progress = Math.floor(((memberIndex + 1) / members.size) * 100);\r\n                    progressEmbed\r\n                      .setDescription(`Progress: ${memberIndex + 1}/${members.size} (${progress}%)`)\r\n                      .spliceFields(\r\n                        0,\r\n                        3,\r\n                        { name: \"Successes\", value: successCount.toString(), inline: true },\r\n                        { name: \"Failures\", value: failCount.toString(), inline: true },\r\n                        { name: \"Skipped\", value: skipCount.toString(), inline: true },\r\n                      );\r\n\r\n                    await progressMessage.edit({\r\n                      embeds: [progressEmbed],\r\n                    });\r\n                  }\r\n                });\r\n\r\n                await Promise.all(batchPromises);\r\n\r\n                // Delay between batches if not the last batch\r\n                if (batchIndex < totalBatches - 1) {\r\n                  await new Promise((resolve) => setTimeout(resolve, config.delay));\r\n                }\r\n              }\r\n\r\n              // Final result\r\n              const resultEmbed = new EmbedCorrect()\r\n                .setTitle(\"Role Assignment Complete\")\r\n                .setDescription(`Assigned ${rolesToAssign.length} role(s) to ${members.size} member(s)`)\r\n                .addFields(\r\n                  {\r\n                    name: \"Successful Assignments\",\r\n                    value: successCount.toString(),\r\n                    inline: true,\r\n                  },\r\n                  {\r\n                    name: \"Failed Assignments\",\r\n                    value: failCount.toString(),\r\n                    inline: true,\r\n                  },\r\n                  {\r\n                    name: \"Skipped Members\",\r\n                    value: skipCount.toString(),\r\n                    inline: true,\r\n                  },\r\n                  {\r\n                    name: \"Assigned Roles\",\r\n                    value: rolesToAssign.map((r) => r.toString()).join(\", \"),\r\n                  },\r\n                );\r\n\r\n              await progressMessage.edit({\r\n                embeds: [resultEmbed],\r\n              });\r\n\r\n              // Update log channel if specified\r\n              if (logMessage && config.logChannel) {\r\n                try {\r\n                  const logChannel = (await message.guild?.channels.fetch(config.logChannel)) as TextChannel;\r\n                  if (logChannel) {\r\n                    const logEmbed = new EmbedBuilder()\r\n                      .setTitle(\"Role Assignment Completed\")\r\n                      .setColor(\"#00ff00\")\r\n                      .setDescription(`Mass role assignment completed by ${message.author}`)\r\n                      .addFields(\r\n                        {\r\n                          name: \"Assigned Roles\",\r\n                          value: rolesToAssign.map((r) => r.toString()).join(\", \"),\r\n                          inline: false,\r\n                        },\r\n                        { name: \"Target Members\", value: members.size.toString(), inline: true },\r\n                        { name: \"Successes\", value: successCount.toString(), inline: true },\r\n                        { name: \"Failures\", value: failCount.toString(), inline: true },\r\n                        { name: \"Skipped\", value: skipCount.toString(), inline: true },\r\n                      )\r\n                      .setTimestamp();\r\n\r\n                    await logChannel.send({ embeds: [logEmbed] });\r\n                  }\r\n                } catch (logError) {\r\n                  console.error(\"Failed to send completion log:\", logError);\r\n                }\r\n              }\r\n\r\n              finalCollector.stop();\r\n            } else if (finalInteraction.customId === \"final-cancel-addrole\") {\r\n              await updatedMessage.edit({\r\n                embeds: [\r\n                  new EmbedBuilder()\r\n                    .setTitle(\"Operation Cancelled\")\r\n                    .setDescription(\"Role assignment has been cancelled.\")\r\n                    .setColor(\"#ff0000\"),\r\n                ],\r\n                components: [],\r\n              });\r\n\r\n              finalCollector.stop();\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error in final confirmation:\", error);\r\n            await finalInteraction.followUp({\r\n              embeds: [\r\n                new ErrorEmbed()\r\n                  .setTitle(\"Unexpected Error\")\r\n                  .setDescription(\"An error occurred during role assignment.\"),\r\n              ],\r\n              flags: \"Ephemeral\",\r\n            });\r\n          }\r\n        });\r\n\r\n        finalCollector.on(\"end\", () => {\r\n          // Clean up if no interaction was received\r\n          if (finalCollector.collected.size === 0) {\r\n            updatedMessage.edit({ components: [] }).catch(console.error);\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error in handleConfirmation:\", error);\r\n        await interaction.editReply({\r\n          embeds: [\r\n            new ErrorEmbed()\r\n              .setTitle(\"Unexpected Error\")\r\n              .setDescription(\"An error occurred while processing your request.\"),\r\n          ],\r\n          components: [],\r\n        });\r\n      }\r\n    }\r\n\r\n    return;\r\n  },\r\n};\r\n\r\nexport = AddRoleCommand;\r\n"],"names":[],"mappings":"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","debug_id":"ecc969f8-4823-5829-8e64-7748c46805ad"}
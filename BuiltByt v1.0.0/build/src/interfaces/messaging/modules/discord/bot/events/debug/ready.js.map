{"version":3,"file":"ready.js","sources":["src/interfaces/messaging/modules/discord/bot/events/debug/ready.ts"],"sourceRoot":"/","sourcesContent":["import { Guild } from \"discord.js\";\r\n\r\nimport { LogClass } from \"@/interfaces/messaging/modules/discord/structure/handlers/eventlistener\";\r\nimport { Event } from \"@/interfaces/messaging/modules/discord/structure/utils/builders\";\r\nimport { client, main } from \"@/main\";\r\n\r\n/**\r\n * Represents the \"ready\" event for the Discord bot.\r\n * This event is triggered when the bot successfully logs in and is ready to operate.\r\n */\r\nexport default new Event(\"ready\", async () => {\r\n  // Ensure the bot's user is available before proceeding.\r\n  if (!client.user) return;\r\n\r\n  /**\r\n   * Fetches guild data from the database where the bot is registered.\r\n   * The query retrieves the guild ID and event log settings.\r\n   */\r\n  const data = await main.prisma.myGuild.findMany({\r\n    where: { discordId: client.user.id },\r\n    select: {\r\n      guildId: true,\r\n      eventlogs: {\r\n        select: {\r\n          enabled: true,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  /**\r\n   * An array to store the guilds that the bot is a part of and are cached.\r\n   */\r\n  let guilds: Guild[] = [];\r\n\r\n  // Iterate through the fetched guild data and add the corresponding cached guilds to the array.\r\n  for (const guild of data) {\r\n    const guildData = client.guilds.cache.get(guild.guildId);\r\n    if (guildData) {\r\n      guilds.push(guildData);\r\n    }\r\n  }\r\n\r\n  // If no guilds are found, exit the function.\r\n  if (guilds.length === 0) return;\r\n\r\n  /**\r\n   * Initializes a logger instance for the bot with the retrieved guilds.\r\n   * Enables logging functionality for the bot.\r\n   */\r\n  const logger = await new LogClass(client, guilds);\r\n  await logger.enabled(true);\r\n});\r\n"],"names":[],"mappings":";;;;AAEA,2GAAmG;AACnG,8FAAwF;AACxF,iCAAsC;AAEtC;;;GAGG;AACH,kBAAe,IAAI,gBAAK,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;IAC3C,wDAAwD;IACxD,IAAI,CAAC,aAAM,CAAC,IAAI;QAAE,OAAO;IAEzB;;;OAGG;IACH,MAAM,IAAI,GAAG,MAAM,WAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;QAC9C,KAAK,EAAE,EAAE,SAAS,EAAE,aAAM,CAAC,IAAI,CAAC,EAAE,EAAE;QACpC,MAAM,EAAE;YACN,OAAO,EAAE,IAAI;YACb,SAAS,EAAE;gBACT,MAAM,EAAE;oBACN,OAAO,EAAE,IAAI;iBACd;aACF;SACF;KACF,CAAC,CAAC;IAEH;;OAEG;IACH,IAAI,MAAM,GAAY,EAAE,CAAC;IAEzB,+FAA+F;IAC/F,KAAK,MAAM,KAAK,IAAI,IAAI,EAAE,CAAC;QACzB,MAAM,SAAS,GAAG,aAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACzD,IAAI,SAAS,EAAE,CAAC;YACd,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACzB,CAAC;IACH,CAAC;IAED,6CAA6C;IAC7C,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO;IAEhC;;;OAGG;IACH,MAAM,MAAM,GAAG,MAAM,IAAI,wBAAQ,CAAC,aAAM,EAAE,MAAM,CAAC,CAAC;IAClD,MAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC","debug_id":"ed89049d-c4a9-5ce5-8ecd-95df71b0a431"}
{"version":3,"file":"members.addon.js","sources":["src/interfaces/messaging/modules/discord/addons/members/members.addon.ts"],"sourceRoot":"/","sourcesContent":["import { ChannelType, Guild, PresenceUpdateStatus } from \"discord.js\";\r\nimport schedule from \"node-schedule\";\r\n\r\nimport { Addons } from \"@/interfaces/messaging/modules/discord/structure/addons\";\r\nimport { main } from \"@/main\";\r\nimport { logWithLabel } from \"@utils/functions/console\";\r\n\r\n// Utilidad para delay con promesa\r\nfunction delay(ms: number) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\n// Utilidad para reemplazo de placeholders\r\nfunction replacePlaceholders(guild: Guild, channelName: string): string {\r\n  const members = guild.members.cache;\r\n  const roles = guild.roles.cache;\r\n  const channels = guild.channels.cache;\r\n\r\n  const placeholderMap: Record<string, string> = {\r\n    \"{user}\": guild.memberCount?.toString() || \"0\",\r\n    \"{users}\": guild.memberCount?.toString() || \"0\",\r\n    \"{member}\": members.filter((m) => !m.user.bot).size.toString(),\r\n    \"{members}\": members.filter((m) => !m.user.bot).size.toString(),\r\n    \"{bots}\": members.filter((m) => m.user.bot).size.toString(),\r\n    \"{bot}\": members.filter((m) => m.user.bot).size.toString(),\r\n    \"{online}\": members\r\n      .filter((m) => m.presence?.status === PresenceUpdateStatus.Online)\r\n      .size.toString(),\r\n    \"{offline}\": members.filter((m) => !m.presence).size.toString(),\r\n    \"{idle}\": members\r\n      .filter((m) => m.presence?.status === PresenceUpdateStatus.Idle)\r\n      .size.toString(),\r\n    \"{dnd}\": members\r\n      .filter((m) => m.presence?.status === PresenceUpdateStatus.DoNotDisturb)\r\n      .size.toString(),\r\n    \"{allonline}\": members.filter((m) => m.presence).size.toString(),\r\n    \"{onlinemember}\": members\r\n      .filter((m) => !m.user.bot && m.presence?.status === PresenceUpdateStatus.Online)\r\n      .size.toString(),\r\n    \"{offlinemember}\": members.filter((m) => !m.user.bot && !m.presence).size.toString(),\r\n    \"{idlemember}\": members\r\n      .filter((m) => !m.user.bot && m.presence?.status === PresenceUpdateStatus.Idle)\r\n      .size.toString(),\r\n    \"{dndmember}\": members\r\n      .filter((m) => !m.user.bot && m.presence?.status === PresenceUpdateStatus.DoNotDisturb)\r\n      .size.toString(),\r\n    \"{allonlinemember}\": members.filter((m) => !m.user.bot && m.presence).size.toString(),\r\n    \"{role}\": roles.size.toString(),\r\n    \"{roles}\": roles.size.toString(),\r\n    \"{channel}\": channels.size.toString(),\r\n    \"{channels}\": channels.size.toString(),\r\n    \"{text}\": channels.filter((ch) => ch.type === ChannelType.GuildText).size.toString(),\r\n    \"{texts}\": channels.filter((ch) => ch.type === ChannelType.GuildText).size.toString(),\r\n    \"{voice}\": channels.filter((ch) => ch.type === ChannelType.GuildVoice).size.toString(),\r\n    \"{voices}\": channels.filter((ch) => ch.type === ChannelType.GuildVoice).size.toString(),\r\n    \"{stage}\": channels.filter((ch) => ch.type === ChannelType.GuildStageVoice).size.toString(),\r\n    \"{stages}\": channels.filter((ch) => ch.type === ChannelType.GuildStageVoice).size.toString(),\r\n    \"{thread}\": channels\r\n      .filter(\r\n        (ch) =>\r\n          ch.type === ChannelType.PublicThread ||\r\n          ch.type === ChannelType.PrivateThread ||\r\n          ch.type === ChannelType.AnnouncementThread,\r\n      )\r\n      .size.toString(),\r\n    \"{threads}\": channels\r\n      .filter(\r\n        (ch) =>\r\n          ch.type === ChannelType.PublicThread ||\r\n          ch.type === ChannelType.PrivateThread ||\r\n          ch.type === ChannelType.AnnouncementThread,\r\n      )\r\n      .size.toString(),\r\n    \"{news}\": channels.filter((ch) => ch.type === ChannelType.GuildAnnouncement).size.toString(),\r\n    \"{category}\": channels.filter((ch) => ch.type === ChannelType.GuildCategory).size.toString(),\r\n    \"{parent}\": channels.filter((ch) => ch.type === ChannelType.GuildCategory).size.toString(),\r\n    \"{openthread}\": channels.filter((ch) => ch.isThread() && !ch.archived).size.toString(),\r\n    \"{openthreads}\": channels.filter((ch) => ch.isThread() && !ch.archived).size.toString(),\r\n    \"{archivedthread}\": channels.filter((ch) => ch.isThread() && ch.archived).size.toString(),\r\n    \"{archivedthreads}\": channels.filter((ch) => ch.isThread() && ch.archived).size.toString(),\r\n  };\r\n\r\n  let newName = channelName;\r\n  for (const [placeholder, value] of Object.entries(placeholderMap)) {\r\n    newName = newName.replace(new RegExp(placeholder, \"gi\"), value);\r\n  }\r\n  return newName;\r\n}\r\n\r\n// Procesamiento paralelo limitado (m치x 3 guilds a la vez)\r\nasync function processGuildsInBatches(\r\n  guildIds: string[],\r\n  fn: (id: string) => Promise<void>,\r\n  batchSize = 3,\r\n) {\r\n  for (let i = 0; i < guildIds.length; i += batchSize) {\r\n    const batch = guildIds.slice(i, i + batchSize);\r\n    await Promise.allSettled(batch.map(fn));\r\n    await delay(1000); // Peque침o delay entre lotes para evitar rate limit\r\n  }\r\n}\r\n\r\nexport default new Addons(\r\n  {\r\n    name: \"Member Count\",\r\n    description: \"Counts the number of members in the server and updates it in a specific channel.\",\r\n    author: \"Hiroshi025\",\r\n    version: \"1.0.0\",\r\n    bitfield: [\"ManageChannels\"],\r\n  },\r\n  async (client) => {\r\n    // Funci칩n principal para actualizar todos los guilds\r\n    async function updateAllGuilds() {\r\n      logWithLabel(\"debug\", \"[MemberCount] Starting update of all guilds...\");\r\n      try {\r\n        // Optimized query: only fetch necessary fields\r\n        const setups = await main.prisma.myGuild.findMany({\r\n          select: {\r\n            guildId: true,\r\n            membercount_channel1: true,\r\n            membercount_channel2: true,\r\n            membercount_channel3: true,\r\n            membercount_channel4: true,\r\n            membercount_channel5: true,\r\n            membercount_message1: true,\r\n            membercount_message2: true,\r\n            membercount_message3: true,\r\n            membercount_message4: true,\r\n            membercount_message5: true,\r\n          },\r\n          where: {\r\n            OR: Array.from({ length: 5 }, (_, i) => ({\r\n              [`membercount_channel${i + 1}`]: { not: null, notIn: [\"\", \"no\"] },\r\n            })),\r\n          },\r\n        });\r\n\r\n        logWithLabel(\"debug\", `[MemberCount] Found setups: ${JSON.stringify(setups)}`);\r\n        const guilds = setups.map((setup) => setup.guildId);\r\n        logWithLabel(\"debug\", `[MemberCount] Guilds to process: ${JSON.stringify(guilds)}`);\r\n\r\n        await processGuildsInBatches(guilds, memberCount, 3);\r\n        logWithLabel(\"debug\", \"[MemberCount] Finished updating all guilds.\");\r\n      } catch (error: any) {\r\n        logWithLabel(\"error\", `[MemberCount] ${error.message}`);\r\n      }\r\n    }\r\n\r\n    // Ejecuta al iniciar el bot\r\n    client.on(\"ready\", () => {\r\n      logWithLabel(\"debug\", \"[MemberCount] Ready event: running updateAllGuilds\");\r\n      updateAllGuilds();\r\n    });\r\n\r\n    // Ejecuta cada hora\r\n    client.Jobmembercount = schedule.scheduleJob(\"0 * * * *\", () => {\r\n      logWithLabel(\"debug\", \"[MemberCount] Scheduled task: running updateAllGuilds\");\r\n      updateAllGuilds();\r\n    });\r\n\r\n    // Funci칩n para actualizar los canales de un guild\r\n    async function memberCount(guildId: string) {\r\n      logWithLabel(\"debug\", `[MemberCount] Processing guild: ${guildId}`);\r\n      try {\r\n        const guild = client.guilds.cache.get(guildId);\r\n        if (!guild) {\r\n          logWithLabel(\"warn\", `[MemberCount] Guild not found: ${guildId}`);\r\n          return;\r\n        }\r\n\r\n        logWithLabel(\"debug\", `[MemberCount] Fetching members for guild: ${guildId}`);\r\n        await guild.members.fetch().catch((err) => {\r\n          logWithLabel(\r\n            \"error\",\r\n            `[MemberCount] Failed to fetch members for guild ${guildId}: ${err.message}`,\r\n          );\r\n        });\r\n\r\n        const settings = await main.prisma.myGuild.findFirst({\r\n          where: { guildId },\r\n        });\r\n\r\n        logWithLabel(\r\n          \"debug\",\r\n          `[MemberCount] Settings for guild ${guildId}: ${JSON.stringify(settings)}`,\r\n        );\r\n\r\n        if (!settings) {\r\n          logWithLabel(\"warn\", `[MemberCount] No settings found for guild ${guildId}`);\r\n          return;\r\n        }\r\n\r\n        // Process each configured channel (1-5)\r\n        for (let i = 1; i <= 5; i++) {\r\n          const channelId = settings[`membercount_channel${i}` as keyof typeof settings];\r\n          const message = settings[`membercount_message${i}` as keyof typeof settings];\r\n\r\n          logWithLabel(\r\n            \"debug\",\r\n            `[MemberCount] Slot ${i}: channelId=${channelId}, message=${message}`,\r\n          );\r\n\r\n          // Channel ID validation (must be string and typical Discord ID length)\r\n          if (typeof channelId === \"string\" && /^\\d{17,20}$/.test(channelId)) {\r\n            try {\r\n              if (typeof message === \"string\") {\r\n                logWithLabel(\r\n                  \"debug\",\r\n                  `[MemberCount] Updating channel ${channelId} in guild ${guildId} with message: ${message}`,\r\n                );\r\n                await updateChannel(guild, channelId, message);\r\n                await delay(500); // Small delay between channels to avoid rate limit\r\n              } else {\r\n                logWithLabel(\r\n                  \"warn\",\r\n                  `[MemberCount] Invalid message for channel ${channelId} in guild ${guildId}`,\r\n                );\r\n              }\r\n            } catch (err: any) {\r\n              logWithLabel(\r\n                \"error\",\r\n                `[MemberCount] Error updating channel ${channelId} in guild ${guildId}: ${err.message}`,\r\n              );\r\n            }\r\n          } else {\r\n            logWithLabel(\r\n              \"warn\",\r\n              `[MemberCount] Invalid or unconfigured channel in slot ${i} for guild ${guildId}`,\r\n            );\r\n          }\r\n        }\r\n        logWithLabel(\"debug\", `[MemberCount] Finished processing guild: ${guildId}`);\r\n      } catch (error: any) {\r\n        logWithLabel(\r\n          \"error\",\r\n          `[MemberCount] Error in memberCount for guild ${guildId}: ${error.message}`,\r\n        );\r\n      }\r\n    }\r\n\r\n    // Funci칩n para actualizar el nombre del canal\r\n    async function updateChannel(\r\n      guild: Guild,\r\n      channelId: string,\r\n      channelName: string,\r\n    ): Promise<boolean> {\r\n      logWithLabel(\r\n        \"debug\",\r\n        `[MemberCount] updateChannel - Guild: ${guild.name} (${guild.id}) - Channel: ${channelId}, Name: ${channelName}`,\r\n      );\r\n\r\n      try {\r\n        const channel = await guild.channels.fetch(channelId).catch((err) => {\r\n          logWithLabel(\r\n            \"error\",\r\n            `[MemberCount] Failed to fetch channel ${channelId} in guild ${guild.id}: ${err.message}`,\r\n          );\r\n          return null;\r\n        });\r\n\r\n        if (!channel || !channel.isVoiceBased()) {\r\n          logWithLabel(\r\n            \"warn\",\r\n            `[MemberCount] Channel ${channelId} is not voice-based or does not exist in guild ${guild.id}`,\r\n          );\r\n          return false;\r\n        }\r\n\r\n        const newname = replacePlaceholders(guild, channelName);\r\n        logWithLabel(\"debug\", `[MemberCount] Current name: ${channel.name} | New name: ${newname}`);\r\n\r\n        if (channel.name !== newname) {\r\n          await channel.setName(newname).catch((err) => {\r\n            logWithLabel(\r\n              \"error\",\r\n              `[MemberCount] Failed to set name for channel ${channelId} in guild ${guild.id}: ${err.message}`,\r\n            );\r\n          });\r\n          logWithLabel(\r\n            \"debug\",\r\n            `[MemberCount] Channel name ${channelId} updated successfully in guild ${guild.id}`,\r\n          );\r\n          return true;\r\n        } else {\r\n          logWithLabel(\r\n            \"debug\",\r\n            `[MemberCount] Channel name ${channelId} is already up to date in guild ${guild.id}`,\r\n          );\r\n        }\r\n        return false;\r\n      } catch (error: any) {\r\n        logWithLabel(\r\n          \"error\",\r\n          `[MemberCount] Error in updateChannel for guild ${guild.id}, channel ${channelId}: ${error.message}`,\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n  },\r\n);\r\n"],"names":[],"mappings":"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","debug_id":"8ce6e2ac-0b0d-5004-975f-afe15a45fd00"}
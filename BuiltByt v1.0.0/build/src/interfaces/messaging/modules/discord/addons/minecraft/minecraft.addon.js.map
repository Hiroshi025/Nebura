{"version":3,"file":"minecraft.addon.js","sources":["src/interfaces/messaging/modules/discord/addons/minecraft/minecraft.addon.ts"],"sourceRoot":"/","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n\tActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, StringSelectMenuBuilder,\r\n\tStringSelectMenuOptionBuilder, TextChannel\r\n} from \"discord.js\";\r\n\r\nimport { client, main } from \"@/main\";\r\nimport { config } from \"@/shared/utils/config\";\r\nimport { logWithLabel } from \"@/shared/utils/functions/console\";\r\n\r\nimport _package from \"../../../../../../../package.json\";\r\nimport { Addons } from \"../../structure/addons\";\r\nimport configuration from \"./config\";\r\nimport { MinecraftServerConfig } from \"./types\";\r\n\r\nexport default new Addons(\r\n  {\r\n    name: \"Advanced Minecraft Status Handler\",\r\n    description: \"Advanced status monitoring for multiple Minecraft servers\",\r\n    author: _package.author,\r\n    version: _package.version,\r\n    bitfield: [\"ManageChannels\", \"SendMessages\", \"EmbedLinks\"],\r\n  },\r\n  async () => {\r\n    // Cache for server statuses\r\n    const statusCache: Record<string, any> = {};\r\n    let lastApiResponseTime: number = 0;\r\n    let errorCount: number = 0;\r\n    let lastError: string | null = null;\r\n\r\n    /**\r\n     * Fetches server status from API with proper error handling\r\n     */\r\n    async function fetchServerStatus(server: MinecraftServerConfig): Promise<any> {\r\n      try {\r\n        const apiUrl =\r\n          server.type === \"bedrock\"\r\n            ? `https://api.mcsrvstat.us/bedrock/3/${server.ip}${server.port ? `:${server.port}` : \"\"}`\r\n            : `https://api.mcsrvstat.us/3/${server.ip}${server.port ? `:${server.port}` : \"\"}`;\r\n\r\n        const apiStartTime = Date.now();\r\n        const response = await axios.get(apiUrl, {\r\n          timeout: configuration.timeout,\r\n          headers: {\r\n            \"User-Agent\": `DiscordBot/${_package.version} (${_package.author})`,\r\n          },\r\n        });\r\n\r\n        lastApiResponseTime = Date.now() - apiStartTime;\r\n        return response.data;\r\n      } catch (error: any) {\r\n        if (axios.isAxiosError(error)) {\r\n          if (error.response) {\r\n            throw new Error(`API Error: ${error.response.status} ${error.response.statusText}`);\r\n          } else if (error.request) {\r\n            throw new Error(\"API request timed out or failed to connect\");\r\n          } else {\r\n            throw new Error(`API configuration error: ${error.message}`);\r\n          }\r\n        } else {\r\n          throw new Error(`Unexpected error: ${error.message}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Creates a rich embed with server status information\r\n     */\r\n    function createStatusEmbed(serverConfig: MinecraftServerConfig, statusData: any): EmbedBuilder {\r\n      const isOnline = statusData?.online === true;\r\n      const embedColor = isOnline ? 0x00ff00 : 0xff0000;\r\n      const statusText = isOnline ? \"ONLINE\" : \"OFFLINE\";\r\n      const statusEmoji = isOnline\r\n        ? client.getEmoji(config.modules.discord.guildId, \"online\") || \"🟢\"\r\n        : client.getEmoji(config.modules.discord.guildId, \"offline\") || \"🔴\";\r\n\r\n      const embed = new EmbedBuilder()\r\n        .setColor(embedColor)\r\n        .setTitle(`${statusEmoji} ${serverConfig.displayName || serverConfig.name} - ${statusText}`)\r\n        .setDescription(serverConfig.description || \"No description provided\")\r\n        .setFooter({\r\n          text: `Last updated: ${new Date().toLocaleString()} | API response: ${lastApiResponseTime}ms`,\r\n          iconURL: client.user?.displayAvatarURL(),\r\n        })\r\n        .setTimestamp();\r\n\r\n      // Basic server info\r\n      embed.addFields({\r\n        name: \"🔗 Connection Info\",\r\n        value: [\r\n          `**Address:** \\`${statusData.ip || serverConfig.ip}\\``,\r\n          `**Port:** \\`${statusData.port || serverConfig.port || \"default\"}\\``,\r\n          `**Type:** ${serverConfig.type.toUpperCase()}`,\r\n        ].join(\"\\n\"),\r\n        inline: true,\r\n      });\r\n\r\n      if (isOnline) {\r\n        // Version info\r\n        embed.addFields({\r\n          name: \"📋 Version Info\",\r\n          value: [\r\n            `**Version:** ${statusData.version || \"Unknown\"}`,\r\n            `**Protocol:** ${statusData.protocol?.name || statusData.protocol?.version || \"Unknown\"}`,\r\n            `**Software:** ${statusData.software || \"Vanilla\"}`,\r\n          ].join(\"\\n\"),\r\n          inline: true,\r\n        });\r\n\r\n        // Players info\r\n        const players = statusData.players || {};\r\n        const playerCount = `${players.online || 0}/${players.max || 0}`;\r\n        const playerList =\r\n          players.list\r\n            ?.slice(0, 10)\r\n            .map((p: any) => `• ${p.name}`)\r\n            .join(\"\\n\") || \"No players online\";\r\n\r\n        embed.addFields({\r\n          name: `👥 Players (${playerCount})`,\r\n          value: playerList.length > 1000 ? playerList.substring(0, 1000) + \"...\" : playerList,\r\n          inline: false,\r\n        });\r\n\r\n        // MOTD\r\n        if (statusData.motd?.clean) {\r\n          embed.addFields({\r\n            name: \"📜 MOTD\",\r\n            value: statusData.motd.clean.join(\"\\n\").slice(0, 1024),\r\n            inline: false,\r\n          });\r\n        }\r\n\r\n        // Server icon if available\r\n        if (statusData.icon) {\r\n          embed.setThumbnail(\r\n            `https://api.mcsrvstat.us/icon/${serverConfig.ip}${serverConfig.port ? `:${serverConfig.port}` : \"\"}`,\r\n          );\r\n        }\r\n      } else {\r\n        embed.addFields({\r\n          name: \"🔍 Debug Info\",\r\n          value: [\r\n            `**Last Error:** ${lastError || \"None\"}`,\r\n            `**Error Count:** ${errorCount}`,\r\n            `**Cache Status:** ${statusData.debug?.cachehit ? \"HIT\" : \"MISS\"}`,\r\n          ].join(\"\\n\"),\r\n          inline: false,\r\n        });\r\n      }\r\n\r\n      return embed;\r\n    }\r\n\r\n    /**\r\n     * Creates interactive components for the message\r\n     */\r\n    function createMessageComponents(servers: MinecraftServerConfig[], currentServer: string) {\r\n      // Server selection dropdown\r\n      const serverSelect = new StringSelectMenuBuilder()\r\n        .setCustomId(\"minecraft_server_select\")\r\n        .setPlaceholder(\"Select a server...\")\r\n        .addOptions(\r\n          servers.map((server) =>\r\n            new StringSelectMenuOptionBuilder()\r\n              .setLabel(server.displayName || server.name)\r\n              .setDescription(server.description?.slice(0, 50) || \"\")\r\n              .setValue(server.name)\r\n              .setDefault(server.name === currentServer),\r\n          ),\r\n        );\r\n\r\n      // Action buttons\r\n      const buttons = new ActionRowBuilder<ButtonBuilder>().addComponents(\r\n        new ButtonBuilder()\r\n          .setCustomId(\"refresh_status\")\r\n          .setLabel(\"Refresh\")\r\n          .setEmoji(\"🔄\")\r\n          .setStyle(ButtonStyle.Primary),\r\n        new ButtonBuilder()\r\n          .setStyle(ButtonStyle.Link)\r\n          .setLabel(\"API Docs\")\r\n          .setEmoji(\"📄\")\r\n          .setURL(\"https://api.mcsrvstat.us/\"),\r\n      );\r\n\r\n      return [new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(serverSelect), buttons];\r\n    }\r\n\r\n    /**\r\n     * Updates the status message in Discord\r\n     */\r\n    async function updateStatusMessage(serverName: string) {\r\n      try {\r\n        const serverConfig = configuration.servers.find((s) => s.name === serverName);\r\n        if (!serverConfig) throw new Error(`Server config not found: ${serverName}`);\r\n\r\n        // Fetch channel and validate\r\n        const channel = (await main.discord.channels.fetch(configuration.channelId)) as TextChannel;\r\n        if (!channel?.isTextBased()) throw new Error(\"Invalid channel\");\r\n\r\n        // Get server status\r\n        let statusData;\r\n        try {\r\n          statusData = await fetchServerStatus(serverConfig);\r\n          statusCache[serverName] = statusData;\r\n          errorCount = 0;\r\n          lastError = null;\r\n        } catch (error: any) {\r\n          errorCount++;\r\n          lastError = error.message;\r\n          logWithLabel(\"error\", `Error fetching status for ${serverName}: ${error.message}`, {\r\n            customLabel: \"Minecraft\",\r\n            context: { server: serverName, errorCount },\r\n          });\r\n\r\n          // Use cached data if available\r\n          statusData = statusCache[serverName] || { online: false };\r\n        }\r\n\r\n        // Create embed and components\r\n        const embed = createStatusEmbed(serverConfig, statusData);\r\n        const components = createMessageComponents(configuration.servers, serverName);\r\n\r\n        // Calculate uptime percentage (simplified)\r\n        const uptimePercentage = statusData.online ? \"100%\" : \"0%\";\r\n\r\n        // Message content\r\n        const content = [\r\n          `## ${serverConfig.displayName || serverConfig.name} Status`,\r\n          `**Uptime:** ${uptimePercentage} | **Errors:** ${errorCount}`,\r\n          `**Last Update:** <t:${Math.floor(Date.now() / 1000)}:R>`,\r\n        ].join(\"\\n\");\r\n\r\n        // Try to edit existing message or send new one\r\n        let message;\r\n        if (configuration.messageId) {\r\n          try {\r\n            message = await channel.messages.fetch(configuration.messageId);\r\n            if (message.author.id !== client.user?.id) {\r\n              throw new Error(\"Message not owned by bot\");\r\n            }\r\n            await message.edit({ content, embeds: [embed], components });\r\n          } catch {\r\n            // If message doesn't exist or can't be edited, send new one\r\n            message = await channel.send({ content, embeds: [embed], components });\r\n            configuration.messageId = message.id;\r\n          }\r\n        } else {\r\n          message = await channel.send({ content, embeds: [embed], components });\r\n          configuration.messageId = message.id;\r\n        }\r\n\r\n        return message;\r\n      } catch (error: any) {\r\n        logWithLabel(\"error\", `Failed to update status message: ${error.message}`, {\r\n          customLabel: \"Minecraft\",\r\n          context: { server: serverName, error: error.stack },\r\n        });\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Main function to initialize the status monitoring\r\n     */\r\n    async function initializeStatusHandler() {\r\n      if (!configuration.enabled) return;\r\n\r\n      // Initial status update\r\n      try {\r\n        await updateStatusMessage(configuration.defaultServer || configuration.servers[0].name);\r\n        logWithLabel(\"info\", \"Initial Minecraft server status update completed\");\r\n      } catch (error: any) {\r\n        logWithLabel(\"error\", `Initial status update failed: ${error.message}`);\r\n      }\r\n\r\n      // Set up periodic updates\r\n      setInterval(async () => {\r\n        try {\r\n          await updateStatusMessage(configuration.defaultServer || configuration.servers[0].name);\r\n        } catch (error) {\r\n          console.error(\"Periodic status update failed:\", error);\r\n        }\r\n      }, configuration.updateInterval);\r\n\r\n      // Set up interaction handling\r\n      client.on(\"interactionCreate\", async (interaction) => {\r\n        if (!interaction.isStringSelectMenu() && !interaction.isButton()) return;\r\n        if (![\"minecraft_server_select\", \"refresh_status\"].includes(interaction.customId)) return;\r\n\r\n        await interaction.deferUpdate();\r\n\r\n        try {\r\n          if (interaction.isStringSelectMenu()) {\r\n            // Server selection changed\r\n            const selectedServer = interaction.values[0];\r\n            await updateStatusMessage(selectedServer);\r\n          } else if (interaction.isButton() && interaction.customId === \"refresh_status\") {\r\n            // Refresh button clicked\r\n            const currentServer = configuration.defaultServer || configuration.servers[0].name;\r\n            await updateStatusMessage(currentServer);\r\n          }\r\n        } catch (error) {\r\n          logWithLabel(\"error\", `Interaction handling failed: ${error}`);\r\n          await interaction.followUp({\r\n            content: \"❌ Failed to update status. Please try again later.\",\r\n            flags: \"Ephemeral\",\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    // Start the status handler\r\n    initializeStatusHandler().catch((error) => {\r\n      logWithLabel(\"error\", `Failed to initialize Minecraft status handler: ${error.message}`);\r\n    });\r\n  },\r\n);\r\n"],"names":[],"mappings":"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","debug_id":"d2054555-1717-5b71-a69e-111984208d22"}
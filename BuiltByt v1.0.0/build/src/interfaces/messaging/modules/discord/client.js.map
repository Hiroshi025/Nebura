{"version":3,"file":"client.js","sources":["src/interfaces/messaging/modules/discord/client.ts"],"sourceRoot":"/","sourcesContent":["import { Client, Collection, GatewayIntentBits, Options, Partials } from \"discord.js\";\r\nimport DisTube from \"distube\";\r\n\r\nimport { main } from \"@/main\";\r\nimport { DiscordError } from \"@/shared/adapters/extends/error.extend\";\r\nimport { config } from \"@/shared/utils/config\";\r\nimport { logWithLabel } from \"@/shared/utils/functions/console\";\r\nimport emojis from \"@config/json/emojis.json\";\r\nimport { Buttons, Menus, Modals } from \"@typings/modules/discord\";\r\n\r\nimport { GiveawayService } from \"./structure/giveaway\";\r\nimport { DiscordHandler } from \"./structure/handlers/collection\";\r\nimport { YouTube } from \"./structure/handlers/youtube\";\r\nimport { Command } from \"./structure/utils/builders\";\r\n\r\n/**\r\n * Represents the main Discord client for the application.\r\n * Extends the `Client` class from `discord.js` to provide additional functionality.\r\n */\r\nexport class MyClient extends Client {\r\n  /**\r\n   * Configuration for the Discord module.\r\n   * Loaded from the application's configuration file.\r\n   */\r\n  private settings: typeof config.modules.discord;\r\n\r\n  /**\r\n   * Instance of the `DiscordHandler` class, responsible for managing Discord-related operations.\r\n   */\r\n  public handlers: DiscordHandler;\r\n\r\n  /**\r\n   * A collection that holds categories, where the key is a string identifier\r\n   * (e.g., category name) and the value is an array of strings representing\r\n   * the items in that category.\r\n   *\r\n   * @type {Collection<string, string[]>}\r\n   */\r\n  public categories: Collection<string, string[]> = new Collection();\r\n\r\n  /**\r\n   * A collection of commands, where the key is the command name and the value\r\n   * is the command object (typically an instance of a Command class).\r\n   *\r\n   * @type {Collection<string, Command>}\r\n   */\r\n  public commands: Collection<string, Command> = new Collection();\r\n\r\n  /**\r\n   * A collection of buttons, where the key is a string identifier for the button\r\n   * (e.g., button name) and the value is the button object.\r\n   *\r\n   * @type {Collection<string, Buttons>}\r\n   */\r\n  public buttons: Collection<string, Buttons> = new Collection();\r\n\r\n  /**\r\n   * A collection of modals, where the key is a string identifier for the modal\r\n   * and the value is the modal object.\r\n   *\r\n   * @type {Collection<string, Modals>}\r\n   */\r\n  public modals: Collection<string, Modals> = new Collection();\r\n\r\n  /**\r\n   * A collection of menus, where the key is a string identifier for the menu\r\n   * and the value is the menu object.\r\n   *\r\n   * @type {Collection<string, Menus>}\r\n   */\r\n  public menus: Collection<string, Menus> = new Collection();\r\n\r\n  /**\r\n   * A collection of addons, where the key is a string identifier for the addon\r\n   * and the value is the addon object.\r\n   *\r\n   * @type {Collection<unknown, unknown>}\r\n   */\r\n  public addons: Collection<unknown, unknown>;\r\n\r\n  /**\r\n   * Collection of preloaded commands.\r\n   *\r\n   * @type {Collection<string, unknown>}\r\n   * @public\r\n   */\r\n  public precommands: Collection<string, unknown>;\r\n\r\n  /**\r\n   * Collection of command aliases.\r\n   *\r\n   * @type {Collection<string, string>}\r\n   * @public\r\n   */\r\n  public aliases: Collection<string, string>;\r\n\r\n  /**\r\n   * Collection of modals.\r\n   *\r\n   * @type {Collection<string, unknown>}\r\n   * @public\r\n   */\r\n  public voiceGenerator: Collection<unknown, unknown>;\r\n\r\n  /**\r\n   * Collection of cooldowns for commands or interactions.\r\n   *\r\n   * @type {Collection<unknown, unknown>}\r\n   * @public\r\n   */\r\n  public cooldown: Collection<unknown, unknown>;\r\n\r\n  /**\r\n   * Collection of job members count.\r\n   *\r\n   * @type {Collection<unknown, unknown>}\r\n   * @public\r\n   */\r\n  public Jobmembercount: any;\r\n  public distube: DisTube;\r\n  Youtubelog: any;\r\n\r\n  /**\r\n   * Initializes a new instance of the `MyClient` class.\r\n   * Configures the client with specific intents and partials, and initializes handlers and settings.\r\n   */\r\n  constructor() {\r\n    super({\r\n      makeCache: Options.cacheWithLimits({\r\n        ...Options.DefaultMakeCacheSettings,\r\n        AutoModerationRuleManager: 0,\r\n      }),\r\n      intents: [\r\n        GatewayIntentBits.Guilds,\r\n        GatewayIntentBits.GuildMembers,\r\n        GatewayIntentBits.GuildIntegrations,\r\n        GatewayIntentBits.GuildWebhooks,\r\n        GatewayIntentBits.GuildInvites,\r\n        GatewayIntentBits.GuildVoiceStates,\r\n        GatewayIntentBits.GuildMessages,\r\n        GatewayIntentBits.MessageContent,\r\n        GatewayIntentBits.DirectMessages,\r\n        GatewayIntentBits.AutoModerationConfiguration,\r\n        GatewayIntentBits.DirectMessagePolls,\r\n        GatewayIntentBits.GuildIntegrations,\r\n        GatewayIntentBits.GuildScheduledEvents,\r\n        GatewayIntentBits.DirectMessageTyping,\r\n        GatewayIntentBits.GuildExpressions,\r\n        GatewayIntentBits.GuildMessageReactions,\r\n        GatewayIntentBits.DirectMessageReactions,\r\n      ],\r\n      partials: [\r\n        Partials.GuildMember,\r\n        Partials.Message,\r\n        Partials.User,\r\n        Partials.Channel,\r\n        Partials.ThreadMember,\r\n        Partials.GuildScheduledEvent,\r\n        Partials.Reaction,\r\n      ],\r\n      sweepers: {\r\n        ...Options.DefaultSweeperSettings,\r\n        users: {\r\n          interval: 1_800, // Every hour.\r\n          filter: () => (user) => user.bot && user.id !== user.client.user.id, // Remove all bots.\r\n        },\r\n        threads: {\r\n          interval: 1_800, // Every 30 minutes.\r\n          lifetime: 86_400, // Remove threads older than 24 hours.\r\n        },\r\n        stickers: {\r\n          interval: 1_800, // Every 30 minutes.\r\n          filter: () => (sticker) => sticker.guildId !== this.settings.guildId,\r\n        },\r\n        threadMembers: {\r\n          interval: 1_800, // Every 30 minutes.\r\n          filter: () => (threadMember) => {\r\n            // Remove thread members that are not in the guild.\r\n            const guild = this.guilds.cache.get(this.settings.guildId);\r\n            if (!threadMember.user) return false; // If the user is not defined, do not remove.\r\n            return !guild?.members.cache.has(threadMember.user.id);\r\n          },\r\n        },\r\n        autoModerationRules: {\r\n          interval: 1_800, // Every 30 minutes.\r\n          filter: () => (rule) => {\r\n            // Remove auto moderation rules that are not in the guild.\r\n            const guild = this.guilds.cache.get(this.settings.guildId);\r\n            return !guild?.autoModerationRules.cache.has(rule.id);\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    this.distube = new DisTube(this, {\r\n      emitNewSongOnly: true,\r\n      //leaveOnFinish: true,\r\n      emitAddSongWhenCreatingQueue: false,\r\n      emitAddListWhenCreatingQueue: false,\r\n      plugins: [],\r\n    });\r\n\r\n    this.handlers = new DiscordHandler(this);\r\n    this.settings = config.modules.discord;\r\n    this.cooldown = new Collection();\r\n\r\n    this.categories = new Collection();\r\n    this.commands = new Collection();\r\n    this.buttons = new Collection();\r\n\r\n    this.voiceGenerator = new Collection();\r\n    this.precommands = new Collection();\r\n    this.aliases = new Collection();\r\n\r\n    this.modals = new Collection();\r\n    this.addons = new Collection();\r\n    this.menus = new Collection();\r\n    \r\n    this.on(\"ready\", async () => {\r\n      const data = await main.DB.findDiscord(this.user?.id as string);\r\n      if (!data || !this.user || !data.activity) return;\r\n      this.user.setUsername(data.username);\r\n      this.user.setAvatar(data.avatar);\r\n      let activityName: string | undefined;\r\n      if (typeof data.activity === \"object\" && data.activity !== null && \"name\" in data.activity) {\r\n        activityName = (data.activity as { name: string }).name;\r\n      } else if (typeof data.activity === \"string\") {\r\n        activityName = data.activity;\r\n      }\r\n      if (activityName) {\r\n        this.user.setActivity({\r\n          name: activityName,\r\n          url: (data.activity as { url: string }).url,\r\n          state: (data.activity as { status: string }).status,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts the Discord client and the application.\r\n   *\r\n   * - Logs the startup process.\r\n   * - Validates the presence of a token in the configuration.\r\n   * - Logs into Discord using the provided token.\r\n   * - Loads and deploys the handlers.\r\n   *\r\n   * @returns {Promise<void>} Resolves when the client has successfully started or exits early if an error occurs.\r\n   */\r\n  public async start(): Promise<void> {\r\n    logWithLabel(\"debug\", \"Starting Discord API...\");\r\n    const { TOKEN_DISCORD } = process.env;\r\n\r\n    // Check if the token is provided in the configuration\r\n    if (!TOKEN_DISCORD) {\r\n      logWithLabel(\r\n        \"info\",\r\n        [\r\n          \"APP Discord API Error:\",\r\n          `  ${emojis.circle_x}  No token provided`,\r\n          `  ${emojis.circle_x}  Please provide a token in the config file`,\r\n        ].join(\"\\n\"),\r\n      );\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Log in to Discord using the provided token.\r\n     * The token is expected to be a string that authenticates the client with the Discord API.\r\n     * This method is asynchronous and returns a promise that resolves when the login is successful.\r\n     */\r\n    await this.login(TOKEN_DISCORD);\r\n    logWithLabel(\r\n      \"debug\",\r\n      [\r\n        \"APP Discord API Started:\",\r\n        `  ${emojis.circle_check}  Logged in as ${this.user?.tag} (${this.user?.id})`,\r\n        `  ${emojis.circle_check}  Latency: ${this.ws.ping}ms`,\r\n      ].join(\"\\n\"),\r\n    );\r\n\r\n    // Load and deploy the handlers\r\n    await this.handlers.loadAll();\r\n    await new GiveawayService();\r\n    await YouTube(this);\r\n    try {\r\n      await Promise.all([this.handlers.deployCommands()]);\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new DiscordError(\"Error loading handlers\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene un emoji por su nombre, priorizando los emojis del servidor.\r\n   *\r\n   * @param guildId - El ID del servidor donde buscar el emoji.\r\n   * @param emojiName - El nombre del emoji a buscar.\r\n   * @returns {string} El emoji encontrado o el emoji del archivo JSON si no está en el servidor.\r\n   */\r\n  public getEmoji(guildId: string, emojiName: keyof typeof emojis): string {\r\n    const guild = this.guilds.cache.get(guildId);\r\n    if (guild) {\r\n      const emoji = guild.emojis.cache.find((e) => e.name === emojiName);\r\n      if (emoji) return `<:${emoji.name}:${emoji.id}>`;\r\n    }\r\n    // Si no se encuentra en el servidor, usar el emoji del archivo JSON\r\n    return typeof emojis[emojiName] === \"string\" ? emojis[emojiName] : `:${emojiName}:`;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"1a99d59f-99b7-57b6-8114-0e665f6c399f"}
{"version":3,"file":"index.js","sources":["src/interfaces/messaging/modules/whatsapp/index.ts"],"sourceRoot":"/","sourcesContent":["import chalk from \"chalk\";\r\nimport { format } from \"date-fns\";\r\nimport * as ExcelJS from \"exceljs\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport qrcode from \"qrcode-terminal\";\r\nimport { Client, LocalAuth, Message } from \"whatsapp-web.js\";\r\n\r\nimport { config } from \"@/shared/utils/config\";\r\nimport { logWithLabel } from \"@/shared/utils/functions/console\";\r\nimport emojis from \"@config/json/emojis.json\";\r\n\r\n/**\r\n * Represents the WhatsApp module for handling interactions, logging, and statistics.\r\n *\r\n * - Logs all incoming messages to daily Excel files.\r\n * - Provides a private `/status` command for the bot number to get runtime statistics.\r\n * - Generates a daily Excel backup with client and chat statistics.\r\n */\r\nexport class MyApp {\r\n  /**\r\n   * Instance of the WhatsApp client.\r\n   */\r\n  public client!: Client;\r\n\r\n  /**\r\n   * Directory where chat Excel logs are stored.\r\n   */\r\n  private excelDirectory: string;\r\n\r\n  /**\r\n   * Current date string used for log file naming.\r\n   */\r\n  private currentDate: string;\r\n\r\n  /**\r\n   * Instance of the ExcelJS workbook for chat logs.\r\n   */\r\n  private workbook!: ExcelJS.Workbook;\r\n\r\n  /**\r\n   * Instance of the ExcelJS worksheet for chat logs.\r\n   */\r\n  private worksheet!: ExcelJS.Worksheet;\r\n\r\n  /**\r\n   * Timestamp (ms) when the client started.\r\n   */\r\n  private startTime: number;\r\n\r\n  /**\r\n   * Counter for unread messages since the last status check.\r\n   */\r\n  private unreadMessages: number;\r\n\r\n  /**\r\n   * Directory where status backup Excel files are stored.\r\n   */\r\n  private statusBackupDir: string;\r\n\r\n  /**\r\n   * Initializes the WhatsApp module, directories, and schedules status backups.\r\n   *\r\n   * @remarks\r\n   * - Ensures all required directories exist.\r\n   * - Initializes the daily Excel log file.\r\n   * - Schedules the daily status backup.\r\n   */\r\n  constructor() {\r\n    this.excelDirectory = path.join(config.project.logs, \"whatsapp\", \"chats\");\r\n    this.currentDate = this.getCurrentDateString();\r\n    this.startTime = Date.now();\r\n    this.unreadMessages = 0;\r\n    this.statusBackupDir = path.resolve(\"./config/backups/whatsapp\");\r\n    this.ensureDirectoryExists();\r\n    this.ensureStatusBackupDirExists();\r\n    this.initializeExcelFile();\r\n    this.scheduleStatusBackup();\r\n  }\r\n\r\n  /**\r\n   * Ensures that the directory for storing status backups exists.\r\n   * If it does not exist, it creates the directory.\r\n   */\r\n  private ensureStatusBackupDirExists() {\r\n    if (!fs.existsSync(this.statusBackupDir)) {\r\n      fs.mkdirSync(this.statusBackupDir, { recursive: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensures that the directory for storing chat Excel logs exists.\r\n   * If it does not exist, it creates the directory.\r\n   */\r\n  private ensureDirectoryExists() {\r\n    if (!fs.existsSync(this.excelDirectory)) {\r\n      fs.mkdirSync(this.excelDirectory, { recursive: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedules the status backup to run every 24 hours.\r\n   * The backup is also generated immediately on startup.\r\n   */\r\n  private scheduleStatusBackup() {\r\n    // Generate immediately on startup\r\n    this.generateStatusBackup();\r\n\r\n    // Log when scheduling the interval\r\n    logWithLabel(\"custom\", \"Scheduled WhatsApp status backup every 24 hours.\", {\r\n      customLabel: \"WhatsApp\"\r\n    });\r\n\r\n    setInterval(\r\n      async () => {\r\n        logWithLabel(\"custom\", \"Generating scheduled WhatsApp status backup...\", {\r\n          customLabel: \"WhatsApp\"\r\n        });\r\n        await this.generateStatusBackup();\r\n      },\r\n      24 * 60 * 60 * 1000,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Generates a status backup Excel file with client and chat Excel statistics.\r\n   * The backup includes uptime, Excel file stats, unread messages, and a list of chat log files.\r\n   * The backup is saved in the status backup directory.\r\n   */\r\n  private async generateStatusBackup() {\r\n    // Solo generar backup si la variable de entorno estÃ¡ activada\r\n    if (process.env.WHATSAPP_BACKUPS !== \"true\") {\r\n      return;\r\n    }\r\n    this.ensureStatusBackupDirExists();\r\n    const now = new Date();\r\n    const backupFileName = `status_${format(now, \"yyyy-MM-dd_HH-mm-ss\")}.xlsx`;\r\n    const backupFilePath = path.join(this.statusBackupDir, backupFileName);\r\n\r\n    // Gather stats\r\n    const uptimeMs = Date.now() - this.startTime;\r\n    const uptimeSec = Math.floor(uptimeMs / 1000) % 60;\r\n    const uptimeMin = Math.floor(uptimeMs / (1000 * 60)) % 60;\r\n    const uptimeHr = Math.floor(uptimeMs / (1000 * 60 * 60));\r\n    const uptimeStr = `${uptimeHr}h ${uptimeMin}m ${uptimeSec}s`;\r\n\r\n    const files = fs.existsSync(this.excelDirectory)\r\n      ? fs.readdirSync(this.excelDirectory).filter((f) => f.endsWith(\".xlsx\"))\r\n      : [];\r\n    const excelCount = files.length;\r\n    const lastExcel = files.sort().reverse()[0] || \"N/A\";\r\n    const excelPath = this.excelDirectory;\r\n    const unread = this.unreadMessages;\r\n\r\n    // Create workbook\r\n    const wb = new ExcelJS.Workbook();\r\n    const ws = wb.addWorksheet(\"Status\");\r\n\r\n    ws.columns = [\r\n      { header: \"Stat\", key: \"stat\", width: 30 },\r\n      { header: \"Value\", key: \"value\", width: 50 },\r\n    ];\r\n\r\n    ws.addRow({ stat: \"Uptime\", value: uptimeStr });\r\n    ws.addRow({ stat: \"Excel files generated\", value: excelCount });\r\n    ws.addRow({ stat: \"Last Excel file\", value: lastExcel });\r\n    ws.addRow({ stat: \"Excel files location\", value: excelPath });\r\n    ws.addRow({ stat: \"Unread messages\", value: unread });\r\n    ws.addRow({ stat: \"Backup generated at\", value: now.toLocaleString() });\r\n\r\n    // Add chat Excel files info\r\n    ws.addRow({});\r\n    ws.addRow({ stat: \"Chat Excel Files\", value: \"\" });\r\n    files.forEach((f) => {\r\n      ws.addRow({ stat: \"File\", value: f });\r\n    });\r\n\r\n    await wb.xlsx.writeFile(backupFilePath);\r\n  }\r\n\r\n  /**\r\n   * Initializes the WhatsApp client and sets up event listeners.\r\n   * Handles QR, authentication, message logging, and the `/status` command.\r\n   */\r\n  private InitClient = async () => {\r\n    this.client = new Client({\r\n      /*authStrategy: new RemoteAuth({\r\n        store: store,\r\n        backupSyncIntervalMs: 60000,\r\n        dataPath: path.join(config.project.logs, \"whatsapp\"),\r\n      }), */\r\n      authStrategy: new LocalAuth(),\r\n      puppeteer: {\r\n        headless: true,\r\n        args: [\"--no-sandbox\"],\r\n      },\r\n    });\r\n\r\n    this.client.on(\"qr\", (qr) => {\r\n      logWithLabel(\"custom\", \"QR RECEIVED. PLEASE SCAN\", {\r\n        customLabel: \"WhatsApp\",\r\n        context: {\r\n          clientId: this.client.info.wid.user,\r\n          clientName: this.client.info.pushname,\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n      });\r\n      qrcode.generate(qr, { small: true });\r\n    });\r\n\r\n    this.client.on(\"authenticated\", () => {\r\n      logWithLabel(\"custom\", \"AUTHENTICATED. The session is ready to be used.\", {\r\n        customLabel: \"WhatsApp\",\r\n      });\r\n      logWithLabel(\"custom\", \"Registered Client on the Web\", {\r\n        customLabel: \"WhatsApp\",\r\n      });\r\n    });\r\n\r\n    this.client.on(\"message\", async (msg: Message) => {\r\n      try {\r\n        const contact = await msg.getContact();\r\n\r\n        // If the message is from the bot itself, respond to /status command\r\n        const botNumber = this.client.info.wid._serialized;\r\n        if (msg.body.trim().toLowerCase() === \"/status\" && msg.from === botNumber) {\r\n          // Calculate uptime\r\n          const uptimeMs = Date.now() - this.startTime;\r\n          const uptimeSec = Math.floor(uptimeMs / 1000) % 60;\r\n          const uptimeMin = Math.floor(uptimeMs / (1000 * 60)) % 60;\r\n          const uptimeHr = Math.floor(uptimeMs / (1000 * 60 * 60));\r\n          const uptimeStr = `${uptimeHr}h ${uptimeMin}m ${uptimeSec}s`;\r\n\r\n          // Excel files\r\n          const files = fs.readdirSync(this.excelDirectory).filter((f) => f.endsWith(\".xlsx\"));\r\n          const excelCount = files.length;\r\n          const lastExcel = files.sort().reverse()[0] || \"N/A\";\r\n          const excelPath = this.excelDirectory;\r\n\r\n          // Unread messages\r\n          const unread = this.unreadMessages;\r\n\r\n          // Status backup files\r\n          const backupFiles = fs.existsSync(this.statusBackupDir)\r\n            ? fs.readdirSync(this.statusBackupDir).filter((f) => f.endsWith(\".xlsx\"))\r\n            : [];\r\n          const lastBackup = backupFiles.sort().reverse()[0] || \"N/A\";\r\n          const backupPath = this.statusBackupDir;\r\n\r\n          // Reply with status\r\n          await msg.reply(\r\n            `ðŸŸ¢ *WhatsApp Bot Status*\\n` +\r\n              `\\n*Uptime:* ${uptimeStr}` +\r\n              `\\n*Excel files generated:* ${excelCount}` +\r\n              `\\n*Last file:* ${lastExcel}` +\r\n              `\\n*Excel files location:* ${excelPath}` +\r\n              `\\n*Unread messages:* ${unread}` +\r\n              `\\n\\n*Status Backups:* ${backupFiles.length}` +\r\n              `\\n*Last backup:* ${lastBackup}` +\r\n              `\\n*Backup location:* ${backupPath}`,\r\n          );\r\n          return;\r\n        }\r\n\r\n        // If the message is NOT from the bot, increment unread messages\r\n        if (msg.from !== botNumber) {\r\n          this.unreadMessages++;\r\n        }\r\n\r\n        const messageData = {\r\n          timestamp: msg.timestamp,\r\n          sender: contact.name || contact.pushname || \"Unknown\",\r\n          number: msg.from,\r\n          hasAttachment: msg.hasMedia,\r\n          attachmentType: msg.hasMedia ? (await msg.downloadMedia()).mimetype.split(\"/\")[0] : null,\r\n          message: msg.body,\r\n          id: msg.id.id,\r\n        };\r\n\r\n        // Save to Excel\r\n        await this.saveToExcel(messageData);\r\n\r\n        // Log to console\r\n        logWithLabel(\r\n          \"info\",\r\n          `[${new Date().toLocaleTimeString()}] Message from ${messageData.sender}: ${messageData.message.substring(0, 30)}${messageData.message.length > 30 ? \"...\" : \"\"}`,\r\n          {\r\n            customLabel: \"WhatsApp\",\r\n            context: {\r\n              clientId: this.client.info.wid.user,\r\n              clientName: this.client.info.pushname,\r\n              timestamp: new Date().toISOString(),\r\n            },\r\n          },\r\n        );\r\n      } catch (error) {\r\n        logWithLabel(\"error\", `Error processing message: ${error}`, {\r\n          customLabel: \"WhatsApp\",\r\n          context: {\r\n            clientId: this.client.info.wid.user,\r\n            clientName: this.client.info.pushname,\r\n            timestamp: new Date().toISOString(),\r\n          },\r\n        });\r\n      }\r\n    });\r\n\r\n    this.client.initialize();\r\n  };\r\n\r\n  /**\r\n   * Gets the current date as a string in the format \"yyyy-MM-dd\".\r\n   * @returns The current date string.\r\n   */\r\n  private getCurrentDateString(): string {\r\n    return format(new Date(), \"yyyy-MM-dd\");\r\n  }\r\n\r\n  /**\r\n   * Constructs the file path for the Excel log file based on the current date.\r\n   * @returns The file path for the Excel log.\r\n   */\r\n  private getExcelFilePath(): string {\r\n    return path.join(this.excelDirectory, `messages_${this.currentDate}.xlsx`);\r\n  }\r\n\r\n  /**\r\n   * Checks if the date has changed and reinitializes the Excel file if necessary.\r\n   * This ensures daily log rotation.\r\n   */\r\n  private checkDateChange() {\r\n    const today = this.getCurrentDateString();\r\n    if (today !== this.currentDate) {\r\n      this.currentDate = today;\r\n      this.initializeExcelFile();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the Excel file for logging messages.\r\n   * If the file already exists, it loads the existing workbook.\r\n   * Otherwise, it creates a new workbook and worksheet.\r\n   */\r\n  private initializeExcelFile = async () => {\r\n    this.ensureDirectoryExists();\r\n    const filePath = this.getExcelFilePath();\r\n\r\n    this.workbook = new ExcelJS.Workbook();\r\n\r\n    if (fs.existsSync(filePath)) {\r\n      await this.workbook.xlsx.readFile(filePath);\r\n      this.worksheet =\r\n        this.workbook.getWorksheet(\"Messages\") || this.workbook.addWorksheet(\"Messages\");\r\n    } else {\r\n      this.worksheet = this.workbook.addWorksheet(\"Messages\");\r\n      this.worksheet.columns = [\r\n        { header: \"Date and Time\", key: \"timestamp\", width: 25 },\r\n        { header: \"Sender\", key: \"sender\", width: 30 },\r\n        { header: \"Number\", key: \"number\", width: 20 },\r\n        { header: \"Has Attachment\", key: \"hasAttachment\", width: 15 },\r\n        { header: \"Attachment Type\", key: \"attachmentType\", width: 15 },\r\n        { header: \"Message\", key: \"message\", width: 50 },\r\n        { header: \"Message ID\", key: \"id\", width: 30 },\r\n      ];\r\n\r\n      this.worksheet.getRow(1).font = { bold: true };\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Saves a message's data to the Excel log file.\r\n   * @param messageData The data of the message to be logged.\r\n   */\r\n  private saveToExcel = async (messageData: any) => {\r\n    this.checkDateChange(); // Check if the day has changed\r\n\r\n    this.worksheet.addRow({\r\n      timestamp: new Date(messageData.timestamp * 1000).toLocaleString(),\r\n      sender: messageData.sender,\r\n      number: messageData.number,\r\n      hasAttachment: messageData.hasAttachment ? \"Yes\" : \"No\",\r\n      attachmentType: messageData.attachmentType || \"N/A\",\r\n      message: messageData.message || \"N/A\",\r\n      id: messageData.id,\r\n    });\r\n\r\n    await this.workbook.xlsx.writeFile(this.getExcelFilePath());\r\n  };\r\n\r\n  /**\r\n   * Starts the WhatsApp module and initializes the client.\r\n   * Sets up the 'ready' event log.\r\n   */\r\n  public start = async () => {\r\n    this.InitClient();\r\n    this.client.on(\"ready\", () => {\r\n      logWithLabel(\r\n        \"custom\",\r\n        [\r\n          \"Client is ready!\",\r\n          `  ${emojis.info}  ${chalk.gray(\"The WhatsApp API module has started.\")}`,\r\n        ].join(\"\\n\"),\r\n        {\r\n          customLabel: \"WhatsApp\",\r\n        },\r\n      );\r\n    });\r\n  };\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"1a3f236e-0d36-55f2-b45d-4ec33e364d08"}
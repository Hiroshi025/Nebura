{"version":3,"file":"github.routes.js","sources":["src/interfaces/http/routes/api/public/github.routes.ts"],"sourceRoot":"/","sourcesContent":["// Importa los tipos necesarios de Express\r\n// import { Request, Response } from 'express';\r\n\r\nimport { Request, Response } from \"express\";\r\n\r\nimport { GitHubService } from \"@/adapters/external/github-service\";\r\nimport { RateLimitManager } from \"@/interfaces/messaging/broker/rateLimit\";\r\nimport { TRoutesInput } from \"@/typings/utils\";\r\n\r\n// Constantes para paths base y versionado\r\nconst BASE_PATH = \"/public/github\";\r\nconst API_VERSION = \"/api/v1\";\r\n\r\n/**\r\n * Formats the authentication routes with the correct prefix.\r\n * @param path Specific endpoint path.\r\n * @returns Formatted full route.\r\n */\r\nconst formatRoute = (path: string): string => `${API_VERSION}${BASE_PATH}${path}`;\r\nexport default ({ app }: TRoutesInput) => {\r\n  const githubService = new GitHubService();\r\n\r\n  /**\r\n   * Retrieves information about a GitHub user.\r\n   * Method: GET\r\n   * Route: /api/v1/public/github/users/:username\r\n   * Controller: githubService.getUser\r\n   * Description: Returns basic information about a GitHub user.\r\n   */\r\n  app.get(\r\n    formatRoute(\"/users/:username\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    async (req: Request, res: Response) => {\r\n      const { username } = req.params;\r\n      try {\r\n        const user = await githubService.getUser(username as string);\r\n        res.status(200).json(user);\r\n      } catch (error) {\r\n        res.status(500).json({ error: \"Error fetching user\" });\r\n      }\r\n    },\r\n  );\r\n\r\n  /**\r\n   * Retrieves all available information about a GitHub user.\r\n   * Method: GET\r\n   * Route: /api/v1/public/github/users/:username/all\r\n   * Controller: githubService.getAllUserData\r\n   * Description: Returns all available information about a GitHub user.\r\n   */\r\n  app.get(\r\n    formatRoute(\"/users/:username/all\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    async (req: Request, res: Response) => {\r\n      try {\r\n        const allData = await githubService.getAllUserData(req.params.username);\r\n        res.json(allData);\r\n      } catch (error) {\r\n        res.status(500).json({ error: error instanceof Error ? error.message : \"Unknown error\" });\r\n      }\r\n    },\r\n  );\r\n\r\n  /**\r\n   * Retrieves the repositories of a GitHub user.\r\n   * Method: GET\r\n   * Route: /api/v1/public/github/users/:username/repos\r\n   * Controller: githubService.getUserRepos\r\n   * Description: Returns a list of repositories of a GitHub user with pagination and sorting options.\r\n   */\r\n  app.get(\r\n    formatRoute(\"/users/:username/repos\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    async (req: Request, res: Response) => {\r\n      try {\r\n        const repos = await githubService.getUserRepos(req.params.username, {\r\n          per_page: req.query.per_page ? Number(req.query.per_page) : 30,\r\n          page: req.query.page ? Number(req.query.page) : 1,\r\n          sort: req.query.sort as \"created\" | \"updated\" | \"pushed\" | \"full_name\" | undefined,\r\n          direction: req.query.direction as \"asc\" | \"desc\" | undefined,\r\n        });\r\n        res.json(repos);\r\n      } catch (error) {\r\n        res.status(500).json({ error: error instanceof Error ? error.message : \"Unknown error\" });\r\n      }\r\n    },\r\n  );\r\n\r\n  /**\r\n   * Retrieves information about a specific repository.\r\n   * Method: GET\r\n   * Route: /api/v1/public/github/repos/:owner/:repo\r\n   * Controller: githubService.getRepo\r\n   * Description: Returns detailed information about a specific repository.\r\n   */\r\n  app.get(\r\n    formatRoute(\"/repos/:owner/:repo\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    async (req: Request, res: Response) => {\r\n      try {\r\n        const repo = await githubService.getRepo(req.params.owner, req.params.repo);\r\n        res.json(repo);\r\n      } catch (error) {\r\n        res.status(500).json({ error: error instanceof Error ? error.message : \"Unknown error\" });\r\n      }\r\n    },\r\n  );\r\n};\r\n"],"names":[],"mappings":"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","debug_id":"434bf1e0-dcef-555f-8a79-a767911410c9"}
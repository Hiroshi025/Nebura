{"version":3,"file":"auth.routes.js","sources":["src/interfaces/http/routes/api/auth/auth.routes.ts"],"sourceRoot":"/","sourcesContent":["// Importa los tipos necesarios de Express\r\n// import { Request, Response } from 'express';\r\n\r\nimport { authenticateToken } from \"@/interfaces/http/middlewares/jwt/token.middleware\";\r\nimport { RateLimitManager } from \"@/interfaces/messaging/broker/rateLimit\";\r\nimport { TRoutesInput } from \"@/typings/utils\";\r\n\r\nimport { AuthController } from \"../../../controllers/auth/auth.controllers\";\r\n\r\n// Constantes para paths base y versionado\r\nconst BASE_PATH = \"/auth\";\r\nconst API_VERSION = \"/api/v1\";\r\n\r\n/**\r\n * Formatea las rutas de autenticación con el prefijo correcto\r\n * @param path Ruta específica del endpoint\r\n * @returns Ruta completa formateada\r\n */\r\nconst formatRoute = (path: string): string => `${API_VERSION}${BASE_PATH}${path}`;\r\nexport default ({ app }: TRoutesInput) => {\r\n  const controller = new AuthController();\r\n  // Agrupar rutas relacionadas\r\n\r\n  /**\r\n   * Obtiene el perfil de usuario por ID.\r\n   * Endpoint: GET /api/v1/auth/:id\r\n   * Requiere autenticación mediante token JWT.\r\n   * Aplica un límite de 10 solicitudes por minuto.\r\n   */\r\n  app.get(\r\n    formatRoute(\"/:id\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    authenticateToken,\r\n    controller.getUserProfile.bind(controller),\r\n  );\r\n\r\n  /**\r\n   * Registra un nuevo usuario.\r\n   * Endpoint: POST /api/v1/auth/register\r\n   * No requiere autenticación.\r\n   * Aplica un límite de 10 solicitudes por minuto.\r\n   */\r\n  app.post(\r\n    formatRoute(\"/register\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    controller.register.bind(controller),\r\n  );\r\n\r\n  /**\r\n   * Inicia sesión de usuario.\r\n   * Endpoint: POST /api/v1/auth/login\r\n   * No requiere autenticación.\r\n   * Aplica un límite de 10 solicitudes por minuto.\r\n   */\r\n  app.post(\r\n    formatRoute(\"/login\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    controller.login.bind(controller),\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;AAAA,0CAA0C;AAC1C,+CAA+C;;AAE/C,yFAAuF;AACvF,uEAA2E;AAG3E,iFAA4E;AAE5E,0CAA0C;AAC1C,MAAM,SAAS,GAAG,OAAO,CAAC;AAC1B,MAAM,WAAW,GAAG,SAAS,CAAC;AAE9B;;;;GAIG;AACH,MAAM,WAAW,GAAG,CAAC,IAAY,EAAU,EAAE,CAAC,GAAG,WAAW,GAAG,SAAS,GAAG,IAAI,EAAE,CAAC;AAClF,kBAAe,CAAC,EAAE,GAAG,EAAgB,EAAE,EAAE;IACvC,MAAM,UAAU,GAAG,IAAI,iCAAc,EAAE,CAAC;IACxC,6BAA6B;IAE7B;;;;;OAKG;IACH,GAAG,CAAC,GAAG,CACL,WAAW,CAAC,MAAM,CAAC,EACnB,4BAAgB,CAAC,WAAW,EAAE,CAAC,mBAAmB,CAAC;QACjD,GAAG,EAAE,EAAE;QACP,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,WAAW;QAChC,OAAO,EAAE,4CAA4C;KACtD,CAAC,EACF,oCAAiB,EACjB,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAC3C,CAAC;IAEF;;;;;OAKG;IACH,GAAG,CAAC,IAAI,CACN,WAAW,CAAC,WAAW,CAAC,EACxB,4BAAgB,CAAC,WAAW,EAAE,CAAC,mBAAmB,CAAC;QACjD,GAAG,EAAE,EAAE;QACP,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,WAAW;QAChC,OAAO,EAAE,4CAA4C;KACtD,CAAC,EACF,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CACrC,CAAC;IAEF;;;;;OAKG;IACH,GAAG,CAAC,IAAI,CACN,WAAW,CAAC,QAAQ,CAAC,EACrB,4BAAgB,CAAC,WAAW,EAAE,CAAC,mBAAmB,CAAC;QACjD,GAAG,EAAE,EAAE;QACP,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,WAAW;QAChC,OAAO,EAAE,4CAA4C;KACtD,CAAC,EACF,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAClC,CAAC;AACJ,CAAC,CAAC","debug_id":"cc91a8c3-3f5b-57cd-99d2-51c086da8cac"}
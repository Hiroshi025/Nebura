{"version":3,"file":"devs.routes.js","sources":["src/interfaces/http/routes/api/admin/devs.routes.ts"],"sourceRoot":"/","sourcesContent":["// Importa los tipos necesarios de Express\r\n// import { Request, Response } from 'express';\r\n\r\nimport { Request, Response } from \"express\";\r\n\r\nimport { isDevelopment } from \"@/interfaces/http/middlewares/jwt/auth.middleware\";\r\nimport {\r\n\tauthenticateToken, isAdminToken\r\n} from \"@/interfaces/http/middlewares/jwt/token.middleware\";\r\nimport { RateLimitManager } from \"@/interfaces/messaging/broker/rateLimit\";\r\nimport { main } from \"@/main\";\r\nimport { TRoutesInput } from \"@/typings/utils\";\r\n\r\nimport { SecurityController } from \"../../../controllers/admin/devs.controllers\";\r\n\r\n// Constantes para paths base y versionado\r\nconst BASE_PATH = \"/admin\";\r\nconst API_VERSION = \"/api/v1\";\r\n\r\n/**\r\n * Formatea las rutas de autenticación con el prefijo correcto\r\n * @param path Ruta específica del endpoint\r\n * @returns Ruta completa formateada\r\n */\r\nconst formatRoute = (path: string): string => `${API_VERSION}${BASE_PATH}${path}`;\r\n\r\nexport default ({ app }: TRoutesInput) => {\r\n  const security = new SecurityController();\r\n\r\n  /**\r\n   * Retrieves information about a specific IP address.\r\n   * Method: GET\r\n   * Route: /api/v1/security/ip-info/:ipAddress\r\n   * Middleware: authenticateToken\r\n   * Controller: security.getIpInfo\r\n   * Description: Returns detailed information about an IP address.\r\n   */\r\n  app.get(\r\n    formatRoute(\"/ip-info/:ipAddress\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    authenticateToken,\r\n    isDevelopment,\r\n    security.getIpInfo,\r\n  );\r\n\r\n  /**\r\n   * Retrieves cache performance metrics.\r\n   * Method: GET\r\n   * Route: /api/v1/admin/cache-performance\r\n   * Middleware: authenticateToken, isDevelopment\r\n   * Controller: security.cacheInfo\r\n   * Description: Returns performance metrics related to the cache.\r\n   */\r\n  app.get(\r\n    formatRoute(\"/cache-performance\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    authenticateToken,\r\n    isDevelopment,\r\n    security.cacheInfo,\r\n  );\r\n\r\n  /**\r\n   * Retrieves the current cache index.\r\n   * Method: GET\r\n   * Route: /api/v1/admin/cache-index\r\n   * Middleware: authenticateToken, isDevelopment\r\n   * Controller: security.cacheIndex\r\n   * Description: Returns the current cache index.\r\n   */\r\n  app.get(\r\n    formatRoute(\"/cache-index\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    authenticateToken,\r\n    isDevelopment,\r\n    security.cacheIndex,\r\n  );\r\n\r\n  app.get(\r\n    formatRoute(\"/prisma-metrics\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    isAdminToken,\r\n    async (_req: Request, res: Response) => {\r\n      const prismaMetrics = await main.prisma.metrics.findMany({\r\n        where: {\r\n          createdAt: {\r\n            gte: new Date(Date.now() - 60 * 60 * 1000),\r\n          },\r\n        },\r\n        orderBy: {\r\n          createdAt: \"desc\",\r\n        },\r\n        take: 100,\r\n      });\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: prismaMetrics,\r\n      });\r\n    },\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;AAAA,0CAA0C;AAC1C,+CAA+C;;AAI/C,uFAAkF;AAClF,yFAE4D;AAC5D,uEAA2E;AAC3E,iCAA8B;AAG9B,kFAAiF;AAEjF,0CAA0C;AAC1C,MAAM,SAAS,GAAG,QAAQ,CAAC;AAC3B,MAAM,WAAW,GAAG,SAAS,CAAC;AAE9B;;;;GAIG;AACH,MAAM,WAAW,GAAG,CAAC,IAAY,EAAU,EAAE,CAAC,GAAG,WAAW,GAAG,SAAS,GAAG,IAAI,EAAE,CAAC;AAElF,kBAAe,CAAC,EAAE,GAAG,EAAgB,EAAE,EAAE;IACvC,MAAM,QAAQ,GAAG,IAAI,qCAAkB,EAAE,CAAC;IAE1C;;;;;;;OAOG;IACH,GAAG,CAAC,GAAG,CACL,WAAW,CAAC,qBAAqB,CAAC,EAClC,4BAAgB,CAAC,WAAW,EAAE,CAAC,mBAAmB,CAAC;QACjD,GAAG,EAAE,EAAE;QACP,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,WAAW;QAChC,OAAO,EAAE,4CAA4C;KACtD,CAAC,EACF,oCAAiB,EACjB,+BAAa,EACb,QAAQ,CAAC,SAAS,CACnB,CAAC;IAEF;;;;;;;OAOG;IACH,GAAG,CAAC,GAAG,CACL,WAAW,CAAC,oBAAoB,CAAC,EACjC,4BAAgB,CAAC,WAAW,EAAE,CAAC,mBAAmB,CAAC;QACjD,GAAG,EAAE,EAAE;QACP,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,WAAW;QAChC,OAAO,EAAE,4CAA4C;KACtD,CAAC,EACF,oCAAiB,EACjB,+BAAa,EACb,QAAQ,CAAC,SAAS,CACnB,CAAC;IAEF;;;;;;;OAOG;IACH,GAAG,CAAC,GAAG,CACL,WAAW,CAAC,cAAc,CAAC,EAC3B,4BAAgB,CAAC,WAAW,EAAE,CAAC,mBAAmB,CAAC;QACjD,GAAG,EAAE,EAAE;QACP,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,WAAW;QAChC,OAAO,EAAE,4CAA4C;KACtD,CAAC,EACF,oCAAiB,EACjB,+BAAa,EACb,QAAQ,CAAC,UAAU,CACpB,CAAC;IAEF,GAAG,CAAC,GAAG,CACL,WAAW,CAAC,iBAAiB,CAAC,EAC9B,4BAAgB,CAAC,WAAW,EAAE,CAAC,mBAAmB,CAAC;QACjD,GAAG,EAAE,EAAE;QACP,QAAQ,EAAE,EAAE,GAAG,IAAI,EAAE,WAAW;QAChC,OAAO,EAAE,4CAA4C;KACtD,CAAC,EACF,+BAAY,EACZ,KAAK,EAAE,IAAa,EAAE,GAAa,EAAE,EAAE;QACrC,MAAM,aAAa,GAAG,MAAM,WAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YACvD,KAAK,EAAE;gBACL,SAAS,EAAE;oBACT,GAAG,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;iBAC3C;aACF;YACD,OAAO,EAAE;gBACP,SAAS,EAAE,MAAM;aAClB;YACD,IAAI,EAAE,GAAG;SACV,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;IACL,CAAC,CACF,CAAC;AACJ,CAAC,CAAC","debug_id":"bfbbb314-0879-5db0-aea6-59719be8ce2f"}
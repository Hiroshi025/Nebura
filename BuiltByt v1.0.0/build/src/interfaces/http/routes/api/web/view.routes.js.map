{"version":3,"file":"view.routes.js","sources":["src/interfaces/http/routes/api/web/view.routes.ts"],"sourceRoot":"/","sourcesContent":["/**\r\n * @fileoverview\r\n * This file defines the main web view routes for the Nebura Dashboard.\r\n * All endpoints are prefixed with `/dashboard/` and render EJS views.\r\n *\r\n * @module view.routes\r\n * @see {@link https://expressjs.com/en/4x/api.html#app Express Application API}\r\n */\r\n\r\nimport axios from \"axios\";\r\nimport { Request, Response } from \"express\";\r\nimport { statSync } from \"node:fs\";\r\nimport { join } from \"node:path\";\r\n\r\nimport { AuthPublic, Maintenance } from \"@/interfaces/http/middlewares/web/auth.middleware\";\r\nimport { client, main } from \"@/main\";\r\nimport { hostURL } from \"@/shared/functions\";\r\nimport { TRoutesInput, User } from \"@/typings/utils\";\r\nimport { config } from \"@utils/config\";\r\nimport { WinstonLogger } from \"@utils/winston\";\r\n\r\n/**\r\n * Formats the route path with the `/dashboard/` prefix.\r\n * @param path - Specific endpoint path.\r\n * @returns The formatted route path.\r\n */\r\nconst formatRoute = (path: string): string => `/dashboard/${path}`;\r\n\r\n/**\r\n * Registers all Nebura Dashboard web view routes.\r\n *\r\n * @param app - Express application instance.\r\n * @see {@link https://expressjs.com/en/4x/api.html#app Express Application API}\r\n */\r\nexport default ({ app }: TRoutesInput) => {\r\n  /**\r\n   * GET /dashboard/cdn\r\n   *\r\n   * Renders the CDN page.\r\n   * Requires authentication and not in maintenance mode.\r\n   *\r\n   * @middleware AuthPublic\r\n   * @middleware Maintenance\r\n   * @route GET /dashboard/cdn\r\n   * @returns {View} cdn.ejs\r\n   */\r\n  app.get(formatRoute(\"cdn\"), AuthPublic, Maintenance, (req: Request, res: Response) => {\r\n    return res.render(\"cdn.ejs\", {\r\n      title: config.project.name + \" - CDN\",\r\n      user: req.user,\r\n      cdnUrl: hostURL(),\r\n      sharedFile: null,\r\n    });\r\n  });\r\n\r\n  /**\r\n   * GET /dashboard/cdn/share\r\n   *\r\n   * Renders the shared file view for CDN.\r\n   * Expects query parameters: title, url, mime, size, date, description.\r\n   *\r\n   * @route GET /dashboard/cdn/share\r\n   * @returns {View} cdn-share.ejs\r\n   */\r\n  app.get(formatRoute(\"cdn/share\"), (req: Request, res: Response) => {\r\n    // Lee los parámetros de la URL\r\n    const { title, url, mime, size, date, description } = req.query;\r\n\r\n    // Si faltan datos mínimos, puedes mostrar un error o una vista genérica\r\n    if (!title || !url || !mime) {\r\n      return res.render(\"error.ejs\", {\r\n        title: config.project.name + \" - Share\",\r\n        user: req.user,\r\n      });\r\n    }\r\n\r\n    // Pasa los datos del archivo compartido a la vista\r\n    res.render(\"cdn-share.ejs\", {\r\n      title: config.project.name + \" - Share\",\r\n      user: req.user,\r\n      sharedFile: {\r\n        title: decodeURIComponent(title as string),\r\n        downloadUrl: decodeURIComponent(url as string),\r\n        mimeType: decodeURIComponent(mime as string),\r\n        size: size ? Number(size) : 0,\r\n        uploadedAt: date ? decodeURIComponent(date as string) : \"\",\r\n        description: description ? decodeURIComponent(description as string) : \"\",\r\n        shareUrl: req.protocol + \"://\" + req.get(\"host\") + req.originalUrl,\r\n      },\r\n    });\r\n  });\r\n\r\n  /**\r\n   * GET /dashboard/logout\r\n   *\r\n   * Renders an error page for logout (not implemented).\r\n   *\r\n   * @route GET /dashboard/logout\r\n   * @returns {View} error.ejs\r\n   */\r\n  app.get(formatRoute(\"logout\"), (_req: Request, res: Response) => {\r\n    return res.status(500).render(\"error.ejs\", { title: config.project.name + \" - Error\" });\r\n  });\r\n\r\n  /**\r\n   * GET /dashboard/\r\n   *\r\n   * Renders the main dashboard page.\r\n   * Requires authentication and not in maintenance mode.\r\n   * Fetches user, license, file, and ticket data for the logged-in user.\r\n   *\r\n   * @middleware AuthPublic\r\n   * @middleware Maintenance\r\n   * @route GET /dashboard/\r\n   * @returns {View} dashboard.ejs\r\n   */\r\n  app.get(formatRoute(\"\"), AuthPublic, Maintenance, async (req: Request, res: Response) => {\r\n    /*     const logger = await new WinstonLogger();\r\n    const recentLogger = await logger.getRecentLogs(3); */\r\n    const data = await main.prisma.userAPI.findMany();\r\n    const userData = data.find((user) => user.discord?.userId === (req.user as User).id);\r\n\r\n    const licenseData = await main.prisma.license.findMany({\r\n      where: { userId: (req.user as User).id },\r\n    });\r\n\r\n    const fileData = await main.prisma.fileMetadata.findMany({\r\n      where: { userId: (req.user as User).id },\r\n    });\r\n\r\n    const ticketData = await main.prisma.ticketUser.findMany({\r\n      where: { userId: (req.user as User).id },\r\n      orderBy: { createdAt: \"desc\" },\r\n      take: 5,\r\n    });\r\n\r\n    // del array de datos de fileData remueve el parametro path de cada uno\r\n    const fileDataFilter = fileData.map(({ path, ...rest }) => rest);\r\n\r\n    return res.render(\"dashboard.ejs\", {\r\n      title: config.project.name + \" - Dashboard\",\r\n      user: req.user,\r\n      userAPI: userData || null,\r\n      fileData: fileDataFilter || null,\r\n      ticketData: ticketData || null,\r\n      licenseData: licenseData || null,\r\n      //recentLogs: recentLogger,\r\n    });\r\n  });\r\n\r\n  /**\r\n   * GET /dashboard/administrator\r\n   *\r\n   * Renders the administrator dashboard.\r\n   * Only accessible to users with \"owner\" or \"developer\" roles.\r\n   * Requires query parameter: id (user ID).\r\n   *\r\n   * @middleware AuthPublic\r\n   * @route GET /dashboard/administrator?id={userId}\r\n   * @returns {View} administrator.ejs\r\n   */\r\n  app.get(formatRoute(\"administrator\"), AuthPublic, async (req: Request, res: Response) => {\r\n    //la redireccion a este endpoint lo hace con '/dashboard/administrator?id=' + data.user.id;\r\n    const userId = req.query.id as string;\r\n    if (!userId) {\r\n      return res.status(400).render(\"error.ejs\", {\r\n        title: config.project.name + \" - Bad Request\",\r\n        user: req.user,\r\n        error: \"User ID is required\",\r\n      });\r\n    }\r\n\r\n    const allowedRole = [\"owner\", \"developer\"];\r\n    const data = await main.prisma.userAPI.findUnique({\r\n      where: { id: userId },\r\n    });\r\n\r\n    if (!data || !allowedRole.includes(data.role)) {\r\n      return res.status(403).render(\"error.ejs\", {\r\n        title: config.project.name + \" - Access Denied\",\r\n        user: req.user,\r\n        error: \"You do not have permission to access this page\",\r\n      });\r\n    }\r\n\r\n    const logger = await new WinstonLogger();\r\n    const recentLogger = await logger.getRecentLogs(5);\r\n\r\n    const usersMap: { [key: string]: string } = {};\r\n    client.users.cache.forEach((user) => {\r\n      usersMap[user.id] = user.username; // o user.tag si quieres el tag completo\r\n    });\r\n\r\n    return res.render(\"administrator.ejs\", {\r\n      title: config.project.name + \" - Administrator\",\r\n      user: req.user,\r\n      usersMap,\r\n      metrics: await main.prisma.metrics.findMany(),\r\n      users: await main.prisma.userAPI.findMany(),\r\n      licenses: await main.prisma.license.findMany(),\r\n      myclientDiscord: await main.prisma.client.findMany(),\r\n      userIdFromUrl: req.query.id,\r\n      recentLogs: recentLogger,\r\n    });\r\n  });\r\n\r\n  /**\r\n   * GET /dashboard/agent\r\n   *\r\n   * Renders the Gemini Agent page.\r\n   * Requires authentication and not in maintenance mode.\r\n   *\r\n   * @middleware AuthPublic\r\n   * @middleware Maintenance\r\n   * @route GET /dashboard/agent\r\n   * @returns {View} agent.ejs\r\n   */\r\n  app.get(formatRoute(\"agent\"), AuthPublic, Maintenance, (req: Request, res: Response) => {\r\n    return res.render(\"agent.ejs\", {\r\n      title: config.project.name + \" - Gemini\",\r\n      user: req.user,\r\n      customer_key: process.env.CUSTOMER_SECRET as string,\r\n    });\r\n  });\r\n\r\n  /**\r\n   * GET /dashboard/logs/view/:name\r\n   *\r\n   * Renders a log file viewer for administrators.\r\n   * Only accessible to users with \"owner\" or \"developer\" roles.\r\n   * Requires query parameter: id (user ID).\r\n   *\r\n   * @middleware AuthPublic\r\n   * @middleware Maintenance\r\n   * @route GET /dashboard/logs/view/:name?id={userId}\r\n   * @returns {View} logs-view.ejs\r\n   */\r\n  app.get(\r\n    formatRoute(\"logs/view/:name\"),\r\n    AuthPublic,\r\n    Maintenance,\r\n    async (req: Request, res: Response) => {\r\n      const userId = req.query.id as string;\r\n      if (!userId || !/^[a-fA-F0-9]{24}$/.test(userId)) {\r\n        return res.status(400).render(\"error.ejs\", {\r\n          title: config.project.name + \" - Bad Request\",\r\n          user: req.user,\r\n          error: \"User ID is malformed or missing\",\r\n        });\r\n      }\r\n\r\n      const allowedRole = [\"owner\", \"developer\"];\r\n      const data = await main.prisma.userAPI.findUnique({\r\n        where: { id: userId },\r\n      });\r\n\r\n      if (!data || !allowedRole.includes(data.role)) {\r\n        return res.status(403).render(\"error.ejs\", {\r\n          title: config.project.name + \" - Access Denied\",\r\n          user: req.user,\r\n          error: \"You do not have permission to access this page\",\r\n        });\r\n      }\r\n\r\n      const winston = new WinstonLogger();\r\n      const pathDir = join(winston.logDir, req.params.name);\r\n\r\n      const response = await axios({\r\n        url: `${hostURL()}/dashboard/utils/logs/${req.params.name}`,\r\n        method: \"GET\",\r\n      });\r\n\r\n      if (response.status !== 200) {\r\n        return res.status(500).render(\"error.ejs\", {\r\n          title: config.project.name + \" - Error\",\r\n          user: req.user,\r\n          error: \"Failed to retrieve log file\",\r\n        });\r\n      }\r\n\r\n      const logLines = response.data;\r\n      return res.render(\"logs-view.ejs\", {\r\n        logFile: pathDir,\r\n        logLines: logLines,\r\n        title: config.project.name + \" - Logs Viewer\",\r\n        user: req.user,\r\n        logName: req.params.name,\r\n        logSize: await statSync(pathDir).size,\r\n        logDate: new Date().toLocaleDateString(),\r\n        maxLogAgeDays: winston.maxLogAgeDays,\r\n      });\r\n    },\r\n  );\r\n\r\n  /**\r\n   * GET /dashboard/support\r\n   *\r\n   * Renders the support page.\r\n   * Requires authentication and not in maintenance mode.\r\n   *\r\n   * @middleware AuthPublic\r\n   * @middleware Maintenance\r\n   * @route GET /dashboard/support\r\n   * @returns {View} support.ejs\r\n   */\r\n  app.get(formatRoute(\"support\"), AuthPublic, Maintenance, async (req: Request, res: Response) => {\r\n    return res.render(\"support.ejs\", {\r\n      title: config.project.name + \" - Support\",\r\n      webURL: hostURL(),\r\n      user: req.user,\r\n    });\r\n  });\r\n\r\n  /**\r\n   * GET /dashboard/maintenance\r\n   *\r\n   * Renders the maintenance page.\r\n   * Requires authentication and not in maintenance mode.\r\n   *\r\n   * @middleware AuthPublic\r\n   * @middleware Maintenance\r\n   * @route GET /dashboard/maintenance\r\n   * @returns {View} maintenance.ejs\r\n   */\r\n  app.get(\r\n    formatRoute(\"maintenance\"),\r\n    AuthPublic,\r\n    Maintenance,\r\n    async (req: Request, res: Response) => {\r\n      return res.render(\"maintenance.ejs\", {\r\n        title: config.project.name + \" - Maintenance\",\r\n        user: req.user,\r\n      });\r\n    },\r\n  );\r\n\r\n  /**\r\n   * GET /dashboard/administrator/tickets\r\n   *\r\n   * Renders the tickets administration page.\r\n   * Only accessible to users with \"owner\" or \"developer\" roles.\r\n   * Requires query parameter: id (user ID).\r\n   *\r\n   * @middleware AuthPublic\r\n   * @middleware Maintenance\r\n   * @route GET /dashboard/administrator/tickets?id={userId}\r\n   * @returns {View} tickets.ejs\r\n   */\r\n  app.get(\r\n    formatRoute(\"administrator/tickets\"),\r\n    AuthPublic,\r\n    Maintenance,\r\n    async (req: Request, res: Response) => {\r\n      const userId = req.query.id as string;\r\n      if (!userId) {\r\n        return res.status(400).render(\"error.ejs\", {\r\n          title: config.project.name + \" - Bad Request\",\r\n          user: req.user,\r\n          error: \"User ID is required\",\r\n        });\r\n      }\r\n\r\n      const allowedRole = [\"owner\", \"developer\"];\r\n      const data = await main.prisma.userAPI.findUnique({\r\n        where: { id: userId },\r\n      });\r\n\r\n      if (!data || !allowedRole.includes(data.role)) {\r\n        return res.status(403).render(\"error.ejs\", {\r\n          title: config.project.name + \" - Access Denied\",\r\n          user: req.user,\r\n          error: \"You do not have permission to access this page\",\r\n        });\r\n      }\r\n\r\n      return res.render(\"tickets.ejs\", {\r\n        transcripts: await main.prisma.transcript.findMany(),\r\n        tickets: await main.prisma.ticketUser.findMany(),\r\n        title: config.project.name + \" - Tickets\",\r\n        webURL: hostURL(),\r\n        user: req.user,\r\n      });\r\n    },\r\n  );\r\n\r\n  app.get(\r\n    formatRoute(\"discord/server\"),\r\n    AuthPublic,\r\n    Maintenance,\r\n    async (req: Request, res: Response) => {\r\n      const serverId = req.query.id as string;\r\n      const servers = (req.user as any).guilds;\r\n\r\n      if (!serverId || !servers.some((server: { id: string }) => server.id === serverId)) {\r\n        return res.status(400).render(\"error.ejs\", {\r\n          title: config.project.name + \" - Bad Request\",\r\n          user: req.user,\r\n          error: \"Server ID is required or not found in your guilds\",\r\n        });\r\n      }\r\n\r\n      //comprobar si el servidor el user es owner\r\n      if (\r\n        !servers.some(\r\n          (server: { id: string; owner: boolean }) => server.id === serverId && server.owner,\r\n        )\r\n      ) {\r\n        return res.status(403).render(\"error.ejs\", {\r\n          title: config.project.name + \" - Access Denied\",\r\n          user: req.user,\r\n          error: \"You do not have permission to access this server\",\r\n        });\r\n      }\r\n\r\n      // Datos del servidor\r\n      const data = await main.prisma.myGuild.findFirst({\r\n        where: { guildId: serverId },\r\n      });\r\n\r\n      // Comandos más usados\r\n      const commandUsage = data?.commandUsage || {};\r\n      const topCommands = Object.entries(commandUsage)\r\n        .sort((a: any, b: any) => b[1] - a[1])\r\n        .slice(0, 10)\r\n        .map(([name, count]) => ({ name, count }));\r\n\r\n      // Canales más usados\r\n      const channelActivity = data?.channelActivity || {};\r\n      const topChannels = Object.entries(channelActivity)\r\n        .sort((a: any, b: any) => b[1] - a[1])\r\n        .slice(0, 10)\r\n        .map(([id, count]) => ({ id, count }));\r\n\r\n      // Obtener nombres reales de canales usando la caché del cliente de Discord\r\n      let channelsMap: { [id: string]: string } = {};\r\n      try {\r\n        const guild = client.guilds.cache.get(serverId);\r\n        if (guild) {\r\n          guild.channels.cache.forEach((ch: any) => {\r\n            if (ch.type === 0 || ch.type === \"GUILD_TEXT\") {\r\n              // type 0 = text en discord.js v14\r\n              channelsMap[ch.id] = ch.name;\r\n            }\r\n          });\r\n        }\r\n      } catch (e) {\r\n        // fallback: dejar ids si no hay acceso\r\n      }\r\n\r\n      // Estadísticas generales\r\n      // Miembros destacados y total\r\n      const userLevels = await main.prisma.userLevel.findMany({\r\n        where: { guildId: serverId },\r\n        orderBy: { level: \"desc\" },\r\n        take: 10,\r\n      });\r\n      const totalMembers = await main.prisma.userLevel.count({ where: { guildId: serverId } });\r\n      const totalMessages = await main.prisma.userLevel.aggregate({\r\n        where: { guildId: serverId },\r\n        _sum: { totalMessages: true },\r\n      });\r\n      // Economía\r\n      const totalEconomy = await main.prisma.userEconomy.aggregate({\r\n        where: { guildId: serverId },\r\n        _sum: { balance: true },\r\n      });\r\n      // Niveles\r\n      const avgLevel = await main.prisma.userLevel.aggregate({\r\n        where: { guildId: serverId },\r\n        _avg: { level: true },\r\n      });\r\n\r\n      // Datos de configuración\r\n      const dataModLog = await main.prisma.serverModlog.findFirst({\r\n        where: { guildId: serverId },\r\n      });\r\n      const dataLevelConfig = await main.prisma.levelConfig.findFirst({\r\n        where: { guildId: serverId },\r\n      });\r\n\r\n      // Obtener usuarios destacados reales (si tienes acceso a Discord)\r\n      let usersMap: { [id: string]: { username: string; avatar: string } } = {};\r\n      try {\r\n        const guild = client.guilds.cache.get(serverId);\r\n        if (guild) {\r\n          for (const u of userLevels) {\r\n            const member = guild.members.cache.get(u.userId);\r\n            if (member) {\r\n              usersMap[u.userId] = {\r\n                username: member.user.tag,\r\n                avatar: member.user.displayAvatarURL({ extension: \"png\", size: 64 }),\r\n              };\r\n            }\r\n          }\r\n        }\r\n      } catch (e) {\r\n        // fallback: dejar vacío\r\n      }\r\n\r\n      const serverData = {\r\n        id: serverId,\r\n        name:\r\n          servers.find((server: { id: string }) => server.id === serverId)?.name ||\r\n          \"Unknown Server\",\r\n        icon: servers.find((server: { id: string }) => server.id === serverId)?.icon || null,\r\n        levelConfig: dataLevelConfig || null,\r\n        modLog: dataModLog || null,\r\n        data: data || null,\r\n      };\r\n\r\n      return res.render(\"server.ejs\", {\r\n        server: servers.find((server: { id: string }) => server.id === serverId),\r\n        title: config.project.name + ` - ${serverData.name}`,\r\n        serverData: serverData,\r\n        user: req.user,\r\n        // Datos agregados:\r\n        topCommands,\r\n        topChannels,\r\n        userLevels,\r\n        totalMembers,\r\n        totalMessages: totalMessages._sum.totalMessages || 0,\r\n        totalEconomy: totalEconomy._sum.balance || 0,\r\n        avgLevel: avgLevel._avg.level || 0,\r\n        channelsMap,\r\n        usersMap,\r\n      });\r\n    },\r\n  );\r\n};\r\n"],"names":[],"mappings":"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","debug_id":"fb557621-a652-5ff0-b86f-bc580dcd97af"}
{"version":3,"file":"utils.routes.js","sources":["src/interfaces/http/routes/api/web/utils.routes.ts"],"sourceRoot":"/","sourcesContent":["import bcrypt from \"bcryptjs\";\r\n/**\r\n * Express types for request and response.\r\n */\r\nimport { Request, Response } from \"express\";\r\nimport fs, { statSync } from \"fs\";\r\nimport { readdir, readFile } from \"fs/promises\";\r\nimport multer from \"multer\";\r\nimport path, { join, resolve } from \"path\";\r\nimport PDFDocument from \"pdfkit\";\r\nimport stream from \"stream\";\r\n\r\nimport { AuthService } from \"@/application/services/auth/auth.service\";\r\nimport { SecurityController } from \"@/interfaces/http/controllers/admin/devs.controllers\";\r\nimport { ReminderController } from \"@/interfaces/http/controllers/asistent/reminder.controllers\";\r\nimport { TaskController } from \"@/interfaces/http/controllers/asistent/tasks.controllers\";\r\nimport { LicenseController } from \"@/interfaces/http/controllers/license/license.controllers\";\r\nimport { Notification } from \"@/interfaces/messaging/broker/notification\";\r\nimport { main } from \"@/main\";\r\nimport { TRoutesInput } from \"@/typings/utils\";\r\nimport { config } from \"@utils/config\";\r\nimport { verified } from \"@utils/token\";\r\nimport { WinstonLogger } from \"@utils/winston\";\r\n\r\n/**\r\n * Multer storage configuration for file uploads.\r\n * Files are stored in a directory based on the current date and userId.\r\n */\r\nconst storage = multer.diskStorage({\r\n  destination: (req, _file, cb) => {\r\n    // Prefer req.query.userId because req.body is not available here\r\n    const userId = req.query.userId || \"unknown\";\r\n    const date = new Date().toISOString().split(\"T\")[0];\r\n    const uploadPath = path.join(\r\n      __dirname,\r\n      config.project.cdnpath ? config.project.cdnpath : \"../../../../../../config/backups/cdn-client\",\r\n      `${date}_${userId}`,\r\n    );\r\n    if (!fs.existsSync(uploadPath)) {\r\n      fs.mkdirSync(uploadPath, { recursive: true });\r\n    }\r\n    cb(null, uploadPath);\r\n  },\r\n  filename: (_req, file, cb) => {\r\n    const uniqueSuffix = `${Date.now()}-${Math.round(Math.random() * 1e9)}`;\r\n    const ext = path.extname(file.originalname);\r\n    cb(null, `${file.fieldname}-${uniqueSuffix}${ext}`);\r\n  },\r\n});\r\n\r\n/**\r\n * Multer middleware for handling file uploads.\r\n * Limits file size to 100MB.\r\n */\r\nconst upload = multer({\r\n  storage: storage,\r\n  limits: {\r\n    fileSize: 100 * 1024 * 1024, // 100MB limit\r\n  },\r\n});\r\n\r\n/**\r\n * Formats authentication routes with the correct prefix.\r\n * @param path - Specific endpoint path.\r\n * @returns The formatted full route.\r\n */\r\nconst formatRoute = (path: string): string => `/dashboard/utils/${path}`;\r\n\r\n/**\r\n * Registers all utility routes for the web API.\r\n * @param app - Express application instance.\r\n */\r\nexport default ({ app }: TRoutesInput) => {\r\n  const taskController = new TaskController();\r\n  const reminderController = new ReminderController();\r\n  const controller = new LicenseController();\r\n  const security = new SecurityController();\r\n\r\n  /**\r\n   * Creates a new license.\r\n   * Requires authentication and admin role.\r\n   * @route POST /dashboard/utils/licenses/\r\n   */\r\n  app.post(formatRoute(\"licenses/\"), controller.create.bind(controller));\r\n\r\n  /**\r\n   * Updates an existing license by ID.\r\n   * Requires authentication and admin role.\r\n   * @route PUT /dashboard/utils/licenses/:id\r\n   */\r\n  app.put(formatRoute(\"licenses/:id\"), controller.update.bind(controller));\r\n\r\n  /**\r\n   * Deletes an existing license by ID.\r\n   * Requires authentication and admin role.\r\n   * @route DELETE /dashboard/utils/licenses/:id\r\n   */\r\n  app.delete(formatRoute(\"licenses/:id\"), controller.delete.bind(controller));\r\n\r\n  /**\r\n   * Endpoint to get all licenses.\r\n   * Requires authentication and admin role.\r\n   * @route GET /dashboard/utils/licenses/\r\n   */\r\n  app.get(formatRoute(\"licenses/\"), controller.getAll.bind(controller));\r\n\r\n  /**\r\n   * Endpoint to get a specific license by ID.\r\n   * Requires authentication.\r\n   * @route GET /dashboard/utils/licenses/:id\r\n   */\r\n  app.get(formatRoute(\"licenses/:id\"), controller.getById.bind(controller));\r\n\r\n  /**\r\n   * Endpoint to get all licenses associated with a specific user.\r\n   * Requires authentication.\r\n   * @route GET /dashboard/utils/licenses/user/:userId\r\n   */\r\n  app.get(formatRoute(\"licenses/user/:userId\"), controller.getByUser.bind(controller));\r\n\r\n  /**\r\n   * Public endpoint to validate a license by its key.\r\n   * Does not require authentication.\r\n   * @route POST /dashboard/utils/licenses/validate/:key\r\n   */\r\n  app.post(formatRoute(\"licenses/validate/:key\"), controller.validate.bind(controller));\r\n\r\n  /**\r\n   * Gets information about a specific license.\r\n   * @route GET /dashboard/utils/licenses/info/:licenseKey\r\n   * @param licenseKey - The key of the license to retrieve information for.\r\n   * @returns {Object} JSON response with license information.\r\n   */\r\n  app.get(formatRoute(\"licenses/info/:licenseKey\"), security.getLicenseInfo);\r\n\r\n  /**\r\n   * Creates a new task.\r\n   * Requires authentication.\r\n   * @route POST /dashboard/utils/tasks\r\n   */\r\n  app.post(formatRoute(\"tasks\"), taskController.createTask.bind(taskController));\r\n\r\n  /**\r\n   * Gets a specific task by ID.\r\n   * Requires authentication.\r\n   * @route GET /dashboard/utils/tasks/:id\r\n   */\r\n  app.get(formatRoute(\"tasks/:id\"), taskController.getTask.bind(taskController));\r\n\r\n  /**\r\n   * Gets all tasks.\r\n   * Requires authentication.\r\n   * @route GET /dashboard/utils/tasks\r\n   */\r\n  app.get(formatRoute(\"tasks\"), taskController.getAllTasks.bind(taskController));\r\n\r\n  /**\r\n   * Updates a specific task by ID.\r\n   * Requires authentication.\r\n   * @route PATCH /dashboard/utils/tasks/:id\r\n   */\r\n  app.patch(formatRoute(\"tasks/:id\"), taskController.updateTask.bind(taskController));\r\n\r\n  /**\r\n   * Deletes a specific task by ID.\r\n   * Requires authentication.\r\n   * @route DELETE /dashboard/utils/tasks/:id\r\n   */\r\n  app.delete(formatRoute(\"tasks/:id\"), taskController.deleteTask.bind(taskController));\r\n\r\n  /**\r\n   * Gets upcoming reminders.\r\n   * Requires authentication.\r\n   * @route GET /dashboard/utils/reminders\r\n   */\r\n  app.get(\"reminders\", reminderController.getUpReminders.bind(reminderController));\r\n\r\n  /**\r\n   * Endpoint for file upload.\r\n   * @route POST /dashboard/utils/cdn\r\n   * @param req.body.userId - The ID of the user uploading the file.\r\n   * @param req.body.title - The title of the file.\r\n   * @param req.file - The file to be uploaded.\r\n   * @returns {Object} JSON response with upload status and file metadata.\r\n   */\r\n  app.post(formatRoute(\"cdn\"), upload.single(\"file\"), async (req: Request, res: Response) => {\r\n    try {\r\n      // Check if a file was uploaded\r\n      if (!req.file) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"No file uploaded\",\r\n        });\r\n      }\r\n\r\n      // Check for required fields\r\n      if (!req.body.userId || !req.body.title) {\r\n        // Remove the uploaded file if required fields are missing\r\n        fs.unlinkSync(req.file.path);\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"userId and title are required fields\",\r\n        });\r\n      }\r\n\r\n      // File metadata\r\n      const fileMetadata = {\r\n        userId: req.body.userId,\r\n        originalName: req.file.originalname,\r\n        fileName: req.file.filename,\r\n        title: req.body.title,\r\n        description: req.body.description || \"\",\r\n        uploadedAt: new Date().toISOString(),\r\n        uploadedBy: req.body.userId,\r\n        path: req.file.path,\r\n        size: req.file.size,\r\n        mimeType: req.file.mimetype,\r\n        downloadUrl: `/dashboard/utils/cdn/download/${req.body.userId}/${req.file.filename}`,\r\n      };\r\n\r\n      await main.prisma.fileMetadata.create({\r\n        data: {\r\n          userId: fileMetadata.userId,\r\n          originalName: fileMetadata.originalName,\r\n          fileName: fileMetadata.fileName,\r\n          title: fileMetadata.title,\r\n          description: fileMetadata.description,\r\n          uploadedAt: new Date(fileMetadata.uploadedAt),\r\n          uploadedBy: fileMetadata.uploadedBy,\r\n          path: fileMetadata.path,\r\n          size: fileMetadata.size,\r\n          mimeType: fileMetadata.mimeType,\r\n          downloadUrl: fileMetadata.downloadUrl,\r\n        },\r\n      });\r\n\r\n      return res.status(201).json({\r\n        success: true,\r\n        message: \"File uploaded successfully\",\r\n        data: fileMetadata,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error uploading file:\", error);\r\n\r\n      // Delete the file if there was an error\r\n      if (req.file && fs.existsSync(req.file.path)) {\r\n        fs.unlinkSync(req.file.path);\r\n      }\r\n\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Endpoint to download a file.\r\n   * @route GET /dashboard/utils/cdn/download/:userId/:fileName\r\n   * @param userId - The ID of the user who owns the file.\r\n   * @param fileName - The name of the file to download.\r\n   */\r\n  app.get(formatRoute(\"cdn/download/:userId/:fileName\"), async (req: Request, res: Response) => {\r\n    const { userId, fileName } = req.params;\r\n\r\n    try {\r\n      // Check if the user and file exist\r\n      const fileMetadata = await main.prisma.fileMetadata.findFirst({\r\n        where: {\r\n          userId: userId,\r\n          fileName: fileName,\r\n        },\r\n      });\r\n\r\n      if (!fileMetadata) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"File not found\",\r\n        });\r\n      }\r\n\r\n      // Send the file to the client\r\n      res.removeHeader(\"X-Frame-Options\");\r\n      res.download(fileMetadata.path, fileMetadata.originalName);\r\n    } catch (error: any) {\r\n      console.error(\"Error downloading file:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n    return;\r\n  });\r\n\r\n  /**\r\n   * Endpoint to get all files for a user.\r\n   * @route GET /dashboard/utils/cdn/:userId\r\n   * @param userId - The ID of the user whose files to retrieve.\r\n   * @returns {Object} JSON response with file metadata.\r\n   */\r\n  app.get(formatRoute(\"cdn/:userId\"), async (req: Request, res: Response) => {\r\n    const { userId } = req.params;\r\n\r\n    try {\r\n      // Get all files for the user\r\n      const files = await main.prisma.fileMetadata.findMany({\r\n        where: {\r\n          userId: userId,\r\n        },\r\n      });\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: files,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error fetching files:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Endpoint to delete a file.\r\n   * @route DELETE /dashboard/utils/cdn/:userId/:fileName\r\n   * @param userId - The ID of the user who owns the file.\r\n   * @param fileName - The name of the file to delete.\r\n   * @returns {Object} JSON response with delete status.\r\n   */\r\n  app.delete(formatRoute(\"cdn/:userId/:fileName\"), async (req: Request, res: Response) => {\r\n    const { userId, fileName } = req.params;\r\n\r\n    try {\r\n      // Check if the user and file exist\r\n      const fileMetadata = await main.prisma.fileMetadata.findFirst({\r\n        where: {\r\n          userId: userId,\r\n          fileName: fileName,\r\n        },\r\n      });\r\n\r\n      if (!fileMetadata) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"File not found\",\r\n        });\r\n      }\r\n\r\n      // Delete the file from the file system\r\n      if (fs.existsSync(fileMetadata.path)) {\r\n        fs.unlinkSync(fileMetadata.path);\r\n      }\r\n\r\n      // Delete the file metadata from the database\r\n      await main.prisma.fileMetadata.delete({\r\n        where: {\r\n          id: fileMetadata.id,\r\n        },\r\n      });\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: \"File deleted successfully\",\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error deleting file:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Endpoint to view a file.\r\n   * @route GET /dashboard/utils/cdn/view/:userId/:fileName\r\n   * @param userId - The ID of the user who owns the file.\r\n   * @param fileName - The name of the file to view.\r\n   * @returns {Object} JSON response with file content.\r\n   */\r\n  app.get(formatRoute(\"cdn/view/:userId/:fileName\"), async (req: Request, res: Response) => {\r\n    const { userId, fileName } = req.params;\r\n    console.log(req.params);\r\n\r\n    // Find file metadata\r\n    const fileMetadata = await main.prisma.fileMetadata.findFirst({\r\n      where: {\r\n        userId: userId,\r\n        fileName: fileName,\r\n      },\r\n    });\r\n\r\n    if (!fileMetadata) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"File not savee in the database\",\r\n      });\r\n    }\r\n\r\n    // Use the path saved in the database\r\n    const filePath = fileMetadata.path;\r\n\r\n    if (!fs.existsSync(filePath)) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"File not found path\",\r\n      });\r\n    }\r\n\r\n    res.type(fileMetadata.mimeType);\r\n    return res.sendFile(path.resolve(filePath), (err) => {\r\n      if (err) {\r\n        return res.status(500).json({\r\n          success: false,\r\n          message: \"Error sending file\",\r\n          error: err.message,\r\n        });\r\n      }\r\n\r\n      return;\r\n    });\r\n  });\r\n\r\n  /*   app.get(formatRoute(\"cdn/share\"), async (req: Request, res: Response) => {\r\n    const { fileId, expiresAt, maxDownloads, password } = req.body;\r\n    const url = hostURL() + `/dashboard/cdn/share/${fileId}`;\r\n    const link = await main.prisma.sharedLinkCDN.create({\r\n      data: {\r\n        fileId,\r\n        url,\r\n        expiresAt: expiresAt ? new Date(expiresAt) : null,\r\n        maxDownloads: maxDownloads ? Number(maxDownloads) : null,\r\n        password: password ? password : null,\r\n      },\r\n    });\r\n    res.json({ success: true, url: link.url });\r\n  }); */\r\n\r\n  /**\r\n   * User registration endpoint.\r\n   * @route POST /dashboard/utils/auth/register\r\n   * @param req.body - User registration data.\r\n   * @returns {Object} JSON response with registration status and user data.\r\n   */\r\n  app.post(formatRoute(\"auth/register\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const auth = new AuthService();\r\n\r\n      const userData = req.body;\r\n      const result = await auth.createAuth(userData);\r\n\r\n      if (\"error\" in result) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          error: result.error,\r\n          message: \"Error creating user\",\r\n        });\r\n      }\r\n\r\n      // Find the newly created user to log in\r\n      const createdUser = await main.prisma.userAPI.findUnique({\r\n        where: { email: userData.email },\r\n      });\r\n\r\n      if (!createdUser) {\r\n        return res.status(500).json({ success: false, message: \"Error al obtener usuario creado\" });\r\n      }\r\n\r\n      req.login(createdUser, (err) => {\r\n        if (err) {\r\n          // Handle error\r\n          return res.status(500).json({ success: false, message: \"Error de sesión\" });\r\n        }\r\n        // User saved in session, same as with Discord\r\n        return res.json({ success: true, user: createdUser });\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        success: false,\r\n        error: \"SERVER_ERROR\",\r\n        message: req.t(\"errors.server_error\"),\r\n      });\r\n    }\r\n\r\n    return;\r\n  });\r\n\r\n  /**\r\n   * User login endpoint.\r\n   * @route POST /dashboard/utils/auth/login\r\n   * @param req.body.email - User email.\r\n   * @param req.body.password - User password.\r\n   * @returns {Object} JSON response with login status and user data.\r\n   */\r\n  app.post(formatRoute(\"auth/login\"), async (req: Request, res: Response) => {\r\n    const { email, password } = req.body;\r\n    try {\r\n      const user = await main.prisma.userAPI.findUnique({ where: { email } });\r\n      if (!user) {\r\n        return res.status(401).render(\"authme.ejs\", { title: \"Nebura\" });\r\n      }\r\n      const valid = await bcrypt.compare(password, user.password);\r\n      if (!valid) {\r\n        return res.status(401).render(\"authme.ejs\", { title: \"Nebura\" });\r\n      }\r\n      // Save user in session\r\n      req.login(user, (err) => {\r\n        if (err) return res.status(500).render(\"authme.ejs\", { title: \"Nebura\" });\r\n        return res.redirect(\"/dashboard\"); // Or wherever you want to redirect\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).render(\"authme.ejs\", { title: \"Nebura\" });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Admin registration endpoint.\r\n   * @route POST /dashboard/utils/admin/register\r\n   * @param req.body - Admin registration data.\r\n   * @returns {Object} JSON response with registration status and user data.\r\n   */\r\n  app.post(formatRoute(\"admin/register\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const allowedRoles = [\"admin\", \"developer\", \"owner\"];\r\n      const auth = new AuthService();\r\n\r\n      const userData = req.body;\r\n      const result = await auth.createAuth(userData);\r\n\r\n      if (\"error\" in result) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          error: result.error,\r\n          message: \"Error creating user\",\r\n        });\r\n      }\r\n\r\n      const dataUser = await main.prisma.userAPI.findUnique({\r\n        where: { email: userData.email },\r\n      });\r\n\r\n      if (!dataUser || !allowedRoles.includes(dataUser.role)) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"User not found or not authorized\",\r\n        });\r\n      }\r\n\r\n      // --- Notificación Discord ---\r\n      const notifier = new Notification();\r\n      await notifier.sendWebhookNotification(\r\n        \"New Admin Registration\",\r\n        `A new admin user has been registered.\\n\\n**Name:** ${dataUser.name}\\n**Email:** ${dataUser.email}\\n**Role:** ${dataUser.role}\\n**Date:** ${new Date().toISOString()}`,\r\n        \"#007bff\",\r\n        [{ name: \"User ID\", value: dataUser.id, inline: false }],\r\n        {\r\n          content: \"🛡️ New admin registration event\",\r\n          username: \"Admin Registration Bot\",\r\n        },\r\n      );\r\n\r\n      return res.status(201).json({ success: true, user: result });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        success: false,\r\n        error: \"SERVER_ERROR\",\r\n        message: \"An unexpected error occurred\",\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Admin login endpoint.\r\n   * @route POST /dashboard/utils/admin/login\r\n   * @param req.body.email - Admin email.\r\n   * @param req.body.password - Admin password.\r\n   * @returns {Object} JSON response with login status and user data.\r\n   */\r\n  app.post(formatRoute(\"admin/login\"), async (req: Request, res: Response) => {\r\n    const { email, password } = req.body;\r\n    try {\r\n      const user = await main.prisma.userAPI.findUnique({ where: { email } });\r\n      if (!user) {\r\n        return res.status(401).json({\r\n          success: false,\r\n          message: \"Invalid credentials\",\r\n        });\r\n      }\r\n      const valid = await verified(password, user.password);\r\n      if (!valid) {\r\n        return res.status(401).json({\r\n          success: false,\r\n          message: \"Invalid credentials\",\r\n        });\r\n      }\r\n\r\n      const allowedRoles = [\"admin\", \"developer\", \"owner\"];\r\n      if (!allowedRoles.includes(user.role)) {\r\n        return res.status(403).json({\r\n          success: false,\r\n          message: \"User not authorized\",\r\n        });\r\n      }\r\n\r\n      // Save user in session\r\n      return res.status(200).json({ success: true, user });\r\n    } catch (err: any) {\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"An unexpected error occurred\",\r\n        error: err.message || \"Internal server error\",\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Updates user information.\r\n   * Requires authentication.\r\n   * @route PUT /dashboard/utils/auth/update\r\n   * @param req.body.userId - The ID of the user to update.\r\n   * @param req.body.role - The new role for the user.\r\n   * @returns {Object} JSON response with update status and user data.\r\n   */\r\n  app.put(formatRoute(\"auth/update\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { userId, role } = req.body;\r\n\r\n      // Check if the user exists\r\n      const user = await main.prisma.userAPI.findUnique({\r\n        where: { id: userId },\r\n      });\r\n\r\n      if (!user) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"User not found\",\r\n        });\r\n      }\r\n\r\n      // Update the user\r\n      const updatedUser = await main.prisma.userAPI.update({\r\n        where: { id: userId },\r\n        data: {\r\n          role: role || user.role, // Keep the current role if no new role is provided\r\n          updatedAt: new Date(),\r\n        },\r\n      });\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: \"User updated successfully\",\r\n        data: updatedUser,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error updating user:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Gets log entries from a specified log file.\r\n   * @route GET /dashboard/utils/logs/:name\r\n   * @param name - The name of the log file to retrieve.\r\n   * @returns {Object} JSON response with log entries and metadata.\r\n   */\r\n  app.get(formatRoute(\"logs/:name\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const winston = new WinstonLogger();\r\n      const logName = req.params.name;\r\n      const logPath = resolve(__dirname, winston.logDir, logName);\r\n      const content = await readFile(logPath, \"utf8\");\r\n      // Each line is plain text, not JSON\r\n      const entries = content.split(\"\\n\").filter(Boolean);\r\n      res.status(200).json({\r\n        entries,\r\n        size: content.length,\r\n        lastModified: (await import(\"fs\")).statSync(logPath).mtime.toISOString(),\r\n      });\r\n    } catch (e) {\r\n      res.status(404).json({ error: \"Log no encontrado\" });\r\n    }\r\n  });\r\n\r\n  // Download log file\r\n  /**\r\n   * Downloads a specified log file.\r\n   * @route GET /dashboard/utils/logs/download/:name\r\n   * @param name - The name of the log file to download.\r\n   */\r\n  app.get(formatRoute(\"logs/download/:name\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const winston = new WinstonLogger();\r\n      const logName = req.params.name;\r\n      const logPath = resolve(__dirname, winston.logDir, logName);\r\n      if (!fs.existsSync(logPath)) {\r\n        return res.status(404).json({ error: \"Log no encontrado\" });\r\n      }\r\n      res.download(logPath, logName);\r\n    } catch (e) {\r\n      res.status(500).json({ error: \"Error al descargar el log\" });\r\n    }\r\n\r\n    return;\r\n  });\r\n\r\n  /**\r\n   * Creates a new ticket.\r\n   * @route POST /dashboard/utils/tickets\r\n   * @param req.body.userId - The ID of the user creating the ticket.\r\n   * @param req.body.guildId - The guild ID (for Discord systems).\r\n   * @param req.body.channelId - The channel ID (for Discord systems).\r\n   * @param req.body.reason - The reason for the ticket.\r\n   * @param req.body.userName - The name of the user (for ticket metadata).\r\n   * @param req.body.userAvatar - The avatar of the user (for ticket metadata).\r\n   * @returns {Object} JSON response with ticket creation status and ticket data.\r\n   */\r\n  app.post(formatRoute(\"tickets\"), async (req: Request, res: Response) => {\r\n    /*\r\n    model TicketUser {\r\n  id        String       @id @default(auto()) @map(\"_id\") @db.ObjectId\r\n  userId    String\r\n  guildId   String? //para los sistemas de discord\r\n  channelId String? //para los sistemas de discord\r\n  ticketId  String       @unique\r\n  messageId String? //para los sistemas de discord\r\n  status    TicketStatus @default(OPEN)\r\n  reason    String?\r\n  closedBy  String? // ID del usuario que cerró el ticket\r\n  closedAt  DateTime? // Fecha de cierre del ticket\r\n  notes     String[] @default([]) // Array de notas del ticket\r\n  attachments String[] @default([]) // Array de URLs de archivos adjuntos\r\n  userDiscordId String? // ID del usuario de Discord asociado al ticket\r\n  createdAt DateTime     @default(now())\r\n  updatedAt DateTime     @updatedAt\r\n\r\n  @@index([userId])\r\n}\r\n    * */\r\n    const { userId, guildId, channelId, reason, userName, userAvatar } = req.body;\r\n    if (!userId || !guildId || !channelId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"userId, guildId and channelId are required\",\r\n      });\r\n    }\r\n\r\n    const ticketId = `ticket-${Date.now()}-${Math.floor(Math.random() * 1e9)}`;\r\n    const newTicket = await main.prisma.ticketUser.create({\r\n      data: {\r\n        userId,\r\n        guildId,\r\n        channelId,\r\n        ticketId,\r\n        userName,\r\n        userAvatar,\r\n        reason: reason || null,\r\n        status: \"OPEN\",\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      },\r\n    });\r\n\r\n    // --- Notificación Discord ---\r\n    const notifier = new Notification();\r\n    await notifier.sendWebhookNotification(\r\n      \"New Ticket Created\",\r\n      `A new support ticket has been created.\\n\\n**User:** ${userName || userId}\\n**Ticket ID:** ${ticketId}\\n**Reason:** ${reason || \"No reason provided\"}\\n**Date:** ${new Date().toISOString()}`,\r\n      \"#28a745\",\r\n      [\r\n        { name: \"Guild ID\", value: guildId || \"N/A\", inline: true },\r\n        { name: \"Channel ID\", value: channelId || \"N/A\", inline: true },\r\n      ],\r\n      {\r\n        content: \"🎫 New ticket event\",\r\n        username: \"Ticket Bot\",\r\n      },\r\n    );\r\n\r\n    return res.status(201).json({\r\n      success: true,\r\n      message: \"Ticket created successfully\",\r\n      data: newTicket,\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Gets all tickets for a user.\r\n   * @route GET /dashboard/utils/tickets/:userId\r\n   * @param userId - The ID of the user whose tickets to retrieve.\r\n   * @returns {Object} JSON response with ticket data.\r\n   */\r\n  app.get(formatRoute(\"tickets/:userId\"), async (req: Request, res: Response) => {\r\n    const { userId } = req.params;\r\n    if (!userId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"userId is required\",\r\n      });\r\n    }\r\n\r\n    // Get pagination and search parameters\r\n    const page = parseInt(req.query.page as string) || 1;\r\n    const limit = parseInt(req.query.limit as string) || 10;\r\n    const filter = (req.query.filter as string) || \"\"; // For example: \"OPEN\", \"CLOSED\", etc.\r\n    const search = (req.query.search as string) || \"\";\r\n\r\n    // Build filter for Prisma\r\n    const where: any = { userId };\r\n    if (filter && filter !== \"all\") {\r\n      where.status = filter;\r\n    }\r\n    if (search) {\r\n      where.reason = { contains: search, mode: \"insensitive\" };\r\n    }\r\n\r\n    // Count total tickets for pagination\r\n    const total = await main.prisma.ticketUser.count();\r\n\r\n    // Get paginated tickets\r\n    const tickets = await main.prisma.ticketUser.findMany({\r\n      where,\r\n      orderBy: { createdAt: \"desc\" },\r\n      skip: (page - 1) * limit,\r\n      take: limit,\r\n    });\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      data: tickets,\r\n      total,\r\n      page,\r\n      limit,\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Gets a specific ticket by ID for a user.\r\n   * @route GET /dashboard/utils/tickets/:userId/:ticketId\r\n   * @param userId - The ID of the user who owns the ticket.\r\n   * @param ticketId - The ID of the ticket to retrieve.\r\n   * @returns {Object} JSON response with ticket data.\r\n   */\r\n  app.get(formatRoute(\"tickets/:userId/:ticketId\"), async (req: Request, res: Response) => {\r\n    const { userId, ticketId } = req.params;\r\n    if (!userId || !ticketId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"userId and ticketId are required\",\r\n      });\r\n    }\r\n\r\n    const ticket = await main.prisma.ticketUser.findFirst({\r\n      where: { userId, ticketId },\r\n    });\r\n\r\n    if (!ticket) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"Ticket not found\",\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      data: ticket,\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Updates a specific ticket by ID for a user.\r\n   * @route PUT /dashboard/utils/tickets/:userId/:ticketId\r\n   * @param userId - The ID of the user who owns the ticket.\r\n   * @param ticketId - The ID of the ticket to update.\r\n   * @param req.body.status - The new status for the ticket.\r\n   * @param req.body.reason - The new reason for the ticket.\r\n   * @returns {Object} JSON response with update status and ticket data.\r\n   */\r\n  app.put(formatRoute(\"tickets/:userId/:ticketId\"), async (req: Request, res: Response) => {\r\n    const { userId, ticketId } = req.params;\r\n    const { status, reason } = req.body;\r\n\r\n    if (!userId || !ticketId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"userId and ticketId are required\",\r\n      });\r\n    }\r\n\r\n    const ticket = await main.prisma.ticketUser.findFirst({\r\n      where: { userId, ticketId },\r\n    });\r\n\r\n    if (!ticket) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"Ticket not found\",\r\n      });\r\n    }\r\n\r\n    // Detect if the ticket is being closed\r\n    const isClosing = status === \"CLOSED\" && ticket.status !== \"CLOSED\";\r\n\r\n    const updatedTicket = await main.prisma.ticketUser.update({\r\n      where: { id: ticket.id },\r\n      data: {\r\n        status: status || ticket.status,\r\n        reason: reason || ticket.reason,\r\n        updatedAt: new Date(),\r\n        closedAt: isClosing ? new Date() : ticket.closedAt,\r\n      },\r\n    });\r\n\r\n    // NEW: If closed, generate and save transcript\r\n    if (isClosing) {\r\n      // Get ticket messages\r\n      const messages = await main.prisma.ticketMessage.findMany({\r\n        where: { ticketId: ticket.ticketId },\r\n        orderBy: { timestamp: \"asc\" },\r\n      });\r\n\r\n      // Unique participants (use IDs, not names)\r\n      const participants = [...new Set(messages.map((m) => m.senderId))];\r\n\r\n      await main.prisma.transcript.create({\r\n        data: {\r\n          type: \"ticket\",\r\n          referenceId: ticket.ticketId,\r\n          participants, // <-- now IDs\r\n          content: messages.map((m) => ({\r\n            senderId: m.senderId,\r\n            senderName: m.senderName,\r\n            senderAvatar: m.senderAvatar,\r\n            content: m.content,\r\n            timestamp: m.timestamp,\r\n          })),\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n        },\r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      data: updatedTicket,\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Sends a message in a ticket.\r\n   * @route POST /dashboard/utils/tickets/:userId/:ticketId/message\r\n   * @param userId - The ID of the user sending the message.\r\n   * @param ticketId - The ID of the ticket to send the message in.\r\n   * @param req.body.message - The content of the message.\r\n   * @returns {Object} JSON response with message status and message data.\r\n   */\r\n  app.post(formatRoute(\"tickets/:userId/:ticketId/message\"), async (req: Request, res: Response) => {\r\n    const { userId, ticketId } = req.params;\r\n    const { message } = req.body;\r\n\r\n    if (!userId || !ticketId || !message) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"userId, ticketId y message son requeridos\",\r\n      });\r\n    }\r\n\r\n    // Busca el ticket\r\n    const ticket = await main.prisma.ticketUser.findFirst({\r\n      where: { userId, ticketId },\r\n    });\r\n\r\n    if (!ticket) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"Ticket no encontrado\",\r\n      });\r\n    }\r\n\r\n    // NUEVO: No permitir mensajes si el ticket está cerrado\r\n    if (ticket.status === \"CLOSED\") {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: \"No se pueden enviar mensajes a un ticket cerrado\",\r\n      });\r\n    }\r\n\r\n    // Obtén datos del usuario (puedes mejorarlo según tu auth)\r\n    const senderId = userId;\r\n    const senderName = req.user?.name || \"Usuario\";\r\n    const senderAvatar = req.user?.avatar || null;\r\n\r\n    // Crea el mensaje\r\n    const newMessage = await main.prisma.ticketMessage.create({\r\n      data: {\r\n        ticketId: ticket.ticketId,\r\n        senderId,\r\n        senderName,\r\n        senderAvatar,\r\n        content: message,\r\n        timestamp: new Date(),\r\n      },\r\n    });\r\n\r\n    if (main.api.io) {\r\n      main.api.io.to(ticket.ticketId).emit(\"ticket:message\", {\r\n        ticketId: ticket.ticketId,\r\n        message: newMessage,\r\n      });\r\n    }\r\n\r\n    return res.status(201).json({\r\n      success: true,\r\n      message: newMessage,\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Gets all transcripts for a user.\r\n   * @route GET /dashboard/utils/transcripts\r\n   * @param req.query.userId - The ID of the user whose transcripts to retrieve.\r\n   * @param req.query.type - The type of transcripts to retrieve (e.g., \"ticket\", \"chat\", or \"all\").\r\n   * @param req.query.page - The page number for pagination.\r\n   * @param req.query.limit - The number of items per page.\r\n   * @returns {Object} JSON response with transcript data.\r\n   */\r\n  app.get(formatRoute(\"transcripts\"), async (req: Request, res: Response) => {\r\n    const userId = req.query.userId as string;\r\n    const type = req.query.type as string | undefined;\r\n    const page = Number(req.query.page) || 1;\r\n    const limit = Number(req.query.limit) || 10;\r\n\r\n    if (!userId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"userId is required\",\r\n      });\r\n    }\r\n\r\n    // Base filter: user must be a participant\r\n    const where: any = {\r\n      participants: { has: userId },\r\n    };\r\n\r\n    // Type filter (ticket/chat)\r\n    if (type && type !== \"all\") {\r\n      where.type = type;\r\n    }\r\n\r\n    // Total for pagination\r\n    const total = await main.prisma.transcript.count({ where });\r\n\r\n    // Pagination\r\n    const transcripts = await main.prisma.transcript.findMany({\r\n      where,\r\n      orderBy: { createdAt: \"desc\" },\r\n      skip: (page - 1) * limit,\r\n      take: limit,\r\n    });\r\n\r\n    // Format participants (you can enrich this if you have user info)\r\n    const data = transcripts.map((t) => ({\r\n      id: t.id,\r\n      type: t.type,\r\n      createdAt: t.createdAt,\r\n      participants: t.participants.map((name) => ({ name })), // Adjust if you have more info\r\n      content: undefined, // Content is not sent here\r\n    }));\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      data,\r\n      total,\r\n      page,\r\n      limit,\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Gets a specific transcript by ID.\r\n   * @route GET /dashboard/utils/transcripts/:transcriptId\r\n   * @param transcriptId - The ID of the transcript to retrieve.\r\n   * @returns {Object} JSON response with transcript data.\r\n   */\r\n  app.get(formatRoute(\"transcripts/:transcriptId\"), async (req: Request, res: Response) => {\r\n    const { transcriptId } = req.params;\r\n\r\n    if (!transcriptId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"transcriptId is required\",\r\n      });\r\n    }\r\n\r\n    // Validate transcriptId is a valid string (e.g., a 24-character ObjectId)\r\n    if (typeof transcriptId !== \"string\" || transcriptId.length !== 24) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"transcriptId inválido\",\r\n      });\r\n    }\r\n\r\n    const transcript = await main.prisma.transcript.findUnique({\r\n      where: { id: transcriptId },\r\n    });\r\n\r\n    if (!transcript) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"Transcript not found\",\r\n      });\r\n    }\r\n\r\n    // Calculate duration if timestamps are present in content\r\n    let duration = null;\r\n    if (\r\n      Array.isArray(transcript.content) &&\r\n      transcript.content.length > 1 &&\r\n      typeof transcript.content[0] === \"object\" &&\r\n      transcript.content[0] !== null &&\r\n      Object.prototype.hasOwnProperty.call(transcript.content[0], \"timestamp\") &&\r\n      typeof transcript.content[transcript.content.length - 1] === \"object\" &&\r\n      transcript.content[transcript.content.length - 1] !== null &&\r\n      Object.prototype.hasOwnProperty.call(transcript.content[transcript.content.length - 1], \"timestamp\")\r\n    ) {\r\n      const first = (transcript.content[0] as { timestamp: string | number }).timestamp;\r\n      const last = (transcript.content[transcript.content.length - 1] as { timestamp: string | number }).timestamp;\r\n      if (first && last) {\r\n        duration = new Date(last).getTime() - new Date(first).getTime();\r\n      }\r\n    }\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        id: transcript.id,\r\n        type: transcript.type,\r\n        createdAt: transcript.createdAt,\r\n        participants: transcript.participants.map((name: string) => ({ name })),\r\n        duration,\r\n        content: transcript.content,\r\n      },\r\n    });\r\n  });\r\n\r\n  /**\r\n   * Downloads a specific transcript as a PDF file.\r\n   * @route GET /dashboard/utils/transcripts/:transcriptId/download\r\n   * @param transcriptId - The ID of the transcript to download.\r\n   */\r\n  app.get(formatRoute(\"transcripts/:transcriptId/download\"), async (req: Request, res: Response) => {\r\n    const { transcriptId } = req.params;\r\n\r\n    if (!transcriptId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"transcriptId is required\",\r\n      });\r\n    }\r\n\r\n    const transcript = await main.prisma.transcript.findUnique({\r\n      where: { id: transcriptId },\r\n    });\r\n\r\n    if (!transcript) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: \"Transcript not found\",\r\n      });\r\n    }\r\n\r\n    // Dynamically create PDF\r\n    const doc = new PDFDocument();\r\n    const passthrough = new stream.PassThrough();\r\n\r\n    res.setHeader(\"Content-Type\", \"application/pdf\");\r\n    res.setHeader(\"Content-Disposition\", `attachment; filename=\"transcripcion-${transcriptId}.pdf\"`);\r\n\r\n    doc.pipe(passthrough);\r\n\r\n    doc.fontSize(18).text(`Transcripción #${transcript.id}`, { align: \"center\" });\r\n    doc.moveDown();\r\n    doc.fontSize(12).text(`Tipo: ${transcript.type}`);\r\n    doc.text(`Fecha: ${transcript.createdAt}`);\r\n    doc.text(`Participantes: ${transcript.participants.join(\", \")}`);\r\n    doc.moveDown();\r\n\r\n    doc.fontSize(14).text(\"Contenido:\", { underline: true });\r\n    doc.moveDown();\r\n\r\n    if (Array.isArray(transcript.content)) {\r\n      transcript.content.forEach((msg: any) => {\r\n        doc.fontSize(10).text(`[${msg.timestamp}] ${msg.senderName || \"Sistema\"}: ${msg.content}`);\r\n        doc.moveDown(0.5);\r\n      });\r\n    }\r\n\r\n    doc.end();\r\n    passthrough.pipe(res);\r\n    return;\r\n  });\r\n\r\n  /**\r\n   * Gets all messages for a specific ticket.\r\n   * @route GET /dashboard/utils/tickets/:userId/:ticketId/messages\r\n   * @param userId - The ID of the user who owns the ticket.\r\n   * @param ticketId - The ID of the ticket to retrieve messages for.\r\n   * @returns {Object} JSON response with message data.\r\n   */\r\n  app.get(formatRoute(\"tickets/:userId/:ticketId/messages\"), async (req: Request, res: Response) => {\r\n    const { userId, ticketId } = req.params;\r\n    if (!userId || !ticketId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"userId and ticketId are required\",\r\n      });\r\n    }\r\n\r\n    // Busca los mensajes del ticket\r\n    const messages = await main.prisma.ticketMessage.findMany({\r\n      where: { ticketId },\r\n      orderBy: { timestamp: \"asc\" },\r\n    });\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      data: messages,\r\n    });\r\n  });\r\n\r\n  //***********************************************************//\r\n  //\r\n  // ADMIN SECTION TICKET MANAGER\r\n  //\r\n  //************************************************************//\r\n\r\n  // Estadísticas de tickets\r\n  /**\r\n   * Gets ticket statistics for the admin dashboard.\r\n   * @route GET /dashboard/utils/admin/tickets/stats\r\n   * @returns {Object} JSON response with ticket statistics.\r\n   */\r\n  app.get(formatRoute(\"admin/tickets/stats\"), async (_req: Request, res: Response) => {\r\n    try {\r\n      // General statistics\r\n      const totalTickets = await main.prisma.ticketUser.count();\r\n      const openTickets = await main.prisma.ticketUser.count({ where: { status: \"OPEN\" } });\r\n      const closedTickets = await main.prisma.ticketUser.count({ where: { status: \"CLOSED\" } });\r\n      const pendingTickets = await main.prisma.ticketUser.count({ where: { status: \"PENDING\" } });\r\n\r\n      // Tickets by category (assuming there is a category field)\r\n      const ticketsByCategory = await main.prisma.ticketUser.findMany();\r\n\r\n      // Tickets by month (last 6 months)\r\n      const sixMonthsAgo = new Date();\r\n      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\r\n\r\n      const ticketsByMonth = await main.prisma.ticketUser.groupBy({\r\n        by: [\"createdAt\"],\r\n        where: {\r\n          createdAt: {\r\n            gte: sixMonthsAgo,\r\n          },\r\n        },\r\n        _count: {\r\n          _all: true,\r\n        },\r\n      });\r\n\r\n      // Top users who open tickets\r\n      const topUsers = await main.prisma.ticketUser.groupBy({\r\n        by: [\"userId\"],\r\n        _count: {\r\n          userId: true,\r\n        },\r\n        orderBy: {\r\n          _count: {\r\n            userId: \"desc\",\r\n          },\r\n        },\r\n        take: 5,\r\n      });\r\n\r\n      // DO NOT enrich with user info\r\n      const topUsersWithInfo = topUsers.map((user) => ({\r\n        userId: user.userId,\r\n        ticketCount: user._count.userId,\r\n      }));\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: {\r\n          totalTickets,\r\n          openTickets,\r\n          closedTickets,\r\n          pendingTickets,\r\n          ticketsByCategory,\r\n          ticketsByMonth,\r\n          topUsers: topUsersWithInfo,\r\n        },\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error getting ticket stats:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  // Obtener todos los tickets (para admin)\r\n  /**\r\n   * Gets all tickets for admin.\r\n   * @route GET /dashboard/utils/admin/tickets\r\n   * @param req.query.page - Page number for pagination.\r\n   * @param req.query.limit - Number of items per page.\r\n   * @param req.query.status - Filter by ticket status (e.g., \"OPEN\", \"CLOSED\", \"PENDING\", or \"all\").\r\n   * @param req.query.search - Search term for ticket reason, userId, or ticketId.\r\n   * @returns {Object} JSON response with paginated ticket data.\r\n   */\r\n  app.get(formatRoute(\"admin/tickets\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const page = parseInt(req.query.page as string) || 1;\r\n      const limit = parseInt(req.query.limit as string) || 20;\r\n      const status = (req.query.status as string) || \"all\";\r\n      const search = (req.query.search as string) || \"\";\r\n\r\n      const where: any = {};\r\n      if (status !== \"all\") {\r\n        where.status = status;\r\n      }\r\n      if (search) {\r\n        where.OR = [\r\n          { reason: { contains: search, mode: \"insensitive\" } },\r\n          { userId: { contains: search, mode: \"insensitive\" } },\r\n          { ticketId: { contains: search, mode: \"insensitive\" } },\r\n        ];\r\n      }\r\n\r\n      const total = await main.prisma.ticketUser.count({ where });\r\n      const tickets = await main.prisma.ticketUser.findMany({\r\n        where,\r\n        orderBy: { createdAt: \"desc\" },\r\n        skip: (page - 1) * limit,\r\n        take: limit,\r\n        include: {\r\n          messages: {\r\n            orderBy: { timestamp: \"asc\" },\r\n            take: 1,\r\n          },\r\n        },\r\n      });\r\n\r\n      // No longer enrich with user data\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: tickets,\r\n        total,\r\n        page,\r\n        limit,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error getting tickets:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n  /**\r\n   * Assigns a ticket to an admin.\r\n   * @route PUT /dashboard/utils/admin/tickets/:ticketId/assign\r\n   * @param ticketId - The ID of the ticket to assign.\r\n   * @param req.body.adminId - The ID of the admin to assign the ticket to.\r\n   * @returns {Object} JSON response with updated ticket data.\r\n   */\r\n  app.put(formatRoute(\"admin/tickets/:ticketId/assign\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { adminId } = req.body;\r\n      const { ticketId } = req.params;\r\n\r\n      console.log(adminId);\r\n      if (!ticketId || !adminId) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"ticketId and adminId are required\",\r\n        });\r\n      }\r\n\r\n      // Check if the ticket exists\r\n      const ticket = await main.prisma.ticketUser.findFirst({\r\n        where: { ticketId },\r\n      });\r\n\r\n      if (!ticket) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Ticket not found\",\r\n        });\r\n      }\r\n\r\n      // Check if the admin exists\r\n      const adminMany = await main.prisma.userAPI.findMany();\r\n      const admin = adminMany.find((a) => a.discord?.userId === adminId);\r\n      console.log(\"Admin found:\", admin);\r\n\r\n      console.log(admin);\r\n      if (!admin) {\r\n        return res.status(400).json({\r\n          sucess: false,\r\n          message: \"user not registered discord data\",\r\n        });\r\n      }\r\n\r\n      if (![\"admin\", \"developer\", \"owner\"].includes(admin.role)) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"Admin user not found or not authorized\",\r\n        });\r\n      }\r\n\r\n      // Update ticket\r\n      const updatedTicket = await main.prisma.ticketUser.update({\r\n        where: { ticketId },\r\n        data: {\r\n          status: \"PENDING\",\r\n          updatedAt: new Date(),\r\n          assignedTo: {\r\n            userId: admin.discord?.userId,\r\n            userAvatar: admin.discord?.userAvatar,\r\n            userName: admin.discord?.userName,\r\n          },\r\n        },\r\n      });\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: updatedTicket,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error assigning ticket:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Sends a message as an admin in a ticket.\r\n   * @route POST /dashboard/utils/admin/tickets/:ticketId/message\r\n   * @param ticketId - The ID of the ticket to send the message in.\r\n   * @param req.body.message - The content of the message.\r\n   * @param req.body.adminId - The ID of the admin sending the message.\r\n   * @returns {Object} JSON response with message status and message data.\r\n   */\r\n  app.post(formatRoute(\"admin/tickets/:ticketId/message\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { ticketId } = req.params;\r\n      const { message, adminId } = req.body;\r\n\r\n      if (!ticketId || !adminId || !message) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"ticketId, adminId and message are required\",\r\n        });\r\n      }\r\n\r\n      // Check if the ticket exists and is open/pending\r\n      const ticket = await main.prisma.ticketUser.findUnique({\r\n        where: { ticketId },\r\n      });\r\n\r\n      if (!ticket) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Ticket not found\",\r\n        });\r\n      }\r\n\r\n      if (ticket.status === \"CLOSED\") {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"Cannot send message to closed ticket\",\r\n        });\r\n      }\r\n\r\n      const adminMany = await main.prisma.userAPI.findMany();\r\n      const admin = adminMany.find((a) => a.discord?.userId === adminId);\r\n      console.log(\"Admin found:\", admin);\r\n\r\n      console.log(admin);\r\n      if (!admin) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"Admin user not found\",\r\n        });\r\n      }\r\n\r\n      // Create message\r\n      const newMessage = await main.prisma.ticketMessage.create({\r\n        data: {\r\n          ticketId,\r\n          senderId: adminId,\r\n          senderName: admin.name || \"Admin\",\r\n          content: message,\r\n          timestamp: new Date(),\r\n          isAdmin: true,\r\n        },\r\n      });\r\n\r\n      // Update ticket status if it was open\r\n      if (ticket.status === \"OPEN\") {\r\n        await main.prisma.ticketUser.update({\r\n          where: { ticketId },\r\n          data: {\r\n            status: \"PENDING\",\r\n            updatedAt: new Date(),\r\n          },\r\n        });\r\n      }\r\n\r\n      return res.status(201).json({\r\n        success: true,\r\n        data: newMessage,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error sending admin message:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Closes a ticket as an admin.\r\n   * @route PUT /dashboard/utils/admin/tickets/:ticketId/close\r\n   * @param ticketId - The ID of the ticket to close.\r\n   * @param req.body.adminId - The ID of the admin closing the ticket.\r\n   * @returns {Object} JSON response with updated ticket data.\r\n   */\r\n  app.put(formatRoute(\"admin/tickets/:ticketId/close\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { ticketId } = req.params;\r\n      const { adminId } = req.body;\r\n\r\n      if (!ticketId || !adminId) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"ticketId and adminId are required\",\r\n        });\r\n      }\r\n\r\n      // Check if the ticket exists\r\n      const ticket = await main.prisma.ticketUser.findUnique({\r\n        where: { ticketId },\r\n      });\r\n\r\n      if (!ticket) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Ticket not found\",\r\n        });\r\n      }\r\n\r\n      // Check if the admin exists\r\n      const admin = await main.prisma.userAPI.findFirst({\r\n        where: { discord: { userId: adminId } },\r\n      });\r\n\r\n      if (!admin || ![\"admin\", \"developer\", \"owner\"].includes(admin.role)) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"Admin user not found or not authorized\",\r\n        });\r\n      }\r\n\r\n      // Update ticket\r\n      const updatedTicket = await main.prisma.ticketUser.update({\r\n        where: { ticketId },\r\n        data: {\r\n          status: \"CLOSED\",\r\n          closedBy: adminId,\r\n          closedAt: new Date(),\r\n          updatedAt: new Date(),\r\n        },\r\n      });\r\n\r\n      // Generate transcript\r\n      const messages = await main.prisma.ticketMessage.findMany({\r\n        where: { ticketId },\r\n        orderBy: { timestamp: \"asc\" },\r\n      });\r\n\r\n      const participants = [...new Set(messages.map((m) => m.senderId))];\r\n\r\n      await main.prisma.transcript.create({\r\n        data: {\r\n          type: \"ticket\",\r\n          referenceId: ticketId,\r\n          participants,\r\n          content: messages.map((m) => ({\r\n            senderId: m.senderId,\r\n            senderName: m.senderName,\r\n            senderAvatar: m.senderAvatar,\r\n            content: m.content,\r\n            timestamp: m.timestamp,\r\n            isAdmin: m.isAdmin,\r\n          })),\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n        },\r\n      });\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: updatedTicket,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error closing ticket:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Gets the support team members.\r\n   * @route GET /dashboard/utils/admin/support/team\r\n   * @returns {Object} JSON response with support team data.\r\n   */\r\n  app.get(formatRoute(\"admin/support/team\"), async (_req: Request, res: Response) => {\r\n    try {\r\n      // Find users with admin, support, moderator, developer, owner roles\r\n      const admins = await main.prisma.userAPI.findMany({\r\n        where: {\r\n          role: { in: [\"admin\", \"developer\", \"owner\"] },\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n        },\r\n      });\r\n      return res.status(200).json({ success: true, data: admins });\r\n    } catch (error: any) {\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Gets all messages for a specific ticket (admin view).\r\n   * @route GET /dashboard/utils/admin/tickets/:ticketId/messages\r\n   * @param ticketId - The ID of the ticket to retrieve messages for.\r\n   * @returns {Object} JSON response with message data.\r\n   */\r\n  app.get(formatRoute(\"admin/tickets/:ticketId/messages\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { ticketId } = req.params;\r\n      if (!ticketId) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"ticketId is required\",\r\n        });\r\n      }\r\n\r\n      // Busca los mensajes del ticket\r\n      const messages = await main.prisma.ticketMessage.findMany({\r\n        where: { ticketId },\r\n        orderBy: { timestamp: \"asc\" },\r\n      });\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: messages,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error getting ticket messages:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Gets detailed information about a specific ticket (admin view).\r\n   * @route GET /dashboard/utils/admin/tickets/:ticketId\r\n   * @param ticketId - The ID of the ticket to retrieve.\r\n   * @returns {Object} JSON response with ticket data.\r\n   */\r\n  app.get(formatRoute(\"admin/tickets/:ticketId\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { ticketId } = req.params;\r\n      if (!ticketId) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"ticketId is required\",\r\n        });\r\n      }\r\n\r\n      const ticket = await main.prisma.ticketUser.findUnique({\r\n        where: { ticketId },\r\n        include: {\r\n          messages: {\r\n            orderBy: { timestamp: \"asc\" },\r\n          },\r\n        },\r\n      });\r\n\r\n      if (!ticket) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Ticket not found\",\r\n        });\r\n      }\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: ticket,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error getting ticket:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Gets support statistics for the admin dashboard.\r\n   * @route GET /dashboard/utils/admin/support/stats\r\n   * @returns {Object} JSON response with support statistics.\r\n   */\r\n  app.get(formatRoute(\"admin/support/stats\"), async (_req: Request, res: Response) => {\r\n    try {\r\n      // General statistics\r\n      const totalTickets = await main.prisma.ticketUser.count();\r\n      const openTickets = await main.prisma.ticketUser.count({ where: { status: \"OPEN\" } });\r\n      const closedTickets = await main.prisma.ticketUser.count({ where: { status: \"CLOSED\" } });\r\n      const pendingTickets = await main.prisma.ticketUser.count({ where: { status: \"PENDING\" } });\r\n\r\n      // Tickets by category (assuming there is a category field)\r\n      const ticketsByCategory = await main.prisma.ticketUser.findMany();\r\n\r\n      // Tickets by month (last 6 months)\r\n      const sixMonthsAgo = new Date();\r\n      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\r\n\r\n      const ticketsByMonth = await main.prisma.ticketUser.groupBy({\r\n        by: [\"createdAt\"],\r\n        where: {\r\n          createdAt: {\r\n            gte: sixMonthsAgo,\r\n          },\r\n        },\r\n        _count: {\r\n          _all: true,\r\n        },\r\n      });\r\n\r\n      // Top users who open tickets\r\n      const topUsers = await main.prisma.ticketUser.groupBy({\r\n        by: [\"userId\"],\r\n        _count: {\r\n          userId: true,\r\n        },\r\n        orderBy: {\r\n          _count: {\r\n            userId: \"desc\",\r\n          },\r\n        },\r\n        take: 5,\r\n      });\r\n\r\n      // DO NOT enrich with user info\r\n      const topUsersWithInfo = topUsers.map((user) => ({\r\n        userId: user.userId,\r\n        ticketCount: user._count.userId,\r\n      }));\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: {\r\n          totalTickets,\r\n          openTickets,\r\n          closedTickets,\r\n          pendingTickets,\r\n          ticketsByCategory,\r\n          ticketsByMonth,\r\n          topUsers: topUsersWithInfo,\r\n        },\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error getting ticket stats:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Endpoint to get all transcripts (ADMIN).\r\n   * @route GET /dashboard/utils/admin/transcripts\r\n   * @param req.query.page - Page number for pagination.\r\n   * @param req.query.limit - Number of items per page.\r\n   * @param req.query.filter - Filter by transcript type (e.g., \"ticket\", \"chat\", or \"all\").\r\n   * @returns {Object} JSON response with paginated transcript data.\r\n   */\r\n  app.get(formatRoute(\"admin/transcripts\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const page = parseInt(req.query.page as string) || 1;\r\n      const limit = parseInt(req.query.limit as string) || 10;\r\n      const filter = (req.query.filter as string) || \"all\";\r\n\r\n      // Build Prisma filter\r\n      const where: any = {};\r\n      if (filter && filter !== \"all\") {\r\n        where.type = filter; // e.g., \"ticket\", \"chat\", etc.\r\n      }\r\n\r\n      // Total transcripts for pagination\r\n      const total = await main.prisma.transcript.count({ where });\r\n\r\n      // Get paginated transcripts\r\n      const transcripts = await main.prisma.transcript.findMany({\r\n        where,\r\n        orderBy: { createdAt: \"desc\" },\r\n        skip: (page - 1) * limit,\r\n        take: limit,\r\n      });\r\n\r\n      /**\r\n       * Formats transcript data for frontend.\r\n       */\r\n      const data = transcripts.map((t) => ({\r\n        transcriptId: t.id,\r\n        type: t.type,\r\n        referenceId: t.referenceId,\r\n        participants: t.participants,\r\n        createdAt: t.createdAt,\r\n        duration: (() => {\r\n          if (\r\n            Array.isArray(t.content) &&\r\n            t.content.length > 1 &&\r\n            typeof t.content[0] === \"object\" &&\r\n            t.content[0] !== null &&\r\n            \"timestamp\" in t.content[0] &&\r\n            typeof t.content[t.content.length - 1] === \"object\" &&\r\n            t.content[t.content.length - 1] !== null &&\r\n            Object.prototype.hasOwnProperty.call(t.content[t.content.length - 1], \"timestamp\")\r\n          ) {\r\n            return (\r\n              new Date((t.content[t.content.length - 1] as any).timestamp).getTime() -\r\n              new Date((t.content[0] as any).timestamp).getTime()\r\n            );\r\n          }\r\n          return null;\r\n        })(),\r\n      }));\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        data,\r\n        total,\r\n        page,\r\n        limit,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"Error getting admin transcripts:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Internal server error\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * CRUD endpoints for Client, Discord, and WhatsApp models.\r\n   * All responses/messages are in English and include debug logs.\r\n   */\r\n\r\n  // ===================== CLIENT =====================\r\n\r\n  /**\r\n   * Get all clients.\r\n   * @route GET /dashboard/utils/client\r\n   */\r\n  app.get(formatRoute(\"client\"), async (_req: Request, res: Response) => {\r\n    try {\r\n      const clients = await main.prisma.client.findMany();\r\n      console.debug(\"[Client][GET] All clients fetched:\", clients.length);\r\n      return res.status(200).json({ success: true, data: clients });\r\n    } catch (error: any) {\r\n      console.error(\"[Client][GET] Error fetching clients:\", error);\r\n      return res.status(500).json({ success: false, message: \"Failed to fetch clients\", error: error.message });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get a client by ID.\r\n   * @route GET /dashboard/utils/client/:id\r\n   */\r\n  app.get(formatRoute(\"client/:id\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { id } = req.params;\r\n      const clientData = await main.prisma.client.findUnique({ where: { id } });\r\n      if (!clientData) {\r\n        console.debug(`[Client][GET] Client not found: ${id}`);\r\n        return res.status(404).json({ success: false, message: \"Client not found\" });\r\n      }\r\n      console.debug(`[Client][GET] Client fetched: ${id}`);\r\n      return res.status(200).json({ success: true, data: clientData });\r\n    } catch (error: any) {\r\n      console.error(\"[Client][GET] Error fetching client:\", error);\r\n      return res.status(500).json({ success: false, message: \"Failed to fetch client\", error: error.message });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Create a new client.\r\n   * @route POST /dashboard/utils/client\r\n   */\r\n  app.post(formatRoute(\"client\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const data = req.body;\r\n      const created = await main.prisma.client.create({ data });\r\n      console.debug(\"[Client][POST] Client created:\", created.id);\r\n      return res.status(201).json({ success: true, message: \"Client created successfully\", data: created });\r\n    } catch (error: any) {\r\n      console.error(\"[Client][POST] Error creating client:\", error);\r\n      return res.status(500).json({ success: false, message: \"Failed to create client\", error: error.message });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Update a client by ID.\r\n   * @route PUT /dashboard/utils/client/:id\r\n   */\r\n  app.put(formatRoute(\"client/:id\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { id } = req.params;\r\n      const data = req.body;\r\n      const updated = await main.prisma.client.update({ where: { id }, data });\r\n      console.debug(`[Client][PUT] Client updated: ${id}`);\r\n      return res.status(200).json({ success: true, message: \"Client updated successfully\", data: updated });\r\n    } catch (error: any) {\r\n      console.error(\"[Client][PUT] Error updating client:\", error);\r\n      return res.status(500).json({ success: false, message: \"Failed to update client\", error: error.message });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Delete a client by ID.\r\n   * @route DELETE /dashboard/utils/client/:id\r\n   */\r\n  app.delete(formatRoute(\"client/:id\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { id } = req.params;\r\n      await main.prisma.client.delete({ where: { id } });\r\n      console.debug(`[Client][DELETE] Client deleted: ${id}`);\r\n      return res.status(200).json({ success: true, message: \"Client deleted successfully\" });\r\n    } catch (error: any) {\r\n      console.error(\"[Client][DELETE] Error deleting client:\", error);\r\n      return res.status(500).json({ success: false, message: \"Failed to delete client\", error: error.message });\r\n    }\r\n  });\r\n\r\n  // ===================== DISCORD =====================\r\n\r\n  /**\r\n   * Get all Discord configs.\r\n   * @route GET /dashboard/utils/discord\r\n   */\r\n  app.get(formatRoute(\"discord\"), async (_req: Request, res: Response) => {\r\n    try {\r\n      const discordConfigs = await main.prisma.discord.findMany();\r\n      console.debug(\"[Discord][GET] All Discord configs fetched:\", discordConfigs.length);\r\n      return res.status(200).json({ success: true, data: discordConfigs });\r\n    } catch (error: any) {\r\n      console.error(\"[Discord][GET] Error fetching Discord configs:\", error);\r\n      return res.status(500).json({ success: false, message: \"Failed to fetch Discord configs\", error: error.message });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get a Discord config by ID.\r\n   * @route GET /dashboard/utils/discord/:id\r\n   */\r\n  app.get(formatRoute(\"discord/:id\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { id } = req.params;\r\n      const discordData = await main.prisma.discord.findUnique({ where: { id } });\r\n      if (!discordData) {\r\n        console.debug(`[Discord][GET] Discord config not found: ${id}`);\r\n        return res.status(404).json({ success: false, message: \"Discord config not found\" });\r\n      }\r\n      console.debug(`[Discord][GET] Discord config fetched: ${id}`);\r\n      return res.status(200).json({ success: true, data: discordData });\r\n    } catch (error: any) {\r\n      console.error(\"[Discord][GET] Error fetching Discord config:\", error);\r\n      return res.status(500).json({ success: false, message: \"Failed to fetch Discord config\", error: error.message });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Create a new Discord config.\r\n   * @route POST /dashboard/utils/discord\r\n   */\r\n  app.post(formatRoute(\"discord\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const data = req.body;\r\n      const created = await main.prisma.discord.create({ data });\r\n      console.debug(\"[Discord][POST] Discord config created:\", created.id);\r\n      return res.status(201).json({ success: true, message: \"Discord config created successfully\", data: created });\r\n    } catch (error: any) {\r\n      console.error(\"[Discord][POST] Error creating Discord config:\", error);\r\n      return res.status(500).json({ success: false, message: \"Failed to create Discord config\", error: error.message });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Update a Discord config by ID.\r\n   * @route PUT /dashboard/utils/discord/:id\r\n   */\r\n  app.put(formatRoute(\"discord/:id\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { id } = req.params;\r\n      const data = req.body;\r\n      const updated = await main.prisma.discord.update({ where: { id }, data });\r\n      console.debug(`[Discord][PUT] Discord config updated: ${id}`);\r\n      return res.status(200).json({ success: true, message: \"Discord config updated successfully\", data: updated });\r\n    } catch (error: any) {\r\n      console.error(\"[Discord][PUT] Error updating Discord config:\", error);\r\n      return res.status(500).json({ success: false, message: \"Failed to update Discord config\", error: error.message });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Delete a Discord config by ID.\r\n   * @route DELETE /dashboard/utils/discord/:id\r\n   */\r\n  app.delete(formatRoute(\"discord/:id\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { id } = req.params;\r\n      await main.prisma.discord.delete({ where: { id } });\r\n      console.debug(`[Discord][DELETE] Discord config deleted: ${id}`);\r\n      return res.status(200).json({ success: true, message: \"Discord config deleted successfully\" });\r\n    } catch (error: any) {\r\n      console.error(\"[Discord][DELETE] Error deleting Discord config:\", error);\r\n      return res.status(500).json({ success: false, message: \"Failed to delete Discord config\", error: error.message });\r\n    }\r\n  });\r\n\r\n  // ===================== WHATSAPP =====================\r\n\r\n  /**\r\n   * Get all WhatsApp configs.\r\n   * @route GET /dashboard/utils/whatsapp\r\n   */\r\n  app.get(formatRoute(\"whatsapp\"), async (_req: Request, res: Response) => {\r\n    try {\r\n      const whatsappConfigs = await main.prisma.whatsApp.findMany();\r\n      console.debug(\"[WhatsApp][GET] All WhatsApp configs fetched:\", whatsappConfigs.length);\r\n      return res.status(200).json({ success: true, data: whatsappConfigs });\r\n    } catch (error: any) {\r\n      console.error(\"[WhatsApp][GET] Error fetching WhatsApp configs:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to fetch WhatsApp configs\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get a WhatsApp config by ID.\r\n   * @route GET /dashboard/utils/whatsapp/:id\r\n   */\r\n  app.get(formatRoute(\"whatsapp/:id\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { id } = req.params;\r\n      const whatsappData = await main.prisma.whatsApp.findUnique({ where: { id } });\r\n      if (!whatsappData) {\r\n        console.debug(`[WhatsApp][GET] WhatsApp config not found: ${id}`);\r\n        return res.status(404).json({ success: false, message: \"WhatsApp config not found\" });\r\n      }\r\n      console.debug(`[WhatsApp][GET] WhatsApp config fetched: ${id}`);\r\n      return res.status(200).json({ success: true, data: whatsappData });\r\n    } catch (error: any) {\r\n      console.error(\"[WhatsApp][GET] Error fetching WhatsApp config:\", error);\r\n      return res.status(500).json({ success: false, message: \"Failed to fetch WhatsApp config\", error: error.message });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Create a new WhatsApp config.\r\n   * @route POST /dashboard/utils/whatsapp\r\n   */\r\n  app.post(formatRoute(\"whatsapp\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const data = req.body;\r\n      const created = await main.prisma.whatsApp.create({ data });\r\n      console.debug(\"[WhatsApp][POST] WhatsApp config created:\", created.id);\r\n      return res.status(201).json({ success: true, message: \"WhatsApp config created successfully\", data: created });\r\n    } catch (error: any) {\r\n      console.error(\"[WhatsApp][POST] Error creating WhatsApp config:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to create WhatsApp config\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Update a WhatsApp config by ID.\r\n   * @route PUT /dashboard/utils/whatsapp/:id\r\n   */\r\n  app.put(formatRoute(\"whatsapp/:id\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { id } = req.params;\r\n      const data = req.body;\r\n      const updated = await main.prisma.whatsApp.update({ where: { id }, data });\r\n      console.debug(`[WhatsApp][PUT] WhatsApp config updated: ${id}`);\r\n      return res.status(200).json({ success: true, message: \"WhatsApp config updated successfully\", data: updated });\r\n    } catch (error: any) {\r\n      console.error(\"[WhatsApp][PUT] Error updating WhatsApp config:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to update WhatsApp config\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Delete a WhatsApp config by ID.\r\n   * @route DELETE /dashboard/utils/whatsapp/:id\r\n   */\r\n  app.delete(formatRoute(\"whatsapp/:id\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { id } = req.params;\r\n      await main.prisma.whatsApp.delete({ where: { id } });\r\n      console.debug(`[WhatsApp][DELETE] WhatsApp config deleted: ${id}`);\r\n      return res.status(200).json({ success: true, message: \"WhatsApp config deleted successfully\" });\r\n    } catch (error: any) {\r\n      console.error(\"[WhatsApp][DELETE] Error deleting WhatsApp config:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to delete WhatsApp config\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  // ===================== COMMAND =====================\r\n\r\n  /**\r\n   * Get all commands for a guild.\r\n   * @route GET /dashboard/utils/commands/:guildId\r\n   */\r\n  app.get(formatRoute(\"commands/:guildId\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { guildId } = req.params;\r\n      const commands = await main.prisma.command.findMany({\r\n        where: { guildId },\r\n        orderBy: { createdAt: \"desc\" },\r\n      });\r\n      console.debug(`[Command][GET] Commands fetched for guild: ${guildId}`);\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: commands,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"[Command][GET] Error fetching commands:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to fetch commands\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get a specific command by ID.\r\n   * @route GET /dashboard/utils/commands/:guildId/:commandId\r\n   */\r\n  app.get(formatRoute(\"commands/:guildId/:commandId\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { guildId, commandId } = req.params;\r\n      const command = await main.prisma.command.findFirst({\r\n        where: {\r\n          id: commandId,\r\n          guildId,\r\n        },\r\n      });\r\n\r\n      if (!command) {\r\n        console.debug(`[Command][GET] Command not found: ${commandId}`);\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Command not found\",\r\n        });\r\n      }\r\n\r\n      console.debug(`[Command][GET] Command fetched: ${commandId}`);\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: command,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"[Command][GET] Error fetching command:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to fetch command\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Create a new command.\r\n   * @route POST /dashboard/utils/commands\r\n   */\r\n  app.post(formatRoute(\"commands\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const {\r\n        guildId,\r\n        name,\r\n        embed,\r\n        embedColor,\r\n        embedTitle,\r\n        embedFooter,\r\n        embedImage,\r\n        embedThumbnail,\r\n        embedAuthor,\r\n        buttons,\r\n        file,\r\n        description,\r\n        response,\r\n        fields,\r\n      } = req.body;\r\n\r\n      if (!guildId || !name) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"guildId and name are required fields\",\r\n        });\r\n      }\r\n\r\n      // Validate buttons structure if provided\r\n      if (buttons) {\r\n        try {\r\n          const parsedButtons = JSON.parse(buttons);\r\n          if (!Array.isArray(parsedButtons)) {\r\n            return res.status(400).json({\r\n              success: false,\r\n              message: \"Buttons must be an array\",\r\n            });\r\n          }\r\n\r\n          for (const btn of parsedButtons) {\r\n            if (!btn.label || !btn.style) {\r\n              return res.status(400).json({\r\n                success: false,\r\n                message: \"Each button must have label, style, and customId properties\",\r\n              });\r\n            }\r\n          }\r\n        } catch (e) {\r\n          return res.status(400).json({\r\n            success: false,\r\n            message: \"Invalid buttons format. Must be valid JSON array\",\r\n          });\r\n        }\r\n      }\r\n\r\n      if (fields) {\r\n        try {\r\n          const parsedFields = JSON.parse(fields);\r\n          if (!Array.isArray(parsedFields)) {\r\n            return res.status(400).json({\r\n              success: false,\r\n              message: \"Buttons must be an array\",\r\n            });\r\n          }\r\n\r\n          for (const field of parsedFields) {\r\n            if (!field.name || !field.value) {\r\n              return res.status(400).json({\r\n                success: false,\r\n                message: \"Each fields must have name, value properties\",\r\n              });\r\n            }\r\n          }\r\n        } catch (e) {\r\n          return res.status(400).json({\r\n            success: false,\r\n            message: \"Invalid fields format. Must be valid JSON array\",\r\n          });\r\n        }\r\n      }\r\n\r\n      const existingCommand = await main.prisma.command.findFirst({\r\n        where: {\r\n          guildId,\r\n          name,\r\n        },\r\n      });\r\n\r\n      if (existingCommand) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: \"A command with this name already exists in this guild\",\r\n        });\r\n      }\r\n\r\n      const created = await main.prisma.command.create({\r\n        data: {\r\n          guildId,\r\n          name,\r\n          embed: embed || false,\r\n          embedColor: embedColor || \"Red\",\r\n          embedTitle: embedTitle || null,\r\n          embedFooter: embedFooter || null,\r\n          embedImage: embedImage || null,\r\n          embedThumbnail: embedThumbnail || null,\r\n          embedAuthor: embedAuthor || null,\r\n          buttons: buttons ? JSON.parse(buttons) : null,\r\n          file: file || null,\r\n          description: description || null,\r\n          fields: fields ? JSON.parse(fields) : null,\r\n          response: response || null,\r\n          isEnabled: true,\r\n        },\r\n      });\r\n\r\n      console.debug(\"[Command][POST] Command created:\", created.id);\r\n      return res.status(201).json({\r\n        success: true,\r\n        message: \"Command created successfully\",\r\n        data: created,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"[Command][POST] Error creating command:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to create command\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Update a command by ID.\r\n   * @route PUT /dashboard/utils/commands/:commandId\r\n   */\r\n  app.put(formatRoute(\"commands/:commandId\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { commandId } = req.params;\r\n      const {\r\n        name,\r\n        embed,\r\n        embedColor,\r\n        embedTitle,\r\n        embedFooter,\r\n        embedImage,\r\n        embedThumbnail,\r\n        embedAuthor,\r\n        buttons,\r\n        fields,\r\n        file,\r\n        description,\r\n        response,\r\n        isEnabled,\r\n      } = req.body;\r\n\r\n      const existingCommand = await main.prisma.command.findUnique({\r\n        where: { id: commandId },\r\n      });\r\n\r\n      if (!existingCommand) {\r\n        console.debug(`[Command][PUT] Command not found: ${commandId}`);\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Command not found\",\r\n        });\r\n      }\r\n\r\n      // Check for name uniqueness in the same guild\r\n      if (name && name !== existingCommand.name) {\r\n        const nameExists = await main.prisma.command.findFirst({\r\n          where: {\r\n            guildId: existingCommand.guildId,\r\n            name,\r\n          },\r\n        });\r\n\r\n        if (nameExists) {\r\n          return res.status(400).json({\r\n            success: false,\r\n            message: \"A command with this name already exists in this guild\",\r\n          });\r\n        }\r\n      }\r\n\r\n      // Validate buttons if provided\r\n      let parsedButtons = null;\r\n      if (buttons !== undefined) {\r\n        try {\r\n          parsedButtons = buttons ? JSON.parse(buttons) : null;\r\n          if (parsedButtons && !Array.isArray(parsedButtons)) {\r\n            return res.status(400).json({\r\n              success: false,\r\n              message: \"Buttons must be an array\",\r\n            });\r\n          }\r\n\r\n          if (parsedButtons) {\r\n            for (const btn of parsedButtons) {\r\n              if (!btn.label || !btn.style) {\r\n                return res.status(400).json({\r\n                  success: false,\r\n                  message: \"Each button must have label, style, and customId properties\",\r\n                });\r\n              }\r\n            }\r\n          }\r\n        } catch (e) {\r\n          return res.status(400).json({\r\n            success: false,\r\n            message: \"Invalid buttons format. Must be valid JSON array\",\r\n          });\r\n        }\r\n      }\r\n\r\n      // Validate fields if provided\r\n      let parsedFields = null;\r\n      if (fields !== undefined) {\r\n        try {\r\n          parsedFields = fields ? JSON.parse(fields) : null;\r\n          if (parsedFields && !Array.isArray(parsedFields)) {\r\n            return res.status(400).json({\r\n              success: false,\r\n              message: \"Fields must be an array\",\r\n            });\r\n          }\r\n\r\n          if (parsedFields) {\r\n            for (const field of parsedFields) {\r\n              if (!field.name || !field.value) {\r\n                return res.status(400).json({\r\n                  success: false,\r\n                  message: \"Each field must have name and value properties\",\r\n                });\r\n              }\r\n            }\r\n          }\r\n        } catch (e) {\r\n          return res.status(400).json({\r\n            success: false,\r\n            message: \"Invalid fields format. Must be valid JSON array\",\r\n          });\r\n        }\r\n      }\r\n\r\n      const updated = await main.prisma.command.update({\r\n        where: { id: commandId },\r\n        data: {\r\n          name: name || existingCommand.name,\r\n          embed: typeof embed === \"boolean\" ? embed : existingCommand.embed,\r\n          embedColor: embedColor || existingCommand.embedColor,\r\n          embedTitle: embedTitle !== undefined ? embedTitle : existingCommand.embedTitle,\r\n          embedFooter: embedFooter !== undefined ? embedFooter : existingCommand.embedFooter,\r\n          embedImage: embedImage !== undefined ? embedImage : existingCommand.embedImage,\r\n          embedThumbnail: embedThumbnail !== undefined ? embedThumbnail : existingCommand.embedThumbnail,\r\n          embedAuthor: embedAuthor !== undefined ? embedAuthor : existingCommand.embedAuthor,\r\n          buttons: buttons !== undefined ? parsedButtons : existingCommand.buttons,\r\n          file: file !== undefined ? file : existingCommand.file,\r\n          description: description !== undefined ? description : existingCommand.description,\r\n          response: response !== undefined ? response : existingCommand.response,\r\n          fields: fields !== undefined ? parsedFields : existingCommand.fields,\r\n          isEnabled: typeof isEnabled === \"boolean\" ? isEnabled : existingCommand.isEnabled,\r\n        },\r\n      });\r\n\r\n      console.debug(`[Command][PUT] Command updated: ${commandId}`);\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: \"Command updated successfully\",\r\n        data: updated,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"[Command][PUT] Error updating command:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to update command\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Delete a command by ID.\r\n   * @route DELETE /dashboard/utils/commands/:commandId\r\n   */\r\n  app.delete(formatRoute(\"commands/:commandId\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { commandId } = req.params;\r\n\r\n      const existingCommand = await main.prisma.command.findUnique({\r\n        where: { id: commandId },\r\n      });\r\n\r\n      if (!existingCommand) {\r\n        console.debug(`[Command][DELETE] Command not found: ${commandId}`);\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Command not found\",\r\n        });\r\n      }\r\n\r\n      await main.prisma.command.delete({\r\n        where: { id: commandId },\r\n      });\r\n\r\n      console.debug(`[Command][DELETE] Command deleted: ${commandId}`);\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: \"Command deleted successfully\",\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"[Command][DELETE] Error deleting command:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to delete command\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Toggle command status (enable/disable).\r\n   * @route PATCH /dashboard/utils/commands/:commandId/toggle\r\n   */\r\n  app.patch(formatRoute(\"commands/:commandId/toggle\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { commandId } = req.params;\r\n\r\n      const existingCommand = await main.prisma.command.findUnique({\r\n        where: { id: commandId },\r\n      });\r\n\r\n      if (!existingCommand) {\r\n        console.debug(`[Command][PATCH] Command not found: ${commandId}`);\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Command not found\",\r\n        });\r\n      }\r\n\r\n      const updated = await main.prisma.command.update({\r\n        where: { id: commandId },\r\n        data: {\r\n          isEnabled: !existingCommand.isEnabled,\r\n        },\r\n      });\r\n\r\n      console.debug(`[Command][PATCH] Command toggled: ${commandId}, new status: ${updated.isEnabled}`);\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: `Command ${updated.isEnabled ? \"enabled\" : \"disabled\"} successfully`,\r\n        data: updated,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"[Command][PATCH] Error toggling command:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to toggle command status\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Increment command usage count.\r\n   * @route PATCH /dashboard/utils/commands/:commandId/usage\r\n   */\r\n  app.patch(formatRoute(\"commands/:commandId/usage\"), async (req: Request, res: Response) => {\r\n    try {\r\n      const { commandId } = req.params;\r\n\r\n      const existingCommand = await main.prisma.command.findUnique({\r\n        where: { id: commandId },\r\n      });\r\n\r\n      if (!existingCommand) {\r\n        console.debug(`[Command][PATCH] Command not found: ${commandId}`);\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: \"Command not found\",\r\n        });\r\n      }\r\n\r\n      const updated = await main.prisma.command.update({\r\n        where: { id: commandId },\r\n        data: {\r\n          usageCount: existingCommand.usageCount + 1,\r\n        },\r\n      });\r\n\r\n      console.debug(`[Command][PATCH] Command usage incremented: ${commandId}, new count: ${updated.usageCount}`);\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: \"Command usage incremented\",\r\n        data: updated,\r\n      });\r\n    } catch (error: any) {\r\n      console.error(\"[Command][PATCH] Error incrementing command usage:\", error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to increment command usage\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  app.get(formatRoute(\"commands\"), async (_req: Request, res: Response) => {\r\n    try {\r\n      const commands = await main.prisma.command.findMany({\r\n        orderBy: { createdAt: \"desc\" },\r\n      });\r\n      return res.status(200).json({ success: true, data: commands });\r\n    } catch (error: any) {\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: \"Failed to fetch commands\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  });\r\n\r\n  app.get(formatRoute(\"nsfw-images\"), async (_req: Request, res: Response) => {\r\n    try {\r\n      const dirPath = join(__dirname, \"../../../../../../config/logs-apps/nsfw-image\");\r\n      const files = await readdir(dirPath);\r\n\r\n      // Extensiones soportadas (añadí formatos de video)\r\n      const mediaExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".webp\", \".mp4\", \".webm\"];\r\n      const images = await Promise.all(\r\n        files\r\n          .filter((file) => mediaExtensions.some((ext) => file.toLowerCase().endsWith(ext)))\r\n          .map(async (file) => {\r\n            const filePath = join(dirPath, file);\r\n            const stats = statSync(filePath);\r\n\r\n            // Extraer nombre sin extensión para el título\r\n            const nameWithoutExt = file.replace(/\\.[^/.]+$/, \"\");\r\n\r\n            // Determinar el tipo de medio\r\n            const isVideo = [\".mp4\", \".webm\"].some((ext) => file.toLowerCase().endsWith(ext));\r\n\r\n            return {\r\n              id: file, // Usamos el nombre como ID único\r\n              url: `/dashboard/utils/nsfw-images/${file}`,\r\n              path: filePath,\r\n              name: nameWithoutExt.replace(/_/g, \" \"), // Formatear nombre más legible\r\n              size: Math.round(stats.size / 1024), // tamaño en KB\r\n              date: stats.mtime.toISOString(), // Fecha de modificación\r\n              type: isVideo ? \"video\" : \"image\",\r\n              category: \"general\", // Puedes categorizar basado en subcarpetas o nombres\r\n              tags: [], // Puedes extraer tags del nombre del archivo\r\n              views: 0, // Contador de vistas (podrías implementarlo)\r\n            };\r\n          }),\r\n      );\r\n\r\n      res.json(images);\r\n    } catch (err) {\r\n      console.error(\"Error al leer las imágenes:\", err);\r\n      res.status(500).json({ error: \"Error al leer las imágenes.\" });\r\n    }\r\n  });\r\n\r\n  const mimeTypes: Record<string, string> = {\r\n    \".jpg\": \"image/jpeg\",\r\n    \".jpeg\": \"image/jpeg\",\r\n    \".png\": \"image/png\",\r\n    \".gif\": \"image/gif\",\r\n    \".webp\": \"image/webp\",\r\n    \".mp4\": \"video/mp4\",\r\n    \".webm\": \"video/webm\",\r\n  };\r\n\r\n  app.get(formatRoute(\"nsfw-images/:imageName\"), async (req: Request, res: Response) => {\r\n    const { imageName } = req.params;\r\n    const dirPath = join(__dirname, \"../../../../../../config/logs-apps/nsfw-image\");\r\n    const filePath = join(dirPath, imageName);\r\n\r\n    try {\r\n      // Detecta la extensión real\r\n      const ext = path.extname(imageName).toLowerCase();\r\n      const contentType = mimeTypes[ext] || \"application/octet-stream\";\r\n\r\n      const file = await readFile(filePath);\r\n      res.set(\"Content-Type\", contentType);\r\n      res.send(file);\r\n    } catch (err) {\r\n      console.error(\"Error al servir la imagen:\", err);\r\n      res.status(404).json({ error: \"Imagen no encontrada.\" });\r\n    }\r\n  });\r\n};\r\n"],"names":[],"mappings":"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","debug_id":"6b64f315-5b65-56f5-9d41-2a3332af745b"}
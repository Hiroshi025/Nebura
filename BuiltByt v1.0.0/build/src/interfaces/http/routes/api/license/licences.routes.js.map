{"version":3,"file":"licences.routes.js","sources":["src/interfaces/http/routes/api/license/licences.routes.ts"],"sourceRoot":"/","sourcesContent":["import { authenticateToken } from \"@/interfaces/http/middlewares/jwt/token.middleware\";\r\nimport { LicenseIPMiddleware } from \"@/interfaces/messaging/broker/license\";\r\nimport { RateLimitManager } from \"@/interfaces/messaging/broker/rateLimit\";\r\nimport { TRoutesInput } from \"@/typings/utils\";\r\n\r\nimport { SecurityController } from \"../../../controllers/admin/devs.controllers\";\r\nimport { LicenseController } from \"../../../controllers/license/license.controllers\";\r\nimport { isAdmin } from \"../../../middlewares/jwt/auth.middleware\";\r\n\r\nconst BASE_PATH = \"/license\";\r\nconst API_VERSION = \"/api/v1\";\r\n\r\nconst formatRoute = (path: string): string => `${API_VERSION}${BASE_PATH}${path}`;\r\n\r\nexport default ({ app }: TRoutesInput) => {\r\n  const controller = new LicenseController();\r\n  const security = new SecurityController();\r\n\r\n  // Rutas de Administración (requieren autenticación y rol admin)\r\n\r\n  /**\r\n   * Endpoint para crear una nueva licencia.\r\n   * Requiere autenticación y rol de administrador.\r\n   */\r\n  app.post(\r\n    formatRoute(\"/\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    authenticateToken,\r\n    isAdmin,\r\n    controller.create.bind(controller),\r\n  );\r\n\r\n  /**\r\n   * Endpoint para actualizar una licencia existente por su ID.\r\n   * Requiere autenticación y rol de administrador.\r\n   */\r\n  app.put(\r\n    formatRoute(\"/:id\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    authenticateToken,\r\n    isAdmin,\r\n    controller.update.bind(controller),\r\n  );\r\n\r\n  /**\r\n   * Endpoint para eliminar una licencia existente por su ID.\r\n   * Requiere autenticación y rol de administrador.\r\n   */\r\n  app.delete(\r\n    formatRoute(\"/:id\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    authenticateToken,\r\n    isAdmin,\r\n    controller.delete.bind(controller),\r\n  );\r\n\r\n  // Rutas protegidas (solo autenticación)\r\n\r\n  /**\r\n   * Endpoint para obtener todas las licencias.\r\n   * Requiere autenticación y rol de administrador.\r\n   */\r\n  app.get(\r\n    formatRoute(\"/\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    authenticateToken,\r\n    isAdmin,\r\n    controller.getAll.bind(controller),\r\n  );\r\n\r\n  /**\r\n   * Endpoint para obtener una licencia específica por su ID.\r\n   * Requiere autenticación.\r\n   */\r\n  app.get(\r\n    formatRoute(\"/:id\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    authenticateToken,\r\n    controller.getById.bind(controller),\r\n  );\r\n\r\n  /**\r\n   * Endpoint para obtener todas las licencias asociadas a un usuario específico.\r\n   * Requiere autenticación.\r\n   */\r\n  app.get(\r\n    formatRoute(\"/user/:userId\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    authenticateToken,\r\n    controller.getByUser.bind(controller),\r\n  );\r\n\r\n  /**\r\n   * Endpoint público para validar una licencia mediante su clave.\r\n   * No requiere autenticación.\r\n   */\r\n  app.post(\r\n    formatRoute(\"/validate/:key\"),\r\n    LicenseIPMiddleware.getInstance().getMiddleware(),\r\n    controller.validate.bind(controller),\r\n  );\r\n\r\n  /**\r\n   * Obtiene información sobre una licencia específica.\r\n   * Método: GET\r\n   * Ruta: /api/v1/security/license-info/:licenseKey\r\n   * Middleware: authenticateToken\r\n   * Controlador: security.getLicenseInfo\r\n   * Descripción: Devuelve información sobre una licencia utilizando su clave.\r\n   */\r\n  app.get(\r\n    formatRoute(\"/info/:licenseKey\"),\r\n    RateLimitManager.getInstance().createCustomLimiter({\r\n      max: 10,\r\n      windowMs: 60 * 1000, // 1 minuto\r\n      message: \"Too many requests, please try again later.\",\r\n    }),\r\n    authenticateToken,\r\n    security.getLicenseInfo,\r\n  );\r\n};\r\n"],"names":[],"mappings":"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","debug_id":"f349634e-a102-5532-83fe-aa5ae708e26d"}
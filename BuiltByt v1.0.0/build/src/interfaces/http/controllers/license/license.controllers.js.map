{"version":3,"file":"license.controllers.js","sources":["src/interfaces/http/controllers/license/license.controllers.ts"],"sourceRoot":"/","sourcesContent":["import { Request, Response } from \"express\";\r\n\r\nimport { CreateLicenseDto, UpdateLicenseDto } from \"@/application/dto/license.dto\";\r\nimport { LicenseService } from \"@services/license/license.service\";\r\n\r\nexport class LicenseController extends LicenseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Creates a new license.\r\n   * @param req - The request object containing the license data.\r\n   * @param res - The response object to send the result.\r\n   * @returns {Promise<void>} - A promise that resolves when the license is created.\r\n   * @throws {Error} - Throws an error if the license creation fails.\r\n   *\r\n   */\r\n  async create(req: Request, res: Response) {\r\n    console.debug(\"[LicenseController][create] Incoming request body:\", req.body);\r\n    try {\r\n      const dto: CreateLicenseDto = req.body;\r\n      console.debug(\"[LicenseController][create] DTO prepared:\", dto);\r\n      const license = await this.createLicense(dto);\r\n      console.debug(\"[LicenseController][create] License created:\", license);\r\n      res.status(201).json(license);\r\n    } catch (error) {\r\n      console.debug(\"[LicenseController][create] Error:\", error);\r\n      res.status(500).json({ error: req.t(\"errors:failed_to_create_license\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Retrieves all licenses.\r\n   * @param req - The request object.\r\n   * @param res - The response object to send the result.\r\n   * @returns {Promise<void>} - A promise that resolves when the licenses are retrieved.\r\n   * @throws {Error} - Throws an error if the retrieval fails.\r\n   *\r\n   */\r\n  async getAll(req: Request, res: Response) {\r\n    console.debug(\"[LicenseController][getAll] Fetching all licenses\");\r\n    try {\r\n      const licenses = await this.findAllLicense();\r\n      console.debug(\"[LicenseController][getAll] Licenses fetched:\", licenses);\r\n      res.json(licenses);\r\n    } catch (error) {\r\n      console.debug(\"[LicenseController][getAll] Error:\", error);\r\n      res.status(500).json({ error: req.t(\"errors:failed_to_fetch_licenses\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Retrieves a license by its ID.\r\n   * @param req - The request object containing the license ID.\r\n   * @param res - The response object to send the result.\r\n   * @returns {Promise<void>} - A promise that resolves when the license is retrieved.\r\n   * @throws {Error} - Throws an error if the retrieval fails.\r\n   *\r\n   */\r\n  async getById(req: Request, res: Response) {\r\n    console.debug(\"[LicenseController][getById] Fetching license by ID:\", req.params.id);\r\n    try {\r\n      const license = await this.findByIdLicense(req.params.id);\r\n      console.debug(\"[LicenseController][getById] License fetched:\", license);\r\n      license ? res.json(license) : res.status(404).json({ error: req.t(\"errors:license_not_found\") });\r\n    } catch (error) {\r\n      console.debug(\"[LicenseController][getById] Error:\", error);\r\n      res.status(500).json({ error: req.t(\"errors:failed_to_fetch_license\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Retrieves a license by its key.\r\n   * @param req - The request object containing the license key.\r\n   * @param res - The response object to send the result.\r\n   * @returns {Promise<void>} - A promise that resolves when the license is retrieved.\r\n   * @throws {Error} - Throws an error if the retrieval fails.\r\n   *\r\n   */\r\n  async getByUser(req: Request, res: Response) {\r\n    console.debug(\"[LicenseController][getByUser] Fetching licenses by userId:\", req.params.userId);\r\n    try {\r\n      const licenses = await this.findByUserIdLicense(req.params.userId);\r\n      console.debug(\"[LicenseController][getByUser] Licenses fetched:\", licenses);\r\n      res.json(licenses);\r\n    } catch (error) {\r\n      console.debug(\"[LicenseController][getByUser] Error:\", error);\r\n      res.status(500).json({ error: req.t(\"errors:failed_to_fetch_user_licenses\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Updates a license by its ID.\r\n   * @param req - The request object containing the license ID and update data.\r\n   * @param res - The response object to send the result.\r\n   * @returns {Promise<void>} - A promise that resolves when the license is updated.\r\n   * @throws {Error} - Throws an error if the update fails.\r\n   *\r\n   */\r\n  async update(req: Request, res: Response) {\r\n    console.debug(\"[LicenseController][update] Updating license ID:\", req.params.id, \"with body:\", req.body);\r\n    try {\r\n      const dto: UpdateLicenseDto = req.body;\r\n      console.debug(\"[LicenseController][update] DTO prepared:\", dto);\r\n      const license = await this.updateLicense(req.params.id, dto);\r\n      console.debug(\"[LicenseController][update] License updated:\", license);\r\n      res.json(license);\r\n    } catch (error) {\r\n      console.debug(\"[LicenseController][update] Error:\", error);\r\n      res.status(500).json({ error: req.t(\"errors:failed_to_update_license\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Deletes a license by its ID.\r\n   * @param req - The request object containing the license ID.\r\n   * @param res - The response object to send the result.\r\n   * @returns {Promise<void>} - A promise that resolves when the license is deleted.\r\n   * @throws {Error} - Throws an error if the deletion fails.\r\n   *\r\n   */\r\n  async delete(req: Request, res: Response) {\r\n    console.debug(\"[LicenseController][delete] Deleting license ID:\", req.params.id);\r\n    try {\r\n      await this.deleteLicense(req.params.id);\r\n      console.debug(\"[LicenseController][delete] License deleted\");\r\n      res.status(204).send();\r\n    } catch (error) {\r\n      console.debug(\"[LicenseController][delete] Error:\", error);\r\n      res.status(500).json({ error: req.t(\"errors:failed_to_delete_license\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Validates a license key and hardware ID.\r\n   * @param req - The request object containing the license key and hardware ID.\r\n   * @param res - The response object to send the result.\r\n   * @returns {Promise<void>} - A promise that resolves when the validation is complete.\r\n   * @throws {Error} - Throws an error if the validation fails.\r\n   *\r\n   */\r\n  async validate(req: Request, res: Response) {\r\n    console.debug(\"[LicenseController][validate] Validating license key:\", req.params.key, \"with HWID:\", req.body.hwid);\r\n    try {\r\n      const isValid = await this.validateLicense(req.params.key, req.body.hwid);\r\n      console.debug(\"[LicenseController][validate] Validation result:\", isValid);\r\n      isValid\r\n        ? res.status(200).json({ valid: true })\r\n        : res.status(403).json({ valid: false, error: req.t(\"errors:license_validation_failed\") });\r\n    } catch (error) {\r\n      console.debug(\"[LicenseController][validate] Error:\", error);\r\n      res.status(500).json({ error: \"License validation failed\" });\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"4e4e8d41-1345-5959-91fd-45e7d6cee73d"}
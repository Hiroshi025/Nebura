{"version":3,"file":"devs.controllers.js","sources":["src/interfaces/http/controllers/admin/devs.controllers.ts"],"sourceRoot":"/","sourcesContent":["import apicache from \"apicache\";\r\nimport { Request, Response } from \"express\";\r\n\r\nimport { main } from \"@/main\";\r\n\r\n/**\r\n * Controller for developer and security-related administrative endpoints.\r\n *\r\n * Provides endpoints for retrieving license information, IP address information,\r\n * and cache statistics for debugging and monitoring purposes.\r\n *\r\n * @example\r\n * // Usage with Express:\r\n * app.get('/admin/license/:licenseKey', securityController.getLicenseInfo);\r\n * app.get('/admin/ip/:ipAddress', securityController.getIpInfo);\r\n * app.get('/admin/cache/info', securityController.cacheInfo);\r\n * app.get('/admin/cache/index', securityController.cacheIndex);\r\n */\r\nexport class SecurityController {\r\n  /**\r\n   * Retrieves detailed information about a license, including associated user/admin and usage stats.\r\n   *\r\n   * @param req - Express Request object with `licenseKey` in params.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with license info, blocked IPs, and usage stats.\r\n   *\r\n   * @example\r\n   * // GET /admin/license/abc123\r\n   * // Response:\r\n   * // {\r\n   * //   license: {...},\r\n   * //   blockedIPs: [...],\r\n   * //   usageStats: { requestCount: 10, requestLimit: 100, lastUsedIp: \"1.2.3.4\" }\r\n   * // }\r\n   */\r\n  async getLicenseInfo(req: Request, res: Response) {\r\n    console.debug(\"[SecurityController][getLicenseInfo] Params:\", req.params);\r\n    try {\r\n      const { licenseKey } = req.params;\r\n      console.debug(\"[SecurityController][getLicenseInfo] Fetching license:\", licenseKey);\r\n      const license = await main.prisma.license.findUnique({\r\n        where: { id: licenseKey },\r\n      });\r\n\r\n      if (!license) {\r\n        console.debug(\"[SecurityController][getLicenseInfo] License not found:\", licenseKey);\r\n        return res.status(404).json({ error: req.t(\"errors:license_not_found\") });\r\n      }\r\n\r\n      console.debug(\"[SecurityController][getLicenseInfo] License found:\", license);\r\n\r\n      const blockedIPs = await main.prisma.blockedIP.findMany({\r\n        where: {\r\n          ipAddress: { in: [] }, // Adjusted to avoid referencing a non-existent property\r\n        },\r\n      });\r\n\r\n      console.debug(\"[SecurityController][getLicenseInfo] Blocked IPs fetched:\", blockedIPs);\r\n\r\n      const usageStats = {\r\n        requestCount: license.requestCount,\r\n        requestLimit: license.requestLimit,\r\n        lastUsedIp: license.lastUsedIp,\r\n      };\r\n      console.debug(\"[SecurityController][getLicenseInfo] Usage stats:\", usageStats);\r\n\r\n      return res.json({\r\n        license,\r\n        blockedIPs,\r\n        usageStats,\r\n      });\r\n    } catch (error) {\r\n      console.debug(\"[SecurityController][getLicenseInfo] Error:\", error);\r\n      return res.status(500).json({ error: req.t(\"errors:failed_to_retrieve_license_info\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about a specific IP address, including block status,\r\n   * related user, failed attempts, and license usage.\r\n   *\r\n   * @param req - Express Request object with `ipAddress` in params.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with IP info, block status, and usage.\r\n   *\r\n   * @example\r\n   * // GET /admin/ip/1.2.3.4\r\n   * // Response:\r\n   * // {\r\n   * //   ipAddress: \"1.2.3.4\",\r\n   * //   isBlocked: true,\r\n   * //   blockedInfo: {...},\r\n   * //   failedAttempts: 5,\r\n   * //   licenseUsage: [...]\r\n   * // }\r\n   */\r\n  async getIpInfo(req: Request, res: Response) {\r\n    console.debug(\"[SecurityController][getIpInfo] Params:\", req.params);\r\n    try {\r\n      const { ipAddress } = req.params;\r\n      console.debug(\"[SecurityController][getIpInfo] Fetching blocked info for IP:\", ipAddress);\r\n\r\n      const blockedInfo = await main.prisma.blockedIP.findFirst({\r\n        where: { ipAddress },\r\n        include: { blockedUser: { select: { id: true, name: true } } },\r\n      });\r\n\r\n      if (!blockedInfo) {\r\n        console.debug(\"[SecurityController][getIpInfo] IP not found or not blocked:\", ipAddress);\r\n        return res.status(404).json({\r\n          data: null,\r\n          error: req.t(\"errors:ip_not_found\"),\r\n        });\r\n      }\r\n\r\n      console.debug(\"[SecurityController][getIpInfo] Blocked info found:\", blockedInfo);\r\n\r\n      const failedAttempts = await main.prisma.failedAttempt.count({\r\n        where: { ipAddress },\r\n      });\r\n      console.debug(\"[SecurityController][getIpInfo] Failed attempts:\", failedAttempts);\r\n\r\n      const licenseUsage = await main.prisma.license.findMany({\r\n        where: { lastUsedIp: ipAddress },\r\n        select: { id: true, type: true },\r\n      });\r\n      console.debug(\"[SecurityController][getIpInfo] License usage:\", licenseUsage);\r\n\r\n      return res.json({\r\n        ipAddress,\r\n        isBlocked: !!blockedInfo,\r\n        blockedInfo,\r\n        failedAttempts,\r\n        licenseUsage,\r\n      });\r\n    } catch (error) {\r\n      console.debug(\"[SecurityController][getIpInfo] Error:\", error);\r\n      return res.status(500).json({ error: req.t(\"errors:failed_to_retrieve_ip_info\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves performance statistics from the API cache.\r\n   *\r\n   * @param req - Express Request object.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with cache performance data.\r\n   *\r\n   * @example\r\n   * // GET /admin/cache/info\r\n   * // Response: { ...cachePerformance }\r\n   */\r\n  async cacheInfo(req: Request, res: Response) {\r\n    console.debug(\"[SecurityController][cacheInfo] Fetching cache performance info\");\r\n    try {\r\n      const performance = await apicache.getPerformance();\r\n      console.debug(\"[SecurityController][cacheInfo] Cache performance:\", performance);\r\n      return res.status(200).json(performance);\r\n    } catch (error) {\r\n      console.debug(\"[SecurityController][cacheInfo] Error:\", error);\r\n      return res.status(500).json({ error: req.t(\"errors:failed_to_retrieve_cache_info\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the current cache index from the API cache.\r\n   *\r\n   * @param req - Express Request object.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with the cache index.\r\n   *\r\n   * @example\r\n   * // GET /admin/cache/index\r\n   * // Response: { ...cacheIndex }\r\n   */\r\n  async cacheIndex(req: Request, res: Response) {\r\n    console.debug(\"[SecurityController][cacheIndex] Fetching cache index\");\r\n    try {\r\n      const cache = apicache.getIndex();\r\n      console.debug(\"[SecurityController][cacheIndex] Cache index:\", cache);\r\n      return res.status(200).json(cache);\r\n    } catch (error) {\r\n      console.debug(\"[SecurityController][cacheIndex] Error:\", error);\r\n      return res.status(500).json({ error: req.t(\"errors:failed_to_retrieve_cache_index\") });\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"4fc83d84-a286-56a2-bdef-614dc8b67232"}
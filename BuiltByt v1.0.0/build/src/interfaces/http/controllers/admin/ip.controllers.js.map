{"version":3,"file":"ip.controllers.js","sources":["src/interfaces/http/controllers/admin/ip.controllers.ts"],"sourceRoot":"/","sourcesContent":["import { Request, Response } from \"express\";\r\n\r\nimport { IPBlocker } from \"@/interfaces/messaging/broker/administrator\";\r\n\r\n/**\r\n * Controller for managing IP blocking and unblocking operations.\r\n *\r\n * Provides endpoints for blocking an IP address, unblocking an IP address,\r\n * and listing currently blocked IPs. Uses the singleton IPBlocker class for logic.\r\n *\r\n * @example\r\n * // Usage with Express:\r\n * app.post('/admin/ip/block', ipBlockController.blockIP);\r\n * app.delete('/admin/ip/:ipAddress/unblock', ipBlockController.unblockIP);\r\n * app.get('/admin/ip/blocked', ipBlockController.listBlockedIPs);\r\n */\r\nclass IPBlockController {\r\n  /**\r\n   * Blocks a specific IP address for a given reason and optional expiration.\r\n   *\r\n   * Expects `ipAddress`, `reason`, `userId`, and optional `expiresAt` in the request body.\r\n   * Responds with a success message or error.\r\n   *\r\n   * @param req - Express Request object with block details in body.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response indicating success or error.\r\n   *\r\n   * @example\r\n   * // POST /admin/ip/block\r\n   * // Body: { \"ipAddress\": \"1.2.3.4\", \"reason\": \"Abuse\", \"userId\": \"123\", \"expiresAt\": \"2024-07-01T00:00:00Z\" }\r\n   */\r\n  async blockIP(req: Request, res: Response) {\r\n    try {\r\n      const { ipAddress, reason, expiresAt, userId } = req.body;\r\n\r\n      await IPBlocker.getInstance().blockIP(\r\n        ipAddress,\r\n        userId,\r\n        reason,\r\n        expiresAt ? new Date(expiresAt) : undefined,\r\n      );\r\n\r\n      res.json({ success: true, message: req.t(\"common:ip_blocked_successfully\") });\r\n    } catch (error) {\r\n      res.status(500).json({ error: req.t(\"errors:failed_to_block_ip\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unblocks a specific IP address.\r\n   *\r\n   * Expects `ipAddress` in the request parameters.\r\n   * Responds with a success message or error.\r\n   *\r\n   * @param req - Express Request object with `ipAddress` in params.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response indicating success or error.\r\n   *\r\n   * @example\r\n   * // DELETE /admin/ip/1.2.3.4/unblock\r\n   */\r\n  async unblockIP(req: Request, res: Response) {\r\n    try {\r\n      const { ipAddress } = req.params;\r\n      await IPBlocker.getInstance().unblockIP(ipAddress);\r\n      res.json({ success: true, message: req.t(\"common:ip_unblocked_successfully\") });\r\n    } catch (error) {\r\n      res.status(500).json({ error: req.t(\"errors:failed_to_unblock_ip\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lists currently blocked IP addresses with pagination.\r\n   *\r\n   * Accepts optional `page` and `limit` query parameters for pagination.\r\n   * Responds with an array of blocked IPs.\r\n   *\r\n   * @param req - Express Request object with optional `page` and `limit` in query.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with the list of blocked IPs or error.\r\n   *\r\n   * @example\r\n   * // GET /admin/ip/blocked?page=1&limit=20\r\n   * // Response: [ { ipAddress: \"1.2.3.4\", ... }, ... ]\r\n   */\r\n  async listBlockedIPs(req: Request, res: Response) {\r\n    try {\r\n      const { page = 1, limit = 20 } = req.query;\r\n      const ips = await IPBlocker.getInstance().getBlockedIPs(Number(page), Number(limit));\r\n      res.json(ips);\r\n    } catch (error) {\r\n      res.status(500).json({ error: req.t(\"errors:failed_to_retrieve_blocked_ips\") });\r\n    }\r\n  }\r\n}\r\n\r\nexport default new IPBlockController();\r\n"],"names":[],"mappings":";;;;AAEA,+EAAwE;AAExE;;;;;;;;;;;GAWG;AACH,MAAM,iBAAiB;IACrB;;;;;;;;;;;;;OAaG;IACH,KAAK,CAAC,OAAO,CAAC,GAAY,EAAE,GAAa;QACvC,IAAI,CAAC;YACH,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAE1D,MAAM,yBAAS,CAAC,WAAW,EAAE,CAAC,OAAO,CACnC,SAAS,EACT,MAAM,EACN,MAAM,EACN,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAC5C,CAAC;YAEF,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,gCAAgC,CAAC,EAAE,CAAC,CAAC;QAChF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,2BAA2B,CAAC,EAAE,CAAC,CAAC;QACtE,CAAC;IACH,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,KAAK,CAAC,SAAS,CAAC,GAAY,EAAE,GAAa;QACzC,IAAI,CAAC;YACH,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YACjC,MAAM,yBAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YACnD,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,kCAAkC,CAAC,EAAE,CAAC,CAAC;QAClF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC;QACxE,CAAC;IACH,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,KAAK,CAAC,cAAc,CAAC,GAAY,EAAE,GAAa;QAC9C,IAAI,CAAC;YACH,MAAM,EAAE,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,EAAE,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;YAC3C,MAAM,GAAG,GAAG,MAAM,yBAAS,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACrF,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,uCAAuC,CAAC,EAAE,CAAC,CAAC;QAClF,CAAC;IACH,CAAC;CACF;AAED,kBAAe,IAAI,iBAAiB,EAAE,CAAC","debug_id":"b58cd2f4-0980-5fa9-a04b-a694d9627051"}
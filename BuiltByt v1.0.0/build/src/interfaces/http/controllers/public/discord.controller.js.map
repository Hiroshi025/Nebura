{"version":3,"file":"discord.controller.js","sources":["src/interfaces/http/controllers/public/discord.controller.ts"],"sourceRoot":"/","sourcesContent":["import { Request, Response } from \"express\";\r\n\r\nimport { DiscordStatusOutputDTO, DiscordUpdateOutputDTO } from \"@/application/dto/discord.dto\";\r\nimport { DiscordService } from \"@services/utilities/discord.service\";\r\n\r\n/**\r\n * Controller for handling Discord status, updates, and incidents endpoints.\r\n *\r\n * Provides methods to fetch the current Discord status, recent updates, and incidents,\r\n * both for HTTP endpoints and for internal use.\r\n *\r\n * @remarks\r\n * This controller interacts with the DiscordService to retrieve data from Discord's status API.\r\n *\r\n * @example\r\n * const controller = new DiscordController();\r\n * app.get('/discord/status', controller.getStatus);\r\n */\r\nexport class DiscordController extends DiscordService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Express route handler to get the current Discord status.\r\n   *\r\n   * Responds with a JSON object containing the mapped status, message, and last update timestamp.\r\n   * Handles errors by returning a localized error message.\r\n   *\r\n   * @param req - Express Request object, extended with translation function.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with the current Discord status.\r\n   */\r\n  public getStatus = async (req: Request, res: Response) => {\r\n    try {\r\n      const status = await this.getCurrentStatus();\r\n\r\n      const output: DiscordStatusOutputDTO = {\r\n        status: this.mapStatusIndicator(status.indicator),\r\n        message: status.description,\r\n        lastUpdated: status.lastUpdated.toISOString(),\r\n      };\r\n\r\n      res.status(200).json(output);\r\n    } catch (error) {\r\n      res.status(500).json({ error: req.t(\"errors:failed_to_fetch_discord_status\") });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Express route handler to get the latest Discord updates.\r\n   *\r\n   * Responds with a JSON array of update objects, each containing title, summary, link, date, and type.\r\n   * Handles errors by returning a localized error message.\r\n   *\r\n   * @param req - Express Request object, extended with translation function.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with the latest Discord updates.\r\n   */\r\n  public getUpdates = async (req: Request, res: Response) => {\r\n    try {\r\n      const updates = await this.getLatestUpdates();\r\n\r\n      const output: DiscordUpdateOutputDTO[] = updates.map((update) => ({\r\n        title: update.title,\r\n        summary: update.description,\r\n        link: update.url,\r\n        date: update.date.toISOString(),\r\n        type: update.type,\r\n      }));\r\n\r\n      res.status(200).json(output);\r\n    } catch (error) {\r\n      res.status(500).json({ error: req.t(\"errors:failed_to_fetch_discord_updates\") });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Express route handler to get the current active Discord incidents.\r\n   *\r\n   * Responds with a JSON array of incident objects, each containing title, summary, link, date, and type.\r\n   * Handles errors by returning a localized error message.\r\n   *\r\n   * @param req - Express Request object, extended with translation function.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with the current Discord incidents.\r\n   */\r\n  public getIncidents = async (req: Request, res: Response) => {\r\n    try {\r\n      const incidents = await this.getActiveIncidents();\r\n\r\n      const output: DiscordUpdateOutputDTO[] = incidents.map((incident) => ({\r\n        title: incident.title,\r\n        summary: incident.description,\r\n        link: incident.url,\r\n        date: incident.date.toISOString(),\r\n        type: \"incident\",\r\n      }));\r\n\r\n      res.status(200).json(output);\r\n    } catch (error) {\r\n      res.status(500).json({ error: req.t(\"errors:failed_to_fetch_discord_incidents\") });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Retrieves the most recent Discord status for internal use.\r\n   *\r\n   * @returns {Promise<DiscordStatusOutputDTO>} The current Discord status object.\r\n   */\r\n  public getRecentStatus = async (): Promise<DiscordStatusOutputDTO> => {\r\n    const status = await this.getCurrentStatus();\r\n    return {\r\n      status: this.mapStatusIndicator(status.indicator),\r\n      message: status.description,\r\n      lastUpdated: status.lastUpdated.toISOString(),\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Retrieves the most recent Discord updates from the last 24 hours for internal use.\r\n   *\r\n   * @returns {Promise<DiscordUpdateOutputDTO[]>} Array of recent update objects.\r\n   */\r\n  public getRecentUpdates = async (): Promise<DiscordUpdateOutputDTO[]> => {\r\n    const updates = await this.getLatestUpdates();\r\n    const recentUpdates = updates.filter((update) => {\r\n      const now = new Date();\r\n      const diff = now.getTime() - update.date.getTime();\r\n      return diff <= 24 * 60 * 60 * 1000; // Últimas 24 horas\r\n    });\r\n    return recentUpdates.map((update) => ({\r\n      title: update.title,\r\n      summary: update.description,\r\n      link: update.url,\r\n      date: update.date.toISOString(),\r\n      type: update.type,\r\n    }));\r\n  };\r\n\r\n  /**\r\n   * Retrieves the most recent Discord incidents from the last 24 hours for internal use.\r\n   *\r\n   * @returns {Promise<DiscordUpdateOutputDTO[]>} Array of recent incident objects.\r\n   */\r\n  public getRecentIncidents = async (): Promise<DiscordUpdateOutputDTO[]> => {\r\n    const incidents = await this.getActiveIncidents();\r\n    const recentIncidents = incidents.filter((incident) => {\r\n      const now = new Date();\r\n      const diff = now.getTime() - incident.date.getTime();\r\n      return diff <= 24 * 60 * 60 * 1000; // Últimas 24 horas\r\n    });\r\n    return recentIncidents.map((incident) => ({\r\n      title: incident.title,\r\n      summary: incident.description,\r\n      link: incident.url,\r\n      date: incident.date.toISOString(),\r\n      type: \"incident\",\r\n    }));\r\n  };\r\n\r\n  /**\r\n   * Maps a Discord status indicator string to a standardized status value.\r\n   *\r\n   * @param indicator - The status indicator from Discord (\"none\", \"minor\", \"major\", \"critical\").\r\n   * @returns {\"operational\" | \"degraded\" | \"outage\"} The mapped status value.\r\n   */\r\n  private mapStatusIndicator(indicator: string): DiscordStatusOutputDTO[\"status\"] {\r\n    switch (indicator) {\r\n      case \"none\":\r\n        return \"operational\";\r\n      case \"minor\":\r\n        return \"degraded\";\r\n      case \"major\":\r\n      case \"critical\":\r\n      default:\r\n        return \"outage\";\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"037b18d9-e851-5747-8e3b-68ecb58b77ac"}
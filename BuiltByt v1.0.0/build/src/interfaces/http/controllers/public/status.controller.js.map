{"version":3,"file":"status.controller.js","sources":["src/interfaces/http/controllers/public/status.controller.ts"],"sourceRoot":"/","sourcesContent":["import { Request, Response } from \"express\";\r\nimport os from \"os\";\r\nimport process from \"process\";\r\n\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\nimport _package from \"../../../../../package.json\";\r\n\r\n/**\r\n * Extends the Express Request interface to include the 't' property for translations.\r\n * @module ExpressRequestExtension\r\n */\r\ndeclare module \"express-serve-static-core\" {\r\n  interface Request {\r\n    /**\r\n     * Translation function for internationalization.\r\n     * @param key - The translation key.\r\n     * @returns The translated string.\r\n     */\r\n    t: (key: string) => string;\r\n  }\r\n}\r\n\r\n/**\r\n * Prisma client instance for database operations.\r\n * @internal\r\n */\r\nconst prisma = new PrismaClient();\r\n\r\n/**\r\n * Controller responsible for providing status and health information about the API and system.\r\n *\r\n * This controller exposes endpoints to check the operational status of the API,\r\n * database connectivity, and system resource usage.\r\n *\r\n * @example\r\n * const controller = new StatusController();\r\n * app.get('/status', controller.getStatus);\r\n */\r\nexport class StatusController {\r\n  /**\r\n   * The timestamp when the controller instance was created.\r\n   * Used to calculate uptime and provide meta information.\r\n   * @readonly\r\n   */\r\n  private readonly startTime: Date = new Date();\r\n\r\n  /**\r\n   * Initializes a new instance of the StatusController class.\r\n   * Binds all methods to ensure correct 'this' context when used as route handlers.\r\n   */\r\n  constructor() {\r\n    // Bind all methods to ensure proper 'this' context\r\n    this.getStatus = this.getStatus.bind(this);\r\n    this.checkDatabase = this.checkDatabase.bind(this);\r\n    this.getSystemInfo = this.getSystemInfo.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Checks the health and connectivity of the database.\r\n   *\r\n   * Attempts to connect to the database using Prisma and measures the response time.\r\n   * Returns an object indicating the health status and response time or error details.\r\n   *\r\n   * @async\r\n   * @returns {Promise<{status: string, responseTime?: string, error?: string}>}\r\n   * An object containing the database health status, response time (if healthy), or error message (if unhealthy).\r\n   */\r\n  private checkDatabase = async () => {\r\n    try {\r\n      const start = Date.now();\r\n      await prisma.$connect();\r\n      const responseTime = Date.now() - start;\r\n      return {\r\n        status: \"healthy\",\r\n        responseTime: `${responseTime}ms`,\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        status: \"unhealthy\",\r\n        error: error.message,\r\n      };\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Retrieves detailed system information and resource usage.\r\n   *\r\n   * Gathers data such as platform, architecture, Node.js version, memory usage,\r\n   * uptime, CPU usage, system load, and memory statistics.\r\n   *\r\n   * @returns {object} An object containing system information and resource metrics.\r\n   */\r\n  private getSystemInfo = () => {\r\n    return {\r\n      platform: process.platform,\r\n      arch: process.arch,\r\n      nodeVersion: process.version,\r\n      memoryUsage: process.memoryUsage(),\r\n      uptime: process.uptime(),\r\n      cpuUsage: process.cpuUsage(),\r\n      systemLoad: os.loadavg(),\r\n      freeMemory: os.freemem(),\r\n      totalMemory: os.totalmem(),\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Express route handler that returns the operational status of the API.\r\n   *\r\n   * Responds with a JSON object containing:\r\n   * - API operational status (translated)\r\n   * - Current timestamp\r\n   * - API uptime\r\n   * - Database health and response time\r\n   * - System information (platform, memory, CPU, etc.)\r\n   * - Meta information (API version, environment, start time, timezone)\r\n   *\r\n   * Sets CORS headers to allow all origins.\r\n   *\r\n   * @param req - Express Request object, extended with translation function.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with status and system information.\r\n   *\r\n   * @example\r\n   * // Example response:\r\n   * {\r\n   *   \"status\": \"Operational\",\r\n   *   \"timestamp\": \"2024-06-01T12:00:00.000Z\",\r\n   *   \"uptime\": 123.456,\r\n   *   \"database\": { \"status\": \"healthy\", \"responseTime\": \"10ms\" },\r\n   *   \"system\": {\r\n   *     \"platform\": \"linux\",\r\n   *     \"arch\": \"x64\",\r\n   *     ...\r\n   *   },\r\n   *   \"meta\": {\r\n   *     \"apiVersion\": \"1.0.0\",\r\n   *     \"environment\": \"development\",\r\n   *     \"startTime\": \"2024-06-01T11:58:00.000Z\",\r\n   *     \"timezone\": \"Europe/Madrid\"\r\n   *   }\r\n   * }\r\n   */\r\n  public getStatus = async (req: Request, res: Response) => {\r\n    try {\r\n      const [databaseStatus, systemInfo] = await Promise.all([\r\n        this.checkDatabase(),\r\n        this.getSystemInfo(),\r\n      ]);\r\n\r\n      const projectInfo = {\r\n        name: _package.name,\r\n        description: _package.description,\r\n        author: _package.author,\r\n        repository: _package.repository?.url || \"\",\r\n      };\r\n\r\n      res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n      res.status(200).json({\r\n        status: req.t(\"status.operational\"),\r\n        timestamp: new Date(),\r\n        uptime: process.uptime(),\r\n        database: databaseStatus,\r\n        system: {\r\n          ...systemInfo,\r\n          hostname: os.hostname(),\r\n          networkInterfaces: os.networkInterfaces(),\r\n        },\r\n        project: projectInfo,\r\n        meta: {\r\n          apiVersion: process.env.API_VERSION || _package.version,\r\n          environment: process.env.NODE_ENV || \"development\",\r\n          startTime: this.startTime,\r\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n        },\r\n      });\r\n    } catch (error: any) {\r\n      res.status(500).json({\r\n        status: req.t(\"status.error\"),\r\n        message: req.t(\"status.failed_to_retrieve\"),\r\n        error: error.message,\r\n      });\r\n    }\r\n  };\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"32619401-5cc9-5969-88e6-8cb54f1a5c64"}
{"version":3,"file":"google.controllers.js","sources":["src/interfaces/http/controllers/asistent/google.controllers.ts"],"sourceRoot":"/","sourcesContent":["import { Response } from \"express\";\r\nimport multer from \"multer\";\r\n\r\nimport { GeminiService } from \"@/application/services/asistent/google.service\";\r\nimport { AuthenticatedRequest } from \"@typings/modules/api\";\r\n\r\nimport { GoogleBody } from \"../../../../typings/services/google\";\r\n\r\nconst upload = multer();\r\n\r\n/**\r\n * Controller for handling Google Gemini Assistant requests.\r\n *\r\n * Provides endpoints for processing text, files, and combined text-file requests\r\n * using the GeminiService. Handles file uploads via multer and expects authentication\r\n * and Gemini configuration to be present in the request.\r\n *\r\n * @example\r\n * // Usage with Express:\r\n * app.post('/api/gemini/text', GeminiController.processText);\r\n * app.post('/api/gemini/file', GeminiController.processFile);\r\n * app.post('/api/gemini/combined', GeminiController.processCombined);\r\n */\r\nexport class GeminiController extends GeminiService {\r\n  constructor() {\r\n    super();\r\n  }\r\n  /**\r\n   * Processes a text-only request using the GeminiService.\r\n   *\r\n   * Expects `text` and optionally `systemInstruction` in the request body.\r\n   * Uses Gemini configuration from the authenticated request.\r\n   *\r\n   * @param req - AuthenticatedRequest containing text and Gemini config.\r\n   * @param res - Express Response object.\r\n   *\r\n   * @example\r\n   * // Request body:\r\n   * // { \"text\": \"Hello, Gemini!\", \"systemInstruction\": \"Be concise.\" }\r\n   */\r\n  static async processText(req: AuthenticatedRequest, res: Response) {\r\n    try {\r\n      const { text, systemInstruction } = req.body as GoogleBody;\r\n      const result = await this.prototype.textGoogle(text, {\r\n        apiKey: req.geminiConfig!.apiKey,\r\n        model: req.geminiConfig!.model,\r\n        systemInstruction,\r\n        apiKeyHash: req.geminiConfig!.apiKeyHash,\r\n      });\r\n\r\n      return res.status(200).json(result);\r\n    } catch (error) {\r\n      return res.status(500).json({ error: \"Failed to process text\" });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Processes a file upload request using the GeminiService.\r\n   *\r\n   * Expects a file in the `file` field of the multipart form-data and optionally\r\n   * `text` and `systemInstruction` in the body. Uses Gemini configuration from the authenticated request.\r\n   *\r\n   * Handles file upload errors and missing file scenarios.\r\n   *\r\n   * @param req - AuthenticatedRequest with file and Gemini config.\r\n   * @param res - Express Response object.\r\n   *\r\n   * @example\r\n   * // Form-data:\r\n   * // file: <uploaded file>\r\n   * // text: \"Describe this image\"\r\n   */\r\n  static async processFile(req: AuthenticatedRequest, res: Response) {\r\n    try {\r\n      upload.single(\"file\")(req, res, async (err: any) => {\r\n        if (err) {\r\n          return res.status(400).json({ error: \"File upload failed\" });\r\n        }\r\n\r\n        if (!req.file) {\r\n          return res.status(400).json({ error: \"No file uploaded\" });\r\n        }\r\n\r\n        const { text, systemInstruction } = req.body as GoogleBody;\r\n        const result = await this.prototype.fileGoogle(\r\n          req.file.buffer,\r\n          req.file.mimetype,\r\n          text || \"Default text\",\r\n          {\r\n            apiKey: req.geminiConfig!.apiKey,\r\n            model: req.geminiConfig!.model,\r\n            systemInstruction,\r\n            apiKeyHash: req.geminiConfig!.apiKeyHash,\r\n          },\r\n        );\r\n\r\n        return res.status(200).json(result);\r\n      });\r\n    } catch (error) {\r\n      res.status(500).json({ error: \"Failed to process file\" });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Processes a combined text and file request using the GeminiService.\r\n   *\r\n   * Expects a file in the `file` field and `text` in the body, along with optional\r\n   * `systemInstruction`. Uses Gemini configuration from the authenticated request.\r\n   *\r\n   * Handles file upload errors and missing file scenarios.\r\n   *\r\n   * @param req - AuthenticatedRequest with file, text, and Gemini config.\r\n   * @param res - Express Response object.\r\n   *\r\n   * @example\r\n   * // Form-data:\r\n   * // file: <uploaded file>\r\n   * // text: \"Analyze this document\"\r\n   */\r\n  static async processCombined(req: AuthenticatedRequest, res: Response) {\r\n    try {\r\n      upload.single(\"file\")(req, res, async (err: any) => {\r\n        if (err) {\r\n          return res.status(400).json({ error: \"File upload failed\" });\r\n        }\r\n\r\n        if (!req.file) {\r\n          return res.status(400).json({ error: \"No file uploaded\" });\r\n        }\r\n\r\n        const { text, systemInstruction } = req.body as GoogleBody;\r\n        const result = await this.prototype.combinedGoogle(\r\n          text,\r\n          req.file.buffer,\r\n          req.file.mimetype,\r\n          {\r\n            apiKey: req.geminiConfig!.apiKey,\r\n            model: req.geminiConfig!.model,\r\n            systemInstruction,\r\n            apiKeyHash: req.geminiConfig!.apiKeyHash,\r\n          },\r\n        );\r\n\r\n        return res.status(200).json(result);\r\n      });\r\n    } catch (error) {\r\n      res.status(500).json({ error: \"Failed to process combined request\" });\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"e13dbce0-8082-5194-a8eb-fdfb62029ef5"}
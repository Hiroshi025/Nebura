{"version":3,"file":"tasks.controllers.js","sources":["src/interfaces/http/controllers/asistent/tasks.controllers.ts"],"sourceRoot":"/","sourcesContent":["import { Request, Response } from \"express\";\r\n\r\nimport { CreateTaskDto } from \"@/application/dto/tasks/create-task.dto\";\r\nimport { TaskResponseDto } from \"@/application/dto/tasks/task-response.dto\";\r\nimport { UpdateTaskDto } from \"@/application/entities/tasks/update-task.dto\";\r\nimport { TaskService } from \"@/application/services/utilities/task.service\";\r\n\r\n/**\r\n * Controller for handling task-related HTTP requests.\r\n *\r\n * Provides endpoints for creating, retrieving, updating, and deleting tasks.\r\n * Uses the TaskService for business logic and data persistence.\r\n *\r\n * @example\r\n * // Usage with Express:\r\n * app.post('/api/tasks', taskController.createTask);\r\n * app.get('/api/tasks/:id', taskController.getTask);\r\n * app.get('/api/tasks', taskController.getAllTasks);\r\n * app.put('/api/tasks/:id', taskController.updateTask);\r\n * app.delete('/api/tasks/:id', taskController.deleteTask);\r\n */\r\nexport class TaskController extends TaskService {\r\n  /**\r\n   * Creates a new task.\r\n   *\r\n   * Expects a CreateTaskDto in the request body.\r\n   * Responds with the created task in TaskResponseDto format.\r\n   *\r\n   * @param req - Express Request object containing the task data.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with the created task or error message.\r\n   *\r\n   * @example\r\n   * // Request body:\r\n   * // { \"title\": \"New Task\", \"description\": \"...\", ... }\r\n   * // Response:\r\n   * // { id: \"...\", title: \"New Task\", ... }\r\n   */\r\n  async createTask(req: Request, res: Response) {\r\n    try {\r\n      const createTaskDto: CreateTaskDto = req.body;\r\n      const task = await this.create(createTaskDto);\r\n      res.status(201).json(new TaskResponseDto(task));\r\n    } catch (error) {\r\n      res.status(500).json({ message: req.t(\"errors:failed_to_create_task\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves a task by its ID.\r\n   *\r\n   * Expects the task ID in the request parameters.\r\n   * Responds with the task in TaskResponseDto format or a 404 if not found.\r\n   *\r\n   * @param req - Express Request object with task ID in params.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with the task or error message.\r\n   *\r\n   * @example\r\n   * // GET /api/tasks/123\r\n   * // Response:\r\n   * // { id: \"123\", title: \"Task Title\", ... }\r\n   */\r\n  async getTask(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      const task = await this.getById(id);\r\n      if (!task) {\r\n        return res.status(404).json({ message: req.t(\"errors:task_not_found\") });\r\n      }\r\n      return res.json(new TaskResponseDto(task));\r\n    } catch (error) {\r\n      return res.status(500).json({ message: req.t(\"errors:failed_to_fetch_task\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves all tasks, optionally filtered by status, priority, creator, or tag.\r\n   *\r\n   * Accepts query parameters for filtering.\r\n   * Responds with an array of TaskResponseDto objects.\r\n   *\r\n   * @param req - Express Request object with optional query filters.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with the list of tasks or error message.\r\n   *\r\n   * @example\r\n   * // GET /api/tasks?status=completed&priority=high\r\n   * // Response:\r\n   * // [ { id: \"...\", title: \"...\", ... }, ... ]\r\n   */\r\n  async getAllTasks(req: Request, res: Response) {\r\n    try {\r\n      // Cambia 'tags' por 'tag' para que coincida con el tipo Task\r\n      const { status, priority, createdBy, tag } = req.query as any;\r\n      const tasks = await this.get({\r\n        status: status,\r\n        priority: priority,\r\n        createdBy: createdBy,\r\n        tag: tag,\r\n      });\r\n      return res.json(tasks.map((task) => new TaskResponseDto(task)));\r\n    } catch (error) {\r\n      return res.status(500).json({ message: req.t(\"errors:failed_to_fetch_tasks\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates an existing task by its ID.\r\n   *\r\n   * Expects the task ID in the request parameters and an UpdateTaskDto in the body.\r\n   * Responds with the updated task in TaskResponseDto format.\r\n   *\r\n   * @param req - Express Request object with task ID in params and update data in body.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a JSON response with the updated task or error message.\r\n   *\r\n   * @example\r\n   * // PUT /api/tasks/123\r\n   * // Request body:\r\n   * // { \"title\": \"Updated Title\", ... }\r\n   * // Response:\r\n   * // { id: \"123\", title: \"Updated Title\", ... }\r\n   */\r\n  async updateTask(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      const updateTaskDto: UpdateTaskDto = req.body;\r\n      const task = await this.update(id, updateTaskDto);\r\n      res.json(new TaskResponseDto(task));\r\n    } catch (error) {\r\n      res.status(500).json({ message: req.t(\"errors:failed_to_update_task\") });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes a task by its ID.\r\n   *\r\n   * Expects the task ID in the request parameters.\r\n   * Responds with HTTP 204 No Content on success.\r\n   *\r\n   * @param req - Express Request object with task ID in params.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<void>} Sends a 204 status or error message.\r\n   *\r\n   * @example\r\n   * // DELETE /api/tasks/123\r\n   * // Response: 204 No Content\r\n   */\r\n  async deleteTask(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      await this.delete(id);\r\n      res.status(204).send();\r\n    } catch (error) {\r\n      res.status(500).json({ message: req.t(\"errors:failed_to_delete_task\") });\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"9daa6f71-8a7b-5d30-a735-876f2cdf09bb"}
{"version":3,"file":"auth.controllers.js","sources":["src/interfaces/http/controllers/auth/auth.controllers.ts"],"sourceRoot":"/","sourcesContent":["import { Request, Response } from \"express\";\r\n\r\nimport { ErrorResponse } from \"@/adapters/validators/user\";\r\nimport { AuthService } from \"@/application/services/auth/auth.service\";\r\n\r\n/**\r\n * Controller for handling authentication-related HTTP requests.\r\n *\r\n * Provides endpoints for user login, registration, and profile retrieval.\r\n * Utilizes the AuthService for business logic and ensures consistent error handling.\r\n *\r\n * @example\r\n * const controller = new AuthController();\r\n * app.post('/api/auth/login', controller.login);\r\n * app.post('/api/auth/register', controller.register);\r\n * app.get('/api/auth/:id', controller.getUserProfile);\r\n */\r\nexport class AuthController extends AuthService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Handles user login requests.\r\n   *\r\n   * @route POST /api/auth/login\r\n   * @access Public\r\n   * @param req - Express Request object containing user credentials in the body.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<Response>} A promise resolving to the HTTP response.\r\n   *\r\n   * @example\r\n   * // Request body:\r\n   * // { \"email\": \"user@example.com\", \"password\": \"secret\" }\r\n   * // Response:\r\n   * // { success: true, data: { token: \"...\", user: {...} }, message: \"Login successful\" }\r\n   */\r\n  async login(req: Request, res: Response): Promise<Response> {\r\n    try {\r\n      const { email, password } = req.body;\r\n\r\n      const result = await this.loginAuth({ email, password });\r\n\r\n      if (\"error\" in result) {\r\n        return this.handleErrorResponse(req, res, result as ErrorResponse);\r\n      }\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: {\r\n          token: result.token,\r\n          user: result.user,\r\n        },\r\n        message: req.t(\"auth.login.success\"), // Mensaje de éxito desde common.json\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        success: false,\r\n        error: \"SERVER_ERROR\",\r\n        message: req.t(\"errors.server_error\"), // Mensaje de error desde errors.json\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles new user registration requests.\r\n   *\r\n   * @route POST /api/auth/register\r\n   * @access Public\r\n   * @param req - Express Request object containing user registration data in the body.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<Response>} A promise resolving to the HTTP response.\r\n   *\r\n   * @example\r\n   * // Request body:\r\n   * // { \"email\": \"user@example.com\", \"password\": \"secret\", ... }\r\n   * // Response:\r\n   * // { success: true, data: {...}, message: \"Registration successful\" }\r\n   */\r\n  async register(req: Request, res: Response): Promise<Response> {\r\n    try {\r\n      const userData = req.body;\r\n\r\n      const result = await this.createAuth(userData);\r\n\r\n      if (\"error\" in result) {\r\n        return this.handleErrorResponse(req, res, result as ErrorResponse);\r\n      }\r\n\r\n      return res.status(201).json({\r\n        success: true,\r\n        data: result.user,\r\n        message: req.t(\"auth.register.success\"),\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        success: false,\r\n        error: \"SERVER_ERROR\",\r\n        message: req.t(\"errors.server_error\"),\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves profile information for a specific user.\r\n   *\r\n   * @route GET /api/auth/:id\r\n   * @access Private (authenticated users only)\r\n   * @param req - Express Request object with user ID in params.\r\n   * @param res - Express Response object.\r\n   * @returns {Promise<Response>} A promise resolving to the HTTP response.\r\n   *\r\n   * @example\r\n   * // GET /api/auth/123\r\n   * // Response:\r\n   * // { success: true, data: {...}, message: \"Profile retrieved successfully\" }\r\n   */\r\n  async getUserProfile(req: Request, res: Response): Promise<Response> {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      const result = await this.getAuth(id);\r\n\r\n      if (\"error\" in result) {\r\n        return this.handleErrorResponse(req, res, result as ErrorResponse);\r\n      }\r\n\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result,\r\n        message: req.t(\"auth.profile.success\"),\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        success: false,\r\n        error: \"SERVER_ERROR\",\r\n        message: req.t(\"errors.server_error\"),\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles error responses in a consistent format.\r\n   *\r\n   * Maps error codes to HTTP status codes and returns a standardized error response.\r\n   *\r\n   * @param req - Express Request object.\r\n   * @param res - Express Response object.\r\n   * @param error - ErrorResponse object containing error details.\r\n   * @returns {Response} The HTTP response with error details.\r\n   *\r\n   * @example\r\n   * // Returns:\r\n   * // { success: false, error: \"USER_NOT_FOUND\", message: \"...\", details: {...} }\r\n   */\r\n  private handleErrorResponse(req: Request, res: Response, error: ErrorResponse): Response {\r\n    const statusMap: Record<string, number> = {\r\n      VALIDATION_ERROR: 400,\r\n      USER_NOT_FOUND: 404,\r\n      USER_EXISTS: 409,\r\n      INVALID_CREDENTIALS: 401,\r\n      MISSING_DATA: 400,\r\n      ENCRYPTION_ERROR: 500,\r\n      DATABASE_ERROR: 500,\r\n      INTERNAL_SERVER_ERROR: 500,\r\n    };\r\n\r\n    const statusCode = statusMap[error.error] || 500;\r\n\r\n    return res.status(statusCode).json({\r\n      success: false,\r\n      error: error.error,\r\n      message: req.t(`errors.${error.error.toLowerCase()}`), // Mensaje de error dinámico desde errors.json\r\n      details: error.details,\r\n    });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"79f497fb-fcb3-514c-b07f-35714c398438"}
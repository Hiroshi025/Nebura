{"version":3,"file":"main.js","sources":["src/main.ts"],"sourceRoot":"/","sourcesContent":["/**\r\n * Main entry point for the Nebura Application Platform client.\r\n *\r\n * This file initializes and manages the core modules of the application,\r\n * including Discord, WhatsApp, API, and database operations.\r\n *\r\n * @packageDocumentation\r\n * @module Main\r\n * @see {@link https://www.prisma.io/ | Prisma}\r\n * @see {@link https://www.npmjs.com/package/chalk | Chalk}\r\n * @see {@link https://docs.sentry.io/platforms/node/ | Sentry}\r\n */\r\n\r\nimport chalk from \"chalk\";\r\n\r\nimport { ProyectError } from \"@/shared/adapters/extends/error.extend\"; // Custom error handling class\r\nimport { Utils } from \"@/shared/class/utils\";\r\nimport emojis from \"@config/json/emojis.json\";\r\nimport { GiveawayService } from \"@modules/discord/structure/giveaway\";\r\nimport { PrismaClient } from \"@prisma/client\"; // Prisma ORM client: https://www.prisma.io/\r\nimport { loadPendingReminders } from \"@utils/functions/reminders\"; // Function to load pending reminders\r\n\r\nimport { API } from \"./\";\r\nimport { MyClient } from \"./interfaces/messaging/modules/discord/client\"; // Custom Discord client implementation\r\nimport { ErrorConsole } from \"./interfaces/messaging/modules/discord/structure/handlers/errors\"; // Error handling for Discord\r\nimport { MyApp } from \"./interfaces/messaging/modules/whatsapp\"; // WhatsApp module\r\nimport { Backups } from \"./shared/class/backups\";\r\nimport { DBPrisma } from \"./shared/class/DB\";\r\nimport { config } from \"./shared/utils/config\"; // Application configuration\r\nimport { logWithLabel } from \"./shared/utils/functions/console\"; // Logging utility\r\nimport { ProyectConfig } from \"./typings/config\"; // TypeScript type for configuration\r\n\r\nprocess.loadEnvFile(); // Load environment variables from a file\r\n\r\n/**\r\n * Default configuration object loaded from the config utility.\r\n * @type {ProyectConfig}\r\n */\r\nconst defaultConfig = config as ProyectConfig;\r\n\r\nconst { CRON_BACKUPS_TIME } = process.env;\r\n\r\n/**\r\n * Utility for detailed debug logging using environment variables.\r\n *\r\n * @param label - The label for the debug log.\r\n * @param args - Additional arguments to log.\r\n */\r\nfunction debugLog(label: string, ...args: any[]) {\r\n  if (process.env.DEBUG === \"true\") {\r\n    console.debug(`[DEBUG][${label}]`, ...args);\r\n  }\r\n}\r\n\r\n/**\r\n * Main class responsible for initializing and managing the core modules of the application.\r\n *\r\n * This class serves as the entry point for the application, orchestrating the initialization\r\n * and management of various modules such as Discord, WhatsApp, API, and database operations.\r\n *\r\n * @remarks\r\n * - The class uses Prisma ORM for database interactions.\r\n * - Sentry is used for error monitoring and reporting.\r\n * - The application supports modular architecture with Discord and WhatsApp modules.\r\n *\r\n * @see {@link https://www.prisma.io/docs | Prisma Documentation}\r\n * @see {@link https://docs.sentry.io/platforms/node/ | Sentry Documentation}\r\n * @see {@link https://www.npmjs.com/package/chalk | Chalk Documentation}\r\n */\r\nexport class Engine {\r\n  /**\r\n   * Prisma client instance for database operations.\r\n   * @readonly\r\n   */\r\n  public readonly prisma: PrismaClient;\r\n\r\n  /**\r\n   * Discord client instance.\r\n   * @readonly\r\n   */\r\n  public readonly discord: MyClient;\r\n\r\n  /**\r\n   * WhatsApp module instance.\r\n   * @readonly\r\n   */\r\n  public readonly whatsapp: MyApp;\r\n\r\n  /**\r\n   * API server instance.\r\n   * @readonly\r\n   */\r\n  public readonly api: API;\r\n\r\n  /**\r\n   * Application configuration object.\r\n   * @readonly\r\n   */\r\n  public readonly config: ProyectConfig;\r\n\r\n  /**\r\n   * Utility functions for Discord.\r\n   * @readonly\r\n   */\r\n  public readonly utils: Utils;\r\n  /**\r\n   * Database operations instance using Prisma.\r\n   * @readonly\r\n   */\r\n  public readonly DB: DBPrisma;\r\n\r\n  /**\r\n   * Initializes the core module instances.\r\n   *\r\n   * @param prisma - Instance of PrismaClient for database operations. Defaults to a new instance.\r\n   * @param config - Configuration object for the application. Defaults to the loaded configuration.\r\n   * @param utils - Utility functions for Discord. Defaults to a new Utils instance.\r\n   * @param DB - Database operations instance. Defaults to a new DBPrisma instance.\r\n   * @param discord - Instance of the Discord client. Defaults to a new MyClient instance.\r\n   * @param whatsapp - Instance of the WhatsApp module. Defaults to a new MyApp instance.\r\n   * @param api - Instance of the API server. Defaults to a new API instance.\r\n   */\r\n  constructor(\r\n    prisma: PrismaClient = Engine.createDefaultPrismaClient(),\r\n    config: ProyectConfig = defaultConfig,\r\n    discord: MyClient = new MyClient(),\r\n    DB: DBPrisma = new DBPrisma(),\r\n    whatsapp: MyApp = new MyApp(),\r\n    utils: Utils = new Utils(),\r\n    api: API = new API(),\r\n  ) {\r\n    console.debug(\"[Engine][constructor] Initializing Engine with provided modules.\");\r\n    this.whatsapp = whatsapp;\r\n    this.discord = discord;\r\n    this.prisma = prisma;\r\n    this.config = config;\r\n    this.utils = utils;\r\n    this.api = api;\r\n    this.DB = DB;\r\n  }\r\n\r\n  /**\r\n   * Creates a default Prisma client instance with predefined settings.\r\n   *\r\n   * @returns A new instance of PrismaClient.\r\n   * @see {@link https://www.prisma.io/docs/reference/api-reference/prisma-client-reference | Prisma Client API Reference}\r\n   */\r\n  private static createDefaultPrismaClient(): PrismaClient {\r\n    console.debug(\"[Engine][createDefaultPrismaClient] Creating default Prisma client.\");\r\n    return new PrismaClient({\r\n      log: [\r\n        { emit: \"event\", level: \"query\" },\r\n        { emit: \"stdout\", level: \"error\" },\r\n        { emit: \"stdout\", level: \"info\" },\r\n        { emit: \"stdout\", level: \"warn\" },\r\n      ],\r\n      errorFormat: \"colorless\",\r\n      datasources: {\r\n        db: {\r\n          url: process.env.DATABASE_URL, // Database connection URL from environment variables\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Configures application monitoring using Sentry.\r\n   *\r\n   * @remarks\r\n   * Sentry is used to monitor and report errors in the application. The configuration\r\n   * includes the DSN, environment, and debug settings.\r\n   *\r\n   * @see {@link https://docs.sentry.io/platforms/node/ | Sentry Node.js Documentation}\r\n   * @returns {Promise<void>} A promise that resolves when monitoring is configured.\r\n   */\r\n  private async configureMonitoring(): Promise<void> {\r\n    console.debug(\"[Engine][configureMonitoring] Configuring monitoring (Sentry).\");\r\n    /*     await Sentry.init({\r\n      dsn: SENTRY_NODE_KEY,\r\n      tracesSampleRate: 1.0,\r\n      environment: NODE_ENV,\r\n      debug: NODE_ENV !== \"production\",\r\n    });\r\n    logWithLabel(\"custom\", \"Sentry monitoring configured successfully.\", {\r\n      customLabel: \"Monitoring\",\r\n    }); */\r\n  }\r\n\r\n  /**\r\n   * Sets up the backup service with scheduled backups.\r\n   *\r\n   * @remarks\r\n   * The backup service uses a cron expression to schedule backups. The cron expression\r\n   * is retrieved from the environment variables.\r\n   *\r\n   * @see {@link https://www.npmjs.com/package/node-cron | Node-Cron Documentation}\r\n   * @returns {Promise<void>} A promise that resolves when the backup service is set up.\r\n   */\r\n  private async setupBackupService(): Promise<void> {\r\n    console.debug(\"[Engine][setupBackupService] Setting up backup service.\");\r\n    if (config.tasks.backups.enabled !== true) {\r\n      console.debug(\"[Engine][setupBackupService] Backups are disabled in config.\");\r\n      return;\r\n    }\r\n    await new Backups().scheduleBackups(CRON_BACKUPS_TIME);\r\n    logWithLabel(\"custom\", `Backup scheduled with cron expression: ${CRON_BACKUPS_TIME}`, {\r\n      customLabel: \"Backups\",\r\n    });\r\n    console.debug(\"[Engine][setupBackupService] Backup service scheduled.\");\r\n  }\r\n\r\n  /**\r\n   * Starts the WhatsApp module if it is enabled in the configuration.\r\n   *\r\n   * @remarks\r\n   * If the WhatsApp module is disabled, a log message is displayed indicating that\r\n   * the module has not started.\r\n   *\r\n   * @throws {ProyectError} If the WhatsApp module fails to start.\r\n   * @returns {Promise<void>} A promise that resolves when the WhatsApp module is processed.\r\n   */\r\n  private async conditionallyStartWhatsApp(): Promise<void> {\r\n    console.debug(\"[Engine][conditionallyStartWhatsApp] Checking if WhatsApp module should start.\");\r\n    try {\r\n      if (this.config.modules.whatsapp.enabled) {\r\n        console.debug(\"[Engine][conditionallyStartWhatsApp] WhatsApp module enabled. Starting...\");\r\n        await this.whatsapp.start();\r\n        console.debug(\"[Engine][conditionallyStartWhatsApp] WhatsApp module started.\");\r\n      } else {\r\n        logWithLabel(\r\n          \"custom\",\r\n          [\r\n            \"Client is not ready!\",\r\n            `  ${emojis.loading}  ${chalk.grey(\"The WhatsApp API module has not started.\")}`,\r\n          ].join(\"\\n\"),\r\n          {\r\n            customLabel: \"whatsapp\",\r\n          },\r\n        );\r\n        console.debug(\"[Engine][conditionallyStartWhatsApp] WhatsApp module is disabled in config.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      console.debug(\"[Engine][conditionallyStartWhatsApp] Error starting WhatsApp module:\", err);\r\n      throw new ProyectError(`WhatsApp module failed to start: ${err}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the core modules of the application.\r\n   *\r\n   * @remarks\r\n   * This method initializes the Discord module, the API server module, and optionally\r\n   * the WhatsApp module. It ensures that all modules are started asynchronously.\r\n   *\r\n   * @returns {Promise<void>} A promise that resolves when all modules have been successfully started.\r\n   * @throws {ProyectError} If any module fails to start.\r\n   */\r\n  public async start(): Promise<void> {\r\n    console.debug(\"[Engine][start] Starting application engine.\");\r\n    try {\r\n      await ErrorConsole(this.discord);\r\n      console.debug(\"[Engine][start] ErrorConsole initialized.\");\r\n      await this.initializeModules();\r\n      console.debug(\"[Engine][start] Core modules initialized.\");\r\n      await this.clientCreate();\r\n      console.debug(\"[Engine][start] Discord client created in DB.\");\r\n      await loadPendingReminders();\r\n      console.debug(\"[Engine][start] Pending reminders loaded.\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      console.debug(\"[Engine][start] Error during startup:\", err);\r\n      throw new ProyectError(`Failed to start the application: ${err}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the core modules of the application in parallel and measures load times.\r\n   *\r\n   * @returns {Promise<void>} A promise that resolves when all modules are initialized.\r\n   * @throws {ProyectError} If any module fails to initialize.\r\n   */\r\n  private async initializeModules(): Promise<void> {\r\n    console.debug(\r\n      \"[Engine][initializeModules] Initializing core modules (Discord, API, WhatsApp, Backups, Monitoring).\",\r\n    );\r\n    try {\r\n      // Arranca Discord y API en paralelo\r\n      await Promise.all([this.discord.start(), this.api.start()]);\r\n      console.debug(\"[Engine][initializeModules] Discord and API started.\");\r\n\r\n      // Valid licence product\r\n      /*       if (!this.LicenceValid) {\r\n        throw new ProyectError(\"Invalid licence product. Please check your licence key.\");\r\n      } */\r\n\r\n      // WhatsApp y backups después (si dependen de los anteriores)\r\n      await Promise.all([this.conditionallyStartWhatsApp(), this.configureMonitoring(), this.setupBackupService()]);\r\n      console.debug(\"[Engine][initializeModules] WhatsApp, Monitoring, and Backups initialized.\");\r\n    } catch (err) {\r\n      console.trace(\"Error in initializeModules:\", err);\r\n      console.debug(\"[Engine][initializeModules] Error initializing modules:\", err);\r\n      throw new ProyectError(`Failed to initialize modules: ${err}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates or updates the Discord client configuration in the database.\r\n   *\r\n   * @returns {Promise<void>} A promise that resolves when the client is created or updated.\r\n   * @throws {ProyectError} If the client configuration fails to be created or updated.\r\n   */\r\n  private async clientCreate(): Promise<void> {\r\n    console.debug(\"[Engine][clientCreate] Creating/updating Discord client in DB.\");\r\n    try {\r\n      console.time(\"DB:CreateClient\");\r\n      await this.DB.createClient(client, \"\");\r\n      console.timeEnd(\"DB:CreateClient\");\r\n      debugLog(\"DB\", \"Discord client registered in the database\");\r\n      console.debug(\"[Engine][clientCreate] Discord client registered in DB.\");\r\n    } catch (err) {\r\n      console.trace(\"Error in clientCreate:\", err);\r\n      console.debug(\"[Engine][clientCreate] Error registering Discord client in DB:\", err);\r\n      throw new ProyectError(`Failed to Discord client configuration: ${err}`);\r\n    }\r\n  }\r\n\r\n  /*   private async LicenceValid() {\r\n    const { LICENCE, HWID } = process.env;\r\n    const res = await axios({\r\n      method: \"POST\",\r\n      baseURL: hostURL(),\r\n      url: `/api/v1/license/validate/${LICENCE}`,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-license-key\": LICENCE,\r\n        \"x-hwid\": HWID,\r\n      },\r\n      data: { hwid: HWID },\r\n    });\r\n\r\n    if (res.status !== 200) return false;\r\n    return true;\r\n  } */\r\n}\r\n\r\n/**\r\n * Main application engine instance.\r\n * @type {Engine}\r\n */\r\nconst main: Engine = new Engine();\r\n\r\n/**\r\n * Discord client instance exported for external usage.\r\n * @type {MyClient}\r\n */\r\nconst client: MyClient = main.discord;\r\nconst GiveawayManager = new GiveawayService();\r\n\r\n/**\r\n * Starts the application and handles any errors during the startup process.\r\n *\r\n * @remarks\r\n * If the application fails to start, a custom error is thrown, and the process exits\r\n * with a failure code.\r\n */\r\nmain.start().catch((err) => {\r\n  logWithLabel(\"custom\", `Failed to start the application: ${err}`, {\r\n    customLabel: \"Startup\",\r\n  });\r\n  console.debug(\"[main] Application failed to start:\", err);\r\n  process.exit(1); // Exit the process with a failure code\r\n});\r\n\r\n/**\r\n * Exports the Discord client and main engine instance for external usage.\r\n * @see {@link MyClient}\r\n * @see {@link Engine}\r\n */\r\nexport { client, GiveawayManager, main };\r\n"],"names":[],"mappings":"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","debug_id":"7a03948d-2d98-58ab-b0e6-879139fe2bc0"}
{"version":3,"file":"index.js","sources":["src/index.ts"],"sourceRoot":"/","sourcesContent":["import apicache from \"apicache\";\r\nimport chalk from \"chalk\";\r\n//import cors from \"cors\";\r\nimport express, { Application, NextFunction, Request, Response } from \"express\";\r\nimport session from \"express-session\";\r\nimport helmet from \"helmet\";\r\nimport { createServer } from \"http\";\r\nimport i18nextMiddleware from \"i18next-http-middleware\";\r\nimport path from \"path\";\r\nimport { Server } from \"socket.io\";\r\nimport swaggerUi from \"swagger-ui-express\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport { main } from \"@/main\";\r\nimport { DomainError } from \"@/shared/adapters/extends/error.extend\";\r\nimport i18next from \"@/shared/i18n\";\r\nimport { config } from \"@/shared/utils/config\";\r\nimport { logWithLabel } from \"@/shared/utils/functions/console\";\r\nimport emojis from \"@config/json/emojis.json\";\r\n\r\nimport { passport } from \"./adapters/external/passport\";\r\nimport swaggerSetup from \"./adapters/external/swagger\";\r\nimport { IPBlocker } from \"./interfaces/messaging/broker/administrator\";\r\nimport { SwaggerMonitor } from \"./shared/monitor\";\r\nimport { router } from \"./shared/utils/routes\";\r\n\r\n/**\r\n * @module API\r\n * @description\r\n * This module contains the main API server class for the Nebura Platform client.\r\n * It sets up the Express application, HTTP server, Socket.IO server, middleware, routes, and real-time features.\r\n *\r\n * @see [Express Documentation](https://expressjs.com/)\r\n * @see [Socket.IO Documentation](https://socket.io/docs/v4/)\r\n * @see [TypeDoc Documentation](https://typedoc.org/)\r\n */\r\n\r\n/**\r\n * @interface Request\r\n * @description\r\n * Extends the Express Request interface to include a unique request ID.\r\n * This is used for tracing and logging purposes.\r\n *\r\n * @see [Express Request](https://expressjs.com/en/api.html#req)\r\n */\r\ndeclare global {\r\n  namespace Express {\r\n    interface Request {\r\n      /**\r\n       * Unique identifier for the request.\r\n       */\r\n      id?: string;\r\n    }\r\n  }\r\n}\r\n\r\n/* const corsOptions = {\r\n  origin: hostURL(),\r\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"],\r\n  credentials: true,\r\n}; */\r\n\r\n/**\r\n * @class API\r\n * @classdesc\r\n * Main class responsible for initializing and configuring the API server.\r\n * This class sets up the Express application, HTTP server, and Socket.IO server.\r\n * It also configures middleware, routes, and other server functionalities.\r\n *\r\n * @example\r\n * ```typescript\r\n * const api = new API();\r\n * await api.start();\r\n * ```\r\n */\r\nexport class API {\r\n  /**\r\n   * Instance of the Express application.\r\n   * Used to define routes, middleware, and other Express-specific configurations.\r\n   *\r\n   * @type {Application}\r\n   * @see [Express Application](https://expressjs.com/en/4x/api.html#app)\r\n   */\r\n  public app: Application;\r\n\r\n  /**\r\n   * HTTP server instance created using `http.createServer`.\r\n   * This server is used to handle incoming HTTP requests.\r\n   *\r\n   * @type {any}\r\n   * @see [Node.js HTTP Server](https://nodejs.org/api/http.html#class-httpserver)\r\n   */\r\n  public server: any;\r\n\r\n  /**\r\n   * Instance of the Socket.IO server.\r\n   * Used to manage WebSocket connections for real-time communication.\r\n   *\r\n   * @type {Server}\r\n   * @see [Socket.IO Server](https://socket.io/docs/v4/server-instance/)\r\n   */\r\n  public io: Server;\r\n\r\n  /**\r\n   * Constructor for the API class.\r\n   * Initializes the Express application, HTTP server, and Socket.IO server.\r\n   * Also calls methods to configure middleware and routes.\r\n   *\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    this.app = express();\r\n    this.server = createServer(this.app);\r\n    this.io = new Server(this.server, {\r\n      transports: [\"websocket\", \"polling\"],\r\n      connectTimeout: 25000,\r\n      //--- SOCKET.IO OPTIONS ---//\r\n      pingInterval: 20000,\r\n      pingTimeout: 15000,\r\n    });\r\n    this.routes();\r\n    this.middleware();\r\n  }\r\n\r\n  /**\r\n   * Configures the middleware for the application.\r\n   * Includes security headers, session management, Swagger documentation, and IP blocking.\r\n   *\r\n   * @private\r\n   * @async\r\n   * @returns {Promise<void>}\r\n   * @see [Express Middleware](https://expressjs.com/en/guide/using-middleware.html)\r\n   */\r\n  private async middleware(): Promise<void> {\r\n    // Parse URL-encoded data\r\n    this.app.use(express.urlencoded({ extended: true }));\r\n\r\n    // Set EJS as the view engine\r\n    this.app.set(\"view engine\", \"ejs\");\r\n    this.app.use(passport.initialize());\r\n    this.app.use(passport.session());\r\n\r\n    // Disable the \"X-Powered-By\" header for security reasons\r\n    this.app.disable(\"x-powered-by\");\r\n\r\n    // Trust the first proxy (useful for reverse proxies like Nginx)\r\n    this.app.set(\"trust proxy\", 1);\r\n\r\n    // Parse JSON request bodies\r\n    this.app.use(express.json());\r\n\r\n    // Internationalization middleware\r\n    this.app.use(i18nextMiddleware.handle(i18next));\r\n\r\n    // Use the router for handling application routes\r\n    this.app.use(router);\r\n\r\n    // Initialize Swagger monitoring and documentation\r\n    await SwaggerMonitor(this);\r\n\r\n    // API response caching middleware\r\n    const cache = apicache.options({\r\n      //debug: process.env.NODE_ENV === \"development\" ? true : false,\r\n      defaultDuration: \"5 minutes\",\r\n      headers: {\r\n        \"X-Cache-Channel\": \"API\",\r\n        \"X-Cache-Status\": \"HIT\",\r\n      },\r\n    }).middleware;\r\n\r\n    this.app.use(cache(\"5 minutes\"));\r\n\r\n    // Add security headers using Helmet\r\n    this.app.use(helmet({ contentSecurityPolicy: false, referrerPolicy: false }));\r\n\r\n    /**\r\n     * Middleware to assign a unique ID to each request.\r\n     * The ID is used for tracing and debugging.\r\n     *\r\n     * @see [UUID v4](https://www.npmjs.com/package/uuid)\r\n     */\r\n    this.app.use((req: Request, _res: Response, next: NextFunction) => {\r\n      req.id = uuidv4();\r\n      next();\r\n    });\r\n\r\n    /**\r\n     * Middleware to add the request ID and response time to the response headers.\r\n     *\r\n     * @see [Node.js process.hrtime](https://nodejs.org/api/process.html#processhrtimetime)\r\n     */\r\n    this.app.use((req: Request, res: Response, next: NextFunction) => {\r\n      const start = process.hrtime();\r\n      req.id = req.id || uuidv4();\r\n      res.setHeader(\"X-Request-ID\", req.id);\r\n\r\n      res.on(\"finish\", () => {\r\n        if (!res.headersSent) {\r\n          const [seconds, nanoseconds] = process.hrtime(start);\r\n          const responseTime = (seconds * 1e3 + nanoseconds / 1e6).toFixed(2);\r\n          res.setHeader(\"X-Response-Time\", `${responseTime}ms`);\r\n        }\r\n      });\r\n\r\n      next();\r\n    });\r\n\r\n    /**\r\n     * Middleware to log and store request metrics in the database.\r\n     * Metrics include endpoint, client ID, system, request count, errors, and latency.\r\n     *\r\n     * @see [Prisma Upsert](https://www.prisma.io/docs/concepts/components/prisma-client/crud#upsert)\r\n     */\r\n    this.app.use(async (req: Request, res: Response, next: NextFunction) => {\r\n      const start = process.hrtime();\r\n      const clientId = req.headers[\"x-client-id\"] as string | undefined;\r\n\r\n      res.on(\"finish\", async () => {\r\n        const [seconds, nanoseconds] = process.hrtime(start);\r\n        const latency = seconds * 1e3 + nanoseconds / 1e6;\r\n        const isError = res.statusCode >= 400;\r\n\r\n        try {\r\n          await main.prisma.metrics.upsert({\r\n            where: {\r\n              endpoint_clientId_system: `${req.path}-${clientId || \"null\"}-${req.headers[\"user-agent\"] || \"unknown\"}`,\r\n            },\r\n            update: {\r\n              requests: { increment: 1 },\r\n              errors: isError ? { increment: 1 } : undefined,\r\n              latency: { set: latency },\r\n            },\r\n            create: {\r\n              endpoint_clientId_system: `${req.path}-${clientId || \"null\"}-${req.headers[\"user-agent\"] || \"unknown\"}`,\r\n              endpoint: req.path,\r\n              clientId: clientId || null,\r\n              system: req.headers[\"user-agent\"] || \"unknown\",\r\n              requests: 1,\r\n              errors: isError ? 1 : 0,\r\n              latency: latency,\r\n            },\r\n          });\r\n        } catch (err: any) {\r\n          throw new DomainError(`The metrics could not be saved: ${err.message}`);\r\n        }\r\n      });\r\n\r\n      next();\r\n    });\r\n\r\n    /**\r\n     * Swagger documentation endpoint.\r\n     *\r\n     * @see [Swagger UI Express](https://www.npmjs.com/package/swagger-ui-express)\r\n     */\r\n    this.app.use(config.environments.default.api.swagger.docs, swaggerUi.serve, swaggerUi.setup(swaggerSetup));\r\n\r\n    /**\r\n     * IP blocking middleware.\r\n     *\r\n     * @see [Custom IPBlocker](./interfaces/messaging/broker/administrator)\r\n     */\r\n    this.app.use(async (req: Request, res: Response, next: NextFunction) => {\r\n      const middleware = await IPBlocker.getInstance().getMiddleware();\r\n      middleware(req, res, next);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Configures the routes for the application.\r\n   * Includes session management, static file serving, and WebSocket connection handling.\r\n   *\r\n   * @private\r\n   * @async\r\n   * @returns {Promise<void>}\r\n   * @see [Express Routing](https://expressjs.com/en/guide/routing.html)\r\n   */\r\n  private async routes(): Promise<void> {\r\n    const environments = config.environments.default;\r\n\r\n    /**\r\n     * Session management configuration.\r\n     * Uses SQLite as the session store.\r\n     *\r\n     * @see [express-session](https://www.npmjs.com/package/express-session)\r\n     * @see [connect-sqlite3](https://www.npmjs.com/package/connect-sqlite3)\r\n     */\r\n    this.app.use(\r\n      session({\r\n        secret: process.env.WEB_SECRET as string,\r\n        resave: false,\r\n        saveUninitialized: false,\r\n        cookie: { maxAge: 3600000 / 2, secure: false },\r\n        rolling: true,\r\n        store: new (require(\"connect-sqlite3\")(session))({\r\n          db: `${environments.database.sessions.name}.sqlite`,\r\n          dir: `${environments.database.sessions.url}`,\r\n        }),\r\n        genid() {\r\n          return uuidv4();\r\n        },\r\n      }),\r\n    );\r\n\r\n    // --- SOCKET.IO: ONLINE USERS FOR GLOBAL CHAT ---\r\n    /**\r\n     * @typedef {Object} OnlineUser\r\n     * @property {any} user - The user object.\r\n     * @property {Set<string>} sockets - Set of socket IDs associated with the user.\r\n     */\r\n    const onlineUsers = new Map<string, { user: any; sockets: Set<string> }>();\r\n\r\n    /**\r\n     * Socket.IO connection event handler.\r\n     * Handles user registration, online user listing, disconnection, global chat, and ticketing.\r\n     *\r\n     * @see [Socket.IO Events](https://socket.io/docs/v4/server-api/#event-connection)\r\n     */\r\n    this.io.on(\"connection\", (socket) => {\r\n      /**\r\n       * Register a user as online.\r\n       * Emits the list of online users and sends chat history.\r\n       *\r\n       * @event register\r\n       */\r\n      socket.on(\"register\", async (user) => {\r\n        if (!onlineUsers.has(user.id)) {\r\n          onlineUsers.set(user.id, { user, sockets: new Set() });\r\n        }\r\n        onlineUsers.get(user.id)!.sockets.add(socket.id);\r\n\r\n        // Emit only unique users\r\n        this.io.emit(\r\n          \"user:online\",\r\n          Array.from(onlineUsers.values()).map((u) => u.user),\r\n        );\r\n\r\n        // --- SEND GLOBAL CHAT HISTORY TO CONNECTED USER ---\r\n        /**\r\n         * Fetches the last 50 messages from the global chat.\r\n         *\r\n         * @see [Prisma findMany](https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#findmany)\r\n         */\r\n        const history = await main.prisma.globalChatMessage.findMany({\r\n          orderBy: { createdAt: \"asc\" },\r\n          take: 50,\r\n        });\r\n        socket.emit(\r\n          \"global:history\",\r\n          history.map((msg) => ({\r\n            content: msg.content,\r\n            senderId: msg.userId,\r\n            senderName: msg.username,\r\n            senderAvatar: msg.avatar,\r\n            timestamp: msg.createdAt,\r\n          })),\r\n        );\r\n      });\r\n\r\n      /**\r\n       * Request the list of online users.\r\n       *\r\n       * @event user:list\r\n       */\r\n      socket.on(\"user:list\", () => {\r\n        socket.emit(\r\n          \"user:online\",\r\n          Array.from(onlineUsers.values()).map((u) => u.user),\r\n        );\r\n      });\r\n\r\n      /**\r\n       * Handle user disconnection.\r\n       * Removes the socket from the user's set and updates the online user list.\r\n       *\r\n       * @event disconnect\r\n       */\r\n      socket.on(\"disconnect\", () => {\r\n        // Find the user by socket.id\r\n        for (const [userId, entry] of onlineUsers.entries()) {\r\n          entry.sockets.delete(socket.id);\r\n          if (entry.sockets.size === 0) {\r\n            onlineUsers.delete(userId);\r\n          }\r\n        }\r\n        this.io.emit(\r\n          \"user:online\",\r\n          Array.from(onlineUsers.values()).map((u) => u.user),\r\n        );\r\n      });\r\n\r\n      /**\r\n       * Handle sending a global chat message.\r\n       * Saves the message to the database and emits it to all clients.\r\n       *\r\n       * @event global:message\r\n       */\r\n      socket.on(\"global:message\", async (msg) => {\r\n        // Find the user by socket.id\r\n        let userData;\r\n        for (const entry of onlineUsers.values()) {\r\n          if (entry.sockets.has(socket.id)) {\r\n            userData = entry.user;\r\n            break;\r\n          }\r\n        }\r\n        const message = {\r\n          content: msg.content,\r\n          senderId: userData?.id || msg.senderId,\r\n          senderName: userData?.name || msg.senderName,\r\n          senderAvatar: userData?.avatar || msg.senderAvatar,\r\n          timestamp: new Date().toISOString(),\r\n        };\r\n\r\n        // Save to the database\r\n        await main.prisma.globalChatMessage.create({\r\n          data: {\r\n            userId: message.senderId,\r\n            username: message.senderName,\r\n            avatar: message.senderAvatar,\r\n            content: message.content,\r\n            createdAt: new Date(message.timestamp),\r\n          },\r\n        });\r\n\r\n        this.io.emit(\"global:message\", message);\r\n      });\r\n\r\n      /**\r\n       * Create a new support ticket.\r\n       * Validates input and stores the ticket in the database.\r\n       *\r\n       * @event ticket:create\r\n       * @param {object} data - Ticket data.\r\n       * @param {function} callback - Callback to return the result.\r\n       */\r\n      socket.on(\"ticket:create\", async (data, callback) => {\r\n        try {\r\n          // Basic validation\r\n          if (!data.userId || !data.reason) {\r\n            return callback?.({ success: false, message: \"Missing required data\" });\r\n          }\r\n\r\n          // Create ticket in the database\r\n          const ticket = await main.prisma.ticketUser.create({\r\n            data: {\r\n              userId: data.userId,\r\n              guildId: data.guildId || null,\r\n              channelId: data.channelId || null,\r\n              reason: data.reason,\r\n              status: \"OPEN\",\r\n              ticketId: data.ticketId || uuidv4(),\r\n              createdAt: new Date(),\r\n              updatedAt: new Date(),\r\n            },\r\n          });\r\n\r\n          // Emit event to all clients\r\n          this.io.emit(\"ticket:created\", ticket);\r\n\r\n          callback?.({ success: true, ticket });\r\n        } catch (error: any) {\r\n          callback?.({ success: false, message: error.message });\r\n        }\r\n      });\r\n\r\n      /**\r\n       * Add a message to a support ticket.\r\n       * Validates input, checks ticket existence, and stores the message.\r\n       *\r\n       * @event ticket:message\r\n       * @param {object} data - Message data.\r\n       * @param {function} callback - Callback to return the result.\r\n       */\r\n      socket.on(\"ticket:message\", async (data, callback) => {\r\n        try {\r\n          if (!data.ticketId || !data.content) {\r\n            return callback?.({ success: false, message: \"Missing required data\" });\r\n          }\r\n\r\n          // Find ticket\r\n          const ticket = await main.prisma.ticketUser.findUnique({\r\n            where: { ticketId: data.ticketId },\r\n          });\r\n          if (!ticket) {\r\n            return callback?.({ success: false, message: \"Ticket not found\" });\r\n          }\r\n\r\n          // Get actual user data from the connected socket\r\n          let userData;\r\n          for (const entry of onlineUsers.values()) {\r\n            if (entry.sockets.has(socket.id)) {\r\n              userData = entry.user;\r\n              break;\r\n            }\r\n          }\r\n\r\n          const message = await main.prisma.ticketMessage.create({\r\n            data: {\r\n              ticketId: data.ticketId,\r\n              senderId: userData?.id || data.senderId,\r\n              senderName: userData?.name || data.senderName || \"User\",\r\n              senderAvatar: userData?.avatar || data.senderAvatar || null,\r\n              content: data.content,\r\n              timestamp: new Date(),\r\n            },\r\n          });\r\n\r\n          // Emit event to all clients\r\n          this.io.emit(\"ticket:message\", { ticketId: data.ticketId, message });\r\n\r\n          callback?.({ success: true, message });\r\n        } catch (error: any) {\r\n          callback?.({ success: false, message: error.message });\r\n        }\r\n      });\r\n\r\n      /**\r\n       * Update the status of a support ticket (close, reopen, etc.).\r\n       *\r\n       * @event ticket:update\r\n       * @param {object} data - Update data.\r\n       * @param {function} callback - Callback to return the result.\r\n       */\r\n      socket.on(\"ticket:update\", async (data, callback) => {\r\n        try {\r\n          if (!data.ticketId || !data.status) {\r\n            return callback?.({ success: false, message: \"Missing required data\" });\r\n          }\r\n\r\n          const ticket = await main.prisma.ticketUser.update({\r\n            where: { ticketId: data.ticketId },\r\n            data: {\r\n              status: data.status,\r\n              closedBy: data.closedBy || null,\r\n              closedAt: data.status === \"CLOSED\" ? new Date() : null,\r\n              updatedAt: new Date(),\r\n            },\r\n          });\r\n\r\n          // Emit event to all clients\r\n          this.io.emit(\"ticket:updated\", ticket);\r\n\r\n          callback?.({ success: true, ticket });\r\n        } catch (error: any) {\r\n          callback?.({ success: false, message: error.message });\r\n        }\r\n      });\r\n    });\r\n\r\n    /**\r\n     * Serve static files for documentation.\r\n     *\r\n     * @see [Express static middleware](https://expressjs.com/en/starter/static-files.html)\r\n     */\r\n    this.app.use(\"/documentation\", express.static(path.join(__dirname, \"..\", \"docs\")));\r\n\r\n    /**\r\n     * Serve the main documentation HTML file.\r\n     */\r\n    this.app.get(\"/documentation\", (_req: Request, res: Response) => {\r\n      res.sendFile(path.join(__dirname, \"..\", \"docs\", \"index.html\"));\r\n    });\r\n\r\n    /**\r\n     * Static file serving for public directories (css, js, assets, etc.).\r\n     *\r\n     * @see [Express static middleware](https://expressjs.com/en/starter/static-files.html)\r\n     */\r\n    this.app.set(\"views\", path.join(__dirname, \"interfaces\", \"http\", \"views\"));\r\n    const publicDir = path.join(__dirname, \"interfaces\", \"http\", \"views\", \"public\");\r\n    const staticDirs = [\"css\", \"scripts\", \"assets\", \"vendor\", \"fonts\", \"images\", \"scss\"];\r\n    staticDirs.forEach((dir): void => {\r\n      const staticPath = path.join(publicDir, dir);\r\n      this.app.use(\r\n        `/${dir}`,\r\n        express.static(staticPath, {\r\n          setHeaders: (res, filePath) => {\r\n            if (filePath.endsWith(\".js\")) {\r\n              res.setHeader(\"Content-Type\", \"application/javascript\");\r\n            }\r\n          },\r\n        }),\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts the API server on the configured port.\r\n   * Logs the server's status and URL to the console upon successful startup.\r\n   *\r\n   * @async\r\n   * @returns {Promise<void>}\r\n   * @see [Node.js HTTP server listen](https://nodejs.org/api/http.html#serverlisten)\r\n   */\r\n  public async start(): Promise<void> {\r\n    this.server.listen(config.environments.default.api.port, () => {\r\n      logWithLabel(\r\n        \"api\",\r\n        [\r\n          `API Server is running on port ${config.environments.default.api.port}`,\r\n          `  ${emojis.circle_check}  ${chalk.grey(\"API Server Started\")}`,\r\n          `  ${emojis.circle_check}  ${chalk.grey(\"API Port:\")} ${config.environments.default.api.port}`,\r\n          `  ${emojis.circle_check}  ${chalk.grey(\"API Health:\")} ${this.app.get(\"trust proxy\")}`,\r\n        ].join(\"\\n\"),\r\n      );\r\n    });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"48d6abbf-abe4-5ca2-bd6b-c2c375b880bd"}
{"version":3,"file":"task.service.js","sources":["src/application/services/utilities/task.service.ts"],"sourceRoot":"/","sourcesContent":["import { TaskRecurrence, TaskReminder } from \"@/adapters/validators/task\";\r\nimport { CreateTaskDto } from \"@/application/dto/tasks/create-task.dto\";\r\nimport { Recurrence, Reminder, Task } from \"@/application/entities/tasks/task.entity\";\r\nimport { UpdateTaskDto } from \"@/application/entities/tasks/update-task.dto\";\r\nimport { TaskRepository } from \"@/gateaway/task.repositories\";\r\nimport { Notification } from \"@/interfaces/messaging/broker/notification\"; // Importa Notification\r\nimport { CreateTask } from \"@typings/services/tasks\";\r\n\r\n/**\r\n * Service for managing tasks, including creation, retrieval, updating, deletion, and cleanup.\r\n *\r\n * Uses Prisma ORM for database operations.\r\n *\r\n * @see {@link https://www.prisma.io/docs/concepts/components/prisma-client Prisma Client}\r\n */\r\nexport class TaskService {\r\n  private notifier = new Notification(); // Instancia de Notification\r\n  private repo = new TaskRepository();\r\n\r\n  constructor() {}\r\n  /**\r\n   * Creates a new task in the database.\r\n   *\r\n   * Serializes recurrence and reminder fields as JSON strings for storage.\r\n   * Normalizes date fields to ISO-8601 format.\r\n   *\r\n   * @param {CreateTaskDto} createTaskDto - Data Transfer Object containing task creation data.\r\n   * @returns {Promise<Task>} The created task entity.\r\n   */\r\n  async create(createTaskDto: CreateTaskDto): Promise<Task> {\r\n    // Validar recurrence si existe\r\n    let valid: ReturnType<typeof TaskRecurrence.safeParse> | undefined;\r\n    if (createTaskDto.recurrence) {\r\n      valid = TaskRecurrence.safeParse(createTaskDto.recurrence);\r\n      if (!valid.success) throw new Error(\"Invalid recurrence format\");\r\n      // Puedes usar valid.data si necesitas el valor parseado\r\n    }\r\n    // Validar reminder si existe\r\n    let validReminder: ReturnType<typeof TaskReminder.safeParse> | undefined;\r\n    if (createTaskDto.reminder) {\r\n      validReminder = TaskReminder.safeParse(createTaskDto.reminder);\r\n      if (!validReminder.success) throw new Error(\"Invalid reminder format\");\r\n      // Puedes usar validReminder.data si necesitas el valor parseado\r\n    }\r\n\r\n    const recurrence: Recurrence | undefined = valid?.data;\r\n    const reminder: Reminder | undefined = validReminder?.data;\r\n\r\n    const data: CreateTask = {\r\n      ...createTaskDto,\r\n      createdBy: createTaskDto.createdBy,\r\n      recurrence,\r\n      status: createTaskDto.status || \"pending\",\r\n      priority: createTaskDto.priority || \"medium\",\r\n      tags: createTaskDto.tags || [],\r\n      reminder,\r\n      dueDate: createTaskDto.dueDate ? createTaskDto.dueDate : \"Not set\",\r\n      autoDelete: createTaskDto.autoDelete ? createTaskDto.autoDelete : \"Not set\"\r\n    };\r\n\r\n    const task = await this.repo.create(data);\r\n    // NotificaciÃ³n detallada en inglÃ©s\r\n    await this.notifier.sendWebhookNotification(\r\n      \"Task Created\",\r\n      `A new task has been created by user ID: \\`${createTaskDto.createdBy}\\`.`,\r\n      \"#4CAF50\",\r\n      [\r\n        { name: \"Title\", value: createTaskDto.title || \"No title\", inline: true },\r\n        {\r\n          name: \"Due Date\",\r\n          value: data.dueDate ? data.dueDate : \"Not set\",\r\n          inline: true,\r\n        },\r\n        { name: \"Priority\", value: createTaskDto.priority || \"medium\", inline: true },\r\n        {\r\n          name: \"Tags\",\r\n          value:\r\n            createTaskDto.tags && createTaskDto.tags.length > 0\r\n              ? createTaskDto.tags.join(\", \")\r\n              : \"None\",\r\n          inline: false,\r\n        },\r\n      ],\r\n      { content: \"ðŸŸ¢ Task creation event\", username: \"Task Service\" },\r\n    );\r\n    return task;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a task by its unique identifier.\r\n   *\r\n   * @param {string} id - The unique identifier of the task.\r\n   * @returns {Promise<Task | null>} The task entity if found, otherwise null.\r\n   */\r\n  async getById(id: string): Promise<Task | null> {\r\n    return this.repo.findById(id);\r\n  }\r\n\r\n  /**\r\n   * Retrieves all tasks, optionally filtered by status, priority, creator, or tag.\r\n   *\r\n   * @param {Object} filters - Optional filters for querying tasks.\r\n   * @param {string} [filters.status] - Filter by task status.\r\n   * @param {string} [filters.priority] - Filter by task priority.\r\n   * @param {string} [filters.createdBy] - Filter by creator's user ID.\r\n   * @param {string} [filters.tag] - Filter by tag.\r\n   * @returns {Promise<Task[]>} Array of task entities.\r\n   */\r\n  async get(\r\n    filters: {\r\n      status?: string;\r\n      priority?: string;\r\n      createdBy?: string;\r\n      tag?: string;\r\n    } = {},\r\n  ): Promise<Task[]> {\r\n    return this.repo.findMany(filters);\r\n  }\r\n\r\n  /**\r\n   * Updates an existing task by its unique identifier.\r\n   *\r\n   * Serializes recurrence and reminder fields as JSON strings for storage.\r\n   * Normalizes date fields to ISO-8601 format.\r\n   * Sets the completedAt field if the status is set to \"completed\".\r\n   *\r\n   * @param {string} id - The unique identifier of the task.\r\n   * @param {UpdateTaskDto} updateTaskDto - Data Transfer Object containing update data.\r\n   * @returns {Promise<Task>} The updated task entity.\r\n   */\r\n  async update(id: string, updateTaskDto: UpdateTaskDto): Promise<Task> {\r\n    const data: any = { ...updateTaskDto };\r\n\r\n    if (updateTaskDto.status === \"completed\") {\r\n      data.completedAt = new Date();\r\n    }\r\n\r\n    // Normalizar dueDate y autoDelete a ISO-8601\r\n    if (data.dueDate) {\r\n      data.dueDate =\r\n        typeof data.dueDate === \"string\"\r\n          ? new Date(data.dueDate).toISOString()\r\n          : data.dueDate instanceof Date\r\n            ? data.dueDate.toISOString()\r\n            : undefined;\r\n    }\r\n    if (data.autoDelete) {\r\n      data.autoDelete =\r\n        typeof data.autoDelete === \"string\"\r\n          ? new Date(data.autoDelete).toISOString()\r\n          : data.autoDelete instanceof Date\r\n            ? data.autoDelete.toISOString()\r\n            : undefined;\r\n    }\r\n\r\n    if (data.recurrence) {\r\n      data.recurrence = JSON.stringify(data.recurrence);\r\n    }\r\n    if (data.reminder) {\r\n      data.reminder = JSON.stringify(data.reminder);\r\n    }\r\n\r\n    const task = await this.repo.update(id, data);\r\n    await this.notifier.sendWebhookNotification(\r\n      \"Task Updated\",\r\n      `Task with ID: \\`${id}\\` has been updated.`,\r\n      \"#2196F3\",\r\n      [\r\n        {\r\n          name: \"Updated Fields\",\r\n          value: Object.keys(updateTaskDto).join(\", \") || \"None\",\r\n          inline: false,\r\n        },\r\n        { name: \"Status\", value: updateTaskDto.status || \"Unchanged\", inline: true },\r\n      ],\r\n      { content: \"ðŸ”µ Task update event\", username: \"Task Service\" },\r\n    );\r\n    return task;\r\n  }\r\n\r\n  /**\r\n   * Deletes a task by its unique identifier.\r\n   *\r\n   * @param {string} id - The unique identifier of the task to delete.\r\n   * @returns {Promise<void>} Resolves when the task is deleted.\r\n   */\r\n  async delete(id: string): Promise<void> {\r\n    await this.repo.delete(id);\r\n    await this.notifier.sendWebhookNotification(\r\n      \"Task Deleted\",\r\n      `Task with ID: \\`${id}\\` has been deleted.`,\r\n      \"#F44336\",\r\n      [{ name: \"Task ID\", value: id, inline: true }],\r\n      { content: \"ðŸ”´ Task deletion event\", username: \"Task Service\" },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Cleans up tasks that have an auto-delete date in the past.\r\n   *\r\n   * Deletes tasks where the autoDelete field is less than or equal to the current date.\r\n   * @return {Promise<number>} The number of tasks deleted.\r\n   */\r\n  async cleanUp(): Promise<number> {\r\n    const now = new Date();\r\n    return this.repo.deleteManyAutoDeleteBefore(now);\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"4e88d61b-1d6c-51a1-bc63-71287e6b4e65"}
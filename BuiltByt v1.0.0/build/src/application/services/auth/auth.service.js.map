{"version":3,"file":"auth.service.js","sources":["src/application/services/auth/auth.service.ts"],"sourceRoot":"/","sourcesContent":["import axios from \"axios\";\r\n\r\nimport { AuthLogin } from \"@/adapters/validators/user\";\r\nimport { AuthRepository } from \"@/gateaway/auth.repositories\";\r\nimport { Notification } from \"@/interfaces/messaging/broker/notification\"; // Importa Notification\r\nimport { User } from \"@/typings/utils\";\r\nimport { Prisma } from \"@prisma/client\";\r\nimport { logWithLabel } from \"@utils/functions/console\";\r\nimport { encrypt, signToken, verified } from \"@utils/token\";\r\n\r\n/**\r\n * Service for handling authentication and user management operations.\r\n *\r\n * This service provides methods for retrieving users, creating new users, and authenticating users.\r\n *\r\n * @see [Prisma Documentation](https://www.prisma.io/docs/)\r\n * @see [Discord API Reference](https://discord.com/developers/docs/reference)\r\n */\r\nexport class AuthService {\r\n  private notifier = new Notification(); // Instancia de Notification\r\n  private authRepository = new AuthRepository(); // Instancia del repositorio de autenticación\r\n  /**\r\n   * Retrieves a user by their unique ID.\r\n   *\r\n   * @param id - The unique identifier of the user.\r\n   * @returns A promise that resolves to the user data if found, or an error response if not found or on failure.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const user = await authService.getAuth(\"userId123\");\r\n   * ```\r\n   */\r\n  async getAuth(id: string) {\r\n    try {\r\n      const user = await  this.authRepository.findAuthById(id);\r\n      if (!user) {\r\n        return { error: \"USER_NOT_FOUND\", message: \"User not found\" };\r\n      }\r\n\r\n      return user;\r\n    } catch (error) {\r\n      logWithLabel(\"error\", \"The user not found\");\r\n      return { error: \"INTERNAL_SERVER_ERROR\", message: \"An error occurred while fetching user\" };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new user in the system.\r\n   *\r\n   * This method validates the required fields, checks for existing users, encrypts the password,\r\n   * and optionally fetches Discord user data if a Discord ID is provided.\r\n   *\r\n   * @param body - Partial user data including email, password, name, and optionally discordId.\r\n   * @returns A promise that resolves to the created user data or an error response.\r\n   *\r\n   * @remarks\r\n   * - The password is encrypted before storage.\r\n   * - If `discordId` is provided, the method fetches user data from the Discord API.\r\n   *\r\n   * @see [Discord API - Get User](https://discord.com/developers/docs/resources/user#get-user)\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const result = await authService.createAuth({ email: \"test@example.com\", password: \"pass\", name: \"Test\" });\r\n   * ```\r\n   */\r\n  async createAuth(body: Partial<User>) {\r\n    try {\r\n      const { email, password, name, discordId } = body;\r\n\r\n      // Validar campos requeridos\r\n      if (!email || !password || !name || !discordId) {\r\n        return { error: \"MISSING_DATA\", message: \"Required fields are missing\" };\r\n      }\r\n\r\n      // Validar estructura de datos\r\n      /*const validation = AuthRegister.safeParse(body);\r\n      if (!validation.success) {\r\n        return {\r\n          error: \"VALIDATION_ERROR\",\r\n          message: \"Invalid data format\",\r\n          details: validation.error.errors,\r\n        };\r\n      }*/\r\n\r\n      // Verificar si el usuario ya existe\r\n      const existingUser = await this.authRepository.findAuthByEmail(email);\r\n      if (existingUser) {\r\n        // Notificación de intento fallido\r\n        await this.notifier.sendWebhookNotification(\r\n          \"User Registration Attempt Failed\",\r\n          `A registration attempt failed because the email \\`${email}\\` is already in use.`,\r\n          \"#F44336\",\r\n          [\r\n            { name: \"Email\", value: email, inline: true },\r\n            { name: \"Name\", value: name, inline: true },\r\n          ],\r\n          { content: \"🔴 Registration failed (user exists)\", username: \"Auth Service\" },\r\n        );\r\n        return { error: \"USER_EXISTS\", message: \"User with this email already exists\" };\r\n      }\r\n\r\n      // Encriptar contraseña\r\n      const passwordHash = await encrypt(password);\r\n      if (!passwordHash) {\r\n        // Notificación de error de encriptación\r\n        await this.notifier.sendWebhookNotification(\r\n          \"User Registration Failed\",\r\n          `Password encryption failed for email: \\`${email}\\`.`,\r\n          \"#F44336\",\r\n          [{ name: \"Email\", value: email, inline: true }],\r\n          { content: \"🔴 Registration failed (encryption)\", username: \"Auth Service\" },\r\n        );\r\n        return { error: \"ENCRYPTION_ERROR\", message: \"Failed to encrypt password\" };\r\n      }\r\n\r\n        const response = await axios.get(`https://discord.com/api/v10/users/${discordId}`, {\r\n          headers: {\r\n            Authorization: `Bot ${process.env.TOKEN_DISCORD}`,\r\n          },\r\n        });\r\n\r\n        const data = response.data;\r\n        // Crear usuario\r\n        const newUser = await this.authRepository.createAuth(\r\n          {\r\n            email: email as string,\r\n            name: name as string,\r\n            password: passwordHash,\r\n          },\r\n          {\r\n            id: data.id,\r\n            avatar: data.avatar,\r\n            username: data.username ? data.username : data.global_name,\r\n            global_name: data.global_name,\r\n          }\r\n        );\r\n\r\n      if (!newUser) {\r\n        await this.notifier.sendWebhookNotification(\r\n          \"User Registration Failed\",\r\n          `User registration failed for email: \\`${email}\\`.`,\r\n          \"#F44336\",\r\n          [{ name: \"Email\", value: email, inline: true }],\r\n          { content: \"🔴 Registration failed\", username: \"Auth Service\" },\r\n        );\r\n      }\r\n\r\n      await this.notifier.sendWebhookNotification(\r\n        \"User Registration Successful\",\r\n        `A new user has been successfully registered with email: \\`${email}\\`.`,\r\n        \"#4CAF50\",\r\n        [\r\n          { name: \"Email\", value: email, inline: true },\r\n          { name: \"Name\", value: name, inline: true },\r\n          { name: \"Discord ID\", value: data.id || \"N/A\", inline: true },\r\n        ],\r\n        { content: \"🟢 New user registered\", username: \"Auth Service\" },\r\n      )\r\n\r\n      return { user: newUser }\r\n    } catch (error) {\r\n      logWithLabel(\"error\", \"Failed to create user\");\r\n\r\n      // Notificación de error general\r\n      await this.notifier.sendWebhookNotification(\r\n        \"User Registration Error\",\r\n        `An error occurred during user registration.`,\r\n        \"#F44336\",\r\n        [\r\n          { name: \"Email\", value: body.email || \"N/A\", inline: true },\r\n          { name: \"Name\", value: body.name || \"N/A\", inline: true },\r\n          {\r\n            name: \"Error\",\r\n            value: error instanceof Error ? error.message : \"Unknown error\",\r\n            inline: false,\r\n          },\r\n        ],\r\n        { content: \"🔴 Registration error\", username: \"Auth Service\" },\r\n      );\r\n\r\n      if (error instanceof Prisma.PrismaClientKnownRequestError) {\r\n        return {\r\n          error: \"DATABASE_ERROR\",\r\n          message: \"Database operation failed\",\r\n          details: error.meta,\r\n        };\r\n      }\r\n\r\n      return { error: \"INTERNAL_SERVER_ERROR\", message: \"Failed to create user\" };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Authenticates a user with the provided credentials.\r\n   *\r\n   * This method validates the credentials, checks the user's existence, verifies the password,\r\n   * and returns a JWT token along with user data (excluding the password).\r\n   *\r\n   * @param credentials - An object containing the user's email and password.\r\n   * @returns A promise that resolves to an object containing the JWT token and user data, or an error response.\r\n   *\r\n   * @see [JWT Introduction](https://jwt.io/introduction)\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const loginResult = await authService.loginAuth({ email: \"test@example.com\", password: \"pass\" });\r\n   * ```\r\n   */\r\n  async loginAuth(credentials: Partial<User>) {\r\n    try {\r\n      const { email, password } = credentials;\r\n\r\n      // Validar campos requeridos\r\n      if (!email || !password) {\r\n        return { error: \"MISSING_DATA\", message: \"Email and password are required\" };\r\n      }\r\n\r\n      // Validar estructura de datos\r\n      const validation = AuthLogin.safeParse({ email, password });\r\n      if (!validation.success) {\r\n        return {\r\n          error: \"VALIDATION_ERROR\",\r\n          message: \"Invalid credentials format\",\r\n          details: validation.error.errors,\r\n        };\r\n      }\r\n\r\n      // Buscar usuario\r\n      const user = await  this.authRepository.findAuthByEmail(email);\r\n      if (!user) {\r\n        return { error: \"INVALID_CREDENTIALS\", message: \"Invalid email or password\" };\r\n      }\r\n\r\n      // Verificar contraseña\r\n      const isPasswordValid = await verified(password, user.password);\r\n      if (!isPasswordValid) {\r\n        return { error: \"INVALID_CREDENTIALS\", message: \"Invalid email or password\" };\r\n      }\r\n\r\n      // Generar token JWT\r\n      const token = signToken(user.id);\r\n\r\n      // Eliminar contraseña del objeto usuario\r\n      const { password: _, ...userWithoutPassword } = user;\r\n\r\n      return { token, user: userWithoutPassword };\r\n    } catch (error) {\r\n      console.error(\"Error in login:\", error);\r\n      return { error: \"INTERNAL_SERVER_ERROR\", message: \"Failed to authenticate user\" };\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"f8aefff9-c78d-5c04-a380-9e58bc9ce094"}
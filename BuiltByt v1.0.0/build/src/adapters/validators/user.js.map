{"version":3,"file":"user.js","sources":["src/adapters/validators/user.ts"],"sourceRoot":"/","sourcesContent":["import { z } from \"zod\";\r\n\r\n/**\r\n * Represents the roles that a user can have in the system.\r\n * \r\n * - `admin`: A user with administrative privileges.\r\n * - `user`: A regular user with standard access.\r\n * - `guest`: A user with limited access, typically not authenticated.\r\n * - `developer`: A user with development-related privileges.\r\n * - `owner`: A user with ownership privileges, typically the highest level of access.\r\n */\r\nexport type Roles = \"admin\" | \"user\" | \"guest\" | \"developer\" | \"owner\";\r\n\r\n/**\r\n * Schema for validating the data required for user registration.\r\n * \r\n * Fields:\r\n * - `email`: A valid email address.\r\n * - `password`: A password with a minimum length of 6 characters.\r\n * - `name`: A name with a minimum length of 3 characters.\r\n */\r\nexport const AuthRegister = z.object({\r\n  email: z.string().email(),\r\n  password: z.string().min(6),\r\n  name: z.string().min(3),\r\n});\r\n\r\nexport type AuthRegisterType = z.infer<typeof AuthRegister>;\r\n\r\n/**\r\n * Schema for validating the data required for user login.\r\n * \r\n * Fields:\r\n * - `email`: A valid email address.\r\n * - `password`: A password with a minimum length of 6 characters.\r\n */\r\nexport const AuthLogin = z.object({\r\n  email: z.string().email(),\r\n  password: z.string().min(6),\r\n});\r\n\r\n/**\r\n * Common types of authentication errors that can occur in the system.\r\n * \r\n * - `VALIDATION_ERROR`: Indicates that the provided data failed validation.\r\n * - `USER_NOT_FOUND`: Indicates that the user does not exist in the system.\r\n * - `USER_EXISTS`: Indicates that the user already exists in the system.\r\n * - `INVALID_CREDENTIALS`: Indicates that the provided credentials are invalid.\r\n * - `MISSING_DATA`: Indicates that required data is missing.\r\n * - `ENCRYPTION_ERROR`: Indicates an error occurred during encryption or decryption.\r\n * - `DATABASE_ERROR`: Indicates an error occurred while interacting with the database.\r\n * - `INTERNAL_SERVER_ERROR`: Indicates an unexpected internal server error.\r\n */\r\nexport type AuthErrorType = \r\n  | \"VALIDATION_ERROR\"\r\n  | \"USER_NOT_FOUND\"\r\n  | \"USER_EXISTS\"\r\n  | \"INVALID_CREDENTIALS\"\r\n  | \"MISSING_DATA\"\r\n  | \"ENCRYPTION_ERROR\"\r\n  | \"DATABASE_ERROR\"\r\n  | \"INTERNAL_SERVER_ERROR\";\r\n\r\n/**\r\n * Represents the structure of an error response returned by the system.\r\n * \r\n * Fields:\r\n * - `error`: The type of authentication error (see {@link AuthErrorType}).\r\n * - `message`: A human-readable message describing the error.\r\n * - `details`: Optional additional details about the error (e.g., validation errors).\r\n */\r\nexport type ErrorResponse = {\r\n  error: AuthErrorType;\r\n  message: string;\r\n  details?: any; // Additional details (e.g., validation errors)\r\n};"],"names":[],"mappings":";;;;;AAAA,6BAAwB;AAaxB;;;;;;;GAOG;AACU,QAAA,YAAY,GAAG,OAAC,CAAC,MAAM,CAAC;IACnC,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;IACzB,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;CACxB,CAAC,CAAC;AAIH;;;;;;GAMG;AACU,QAAA,SAAS,GAAG,OAAC,CAAC,MAAM,CAAC;IAChC,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;IACzB,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;CAC5B,CAAC,CAAC","debug_id":"297da986-58f8-5a9f-89fa-1952e97c3b70"}
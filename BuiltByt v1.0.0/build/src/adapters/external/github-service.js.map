{"version":3,"file":"github-service.js","sources":["src/adapters/external/github-service.ts"],"sourceRoot":"/","sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from \"axios\";\r\n\r\nimport { GithubMessage } from \"@typings/modules/discord\";\r\n\r\n/**\r\n * A service class for interacting with the GitHub API.\r\n * Provides methods to fetch user data, repositories, events, organizations, followers, and more.\r\n */\r\nexport class GitHubService {\r\n  private api: AxiosInstance;\r\n  private token: string | null;\r\n\r\n  /**\r\n   * Creates an instance of GitHubService.\r\n   * @param token Optional GitHub personal access token for authenticated requests.\r\n   */\r\n  constructor(token?: string) {\r\n    this.token = token || process.env.GITHUB_TOKEN || null;\r\n\r\n    this.api = axios.create({\r\n      baseURL: \"https://api.github.com\",\r\n      headers: {\r\n        Accept: \"application/vnd.github.v3+json\",\r\n        Authorization: this.token ? `token ${this.token}` : \"\",\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetches basic information about a GitHub user.\r\n   * @param username The GitHub username.\r\n   * @returns A promise that resolves to a `GitHubUser` object containing user details.\r\n   * @throws An error if the request fails.\r\n   */\r\n  async getUser(username: string): Promise<GithubMessage.User> {\r\n    try {\r\n      const response: AxiosResponse<GithubMessage.User> = await this.api.get(`/users/${username}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Error fetching user ${username}: ${error instanceof Error ? error.message : String(error)}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches the public repositories of a GitHub user.\r\n   * @param username The GitHub username.\r\n   * @param options Optional parameters for pagination and sorting.\r\n   * @returns A promise that resolves to an array of `GitHubRepo` objects.\r\n   * @throws An error if the request fails.\r\n   */\r\n  async getUserRepos(\r\n    username: string,\r\n    options?: {\r\n      per_page?: number;\r\n      page?: number;\r\n      sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\";\r\n      direction?: \"asc\" | \"desc\";\r\n    },\r\n  ): Promise<GithubMessage.Repo[]> {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      if (options?.per_page) params.append(\"per_page\", options.per_page.toString());\r\n      if (options?.page) params.append(\"page\", options.page.toString());\r\n      if (options?.sort) params.append(\"sort\", options.sort);\r\n      if (options?.direction) params.append(\"direction\", options.direction);\r\n\r\n      const response: AxiosResponse<GithubMessage.Repo[]> = await this.api.get(\r\n        `/users/${username}/repos?${params.toString()}`,\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Error fetching repos for ${username}: ${error instanceof Error ? error.message : String(error)}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches the public events of a GitHub user.\r\n   * @param username The GitHub username.\r\n   * @returns A promise that resolves to an array of `GitHubEvent` objects.\r\n   * @throws An error if the request fails.\r\n   */\r\n  async getUserEvents(username: string): Promise<GithubMessage.Event[]> {\r\n    try {\r\n      const response: AxiosResponse<GithubMessage.Event[]> = await this.api.get(\r\n        `/users/${username}/events`,\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Error fetching events for ${username}: ${error instanceof Error ? error.message : String(error)}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches the organizations a GitHub user belongs to.\r\n   * @param username The GitHub username.\r\n   * @returns A promise that resolves to an array of `GitHubOrganization` objects.\r\n   * @throws An error if the request fails.\r\n   */\r\n  async getUserOrganizations(username: string): Promise<GithubMessage.Organization[]> {\r\n    try {\r\n      const response: AxiosResponse<GithubMessage.Organization[]> = await this.api.get(\r\n        `/users/${username}/orgs`,\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Error fetching organizations for ${username}: ${error instanceof Error ? error.message : String(error)}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches the followers of a GitHub user.\r\n   * @param username The GitHub username.\r\n   * @returns A promise that resolves to an array of `GitHubFollower` objects.\r\n   * @throws An error if the request fails.\r\n   */\r\n  async getUserFollowers(username: string): Promise<GithubMessage.Follower[]> {\r\n    try {\r\n      const response: AxiosResponse<GithubMessage.Follower[]> = await this.api.get(\r\n        `/users/${username}/followers`,\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Error fetching followers for ${username}: ${error instanceof Error ? error.message : String(error)}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches the users followed by a GitHub user.\r\n   * @param username The GitHub username.\r\n   * @returns A promise that resolves to an array of `GitHubFollower` objects.\r\n   * @throws An error if the request fails.\r\n   */\r\n  async getUserFollowing(username: string): Promise<GithubMessage.Follower[]> {\r\n    try {\r\n      const response: AxiosResponse<GithubMessage.Follower[]> = await this.api.get(\r\n        `/users/${username}/following`,\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Error fetching following for ${username}: ${error instanceof Error ? error.message : String(error)}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches the public gists of a GitHub user.\r\n   * @param username The GitHub username.\r\n   * @returns A promise that resolves to an array of `GitHubGist` objects.\r\n   * @throws An error if the request fails.\r\n   */\r\n  async getUserGists(username: string): Promise<GithubMessage.Gist[]> {\r\n    try {\r\n      const response: AxiosResponse<GithubMessage.Gist[]> = await this.api.get(`/users/${username}/gists`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Error fetching gists for ${username}: ${error instanceof Error ? error.message : String(error)}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches detailed information about a specific GitHub repository.\r\n   * @param owner The owner of the repository.\r\n   * @param repo The name of the repository.\r\n   * @returns A promise that resolves to a `GitHubRepo` object.\r\n   * @throws An error if the request fails.\r\n   */\r\n  async getRepo(owner: string, repo: string): Promise<GithubMessage.Repo> {\r\n    try {\r\n      const response: AxiosResponse<GithubMessage.Repo> = await this.api.get(`/repos/${owner}/${repo}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Error fetching repo ${owner}/${repo}: ${error instanceof Error ? error.message : String(error)}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches all available data for a GitHub user in a single object.\r\n   * @param username The GitHub username.\r\n   * @returns A promise that resolves to an object containing user data, repositories, events, organizations, followers, following, and gists.\r\n   * @throws An error if any of the requests fail.\r\n   */\r\n  async getAllUserData(username: string): Promise<{\r\n    user: GithubMessage.User;\r\n    repos: GithubMessage.Repo[];\r\n    events: GithubMessage.Event[];\r\n    organizations: GithubMessage.Organization[];\r\n    followers: GithubMessage.Follower[];\r\n    following: GithubMessage.Follower[];\r\n    gists: GithubMessage.Gist[];\r\n  }> {\r\n    try {\r\n      const [user, repos, events, organizations, followers, following, gists] = await Promise.all([\r\n        this.getUser(username),\r\n        this.getUserRepos(username),\r\n        this.getUserEvents(username),\r\n        this.getUserOrganizations(username),\r\n        this.getUserFollowers(username),\r\n        this.getUserFollowing(username),\r\n        this.getUserGists(username),\r\n      ]);\r\n\r\n      return {\r\n        user,\r\n        repos,\r\n        events,\r\n        organizations,\r\n        followers,\r\n        following,\r\n        gists,\r\n      };\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Error fetching all data for ${username}: ${error instanceof Error ? error.message : String(error)}`,\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"c1de97ae-e52e-54c8-82cc-87cbc03c765e"}
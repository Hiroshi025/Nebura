{"version":3,"file":"passport.js","sources":["src/adapters/external/passport.ts"],"sourceRoot":"/","sourcesContent":["/**\r\n * Passport configuration for Discord authentication strategy.\r\n *\r\n * This module sets up Passport.js to use the Discord OAuth2 strategy,\r\n * including serialization and deserialization of user sessions.\r\n *\r\n * @module adapters/external/passport\r\n */\r\n\r\nimport passport from \"passport\";\r\nimport { Strategy } from \"passport-discord\";\r\n\r\nimport { hostURL } from \"@/shared/functions\";\r\nimport { config } from \"@utils/config\";\r\n\r\n//TODO Considerar agregar nuevos metodos de auth como google y la creacion de la cuenta con email y contraseÃ±a\r\n\r\n/**\r\n * Serializes the user object into the session.\r\n *\r\n * @param user - The user object to serialize.\r\n * @param done - Callback to signal completion.\r\n */\r\npassport.serializeUser((user: any, done: any) => {\r\n  done(null, user);\r\n});\r\n\r\n/**\r\n * Deserializes the user object from the session.\r\n *\r\n * @param obj - The serialized user object.\r\n * @param done - Callback to signal completion.\r\n */\r\npassport.deserializeUser((obj: any, done: any) => {\r\n  done(null, obj);\r\n});\r\n\r\n/**\r\n * Configures the Discord authentication strategy for Passport.\r\n *\r\n * Uses the Discord OAuth2 strategy to authenticate users via Discord.\r\n * The strategy is configured with client credentials and callback URL\r\n * from the application's configuration. The scope includes \"identify\"\r\n * and \"guilds\" to access basic user information and the user's guilds.\r\n *\r\n * The verification callback simply returns the Discord profile.\r\n */\r\npassport.use(\r\n  new Strategy(\r\n    {\r\n      /**\r\n       * The Discord application's client ID.\r\n       */\r\n      clientID: config.modules.discord.id,\r\n      /**\r\n       * The Discord application's client secret.\r\n       */\r\n      clientSecret: config.modules.discord.secret,\r\n      /**\r\n       * The callback URL to which Discord will redirect after authentication.\r\n       */\r\n      callbackURL: `${hostURL()}/${config.modules.discord.callback}`,\r\n      /**\r\n       * The OAuth2 scopes requested from Discord.\r\n       */\r\n      scope: [\"identify\", \"guilds\"],\r\n    },\r\n    /**\r\n     * Verification callback for the Discord strategy.\r\n     *\r\n     * @param _accessToken - The OAuth2 access token (unused).\r\n     * @param _refreshToken - The OAuth2 refresh token (unused).\r\n     * @param profile - The authenticated user's Discord profile.\r\n     * @param done - Callback to signal completion.\r\n     */\r\n    (_accessToken: string, _refreshToken: string, profile: any, done: any) => {\r\n      //console.log(profile);\r\n      process.nextTick(async () => {\r\n        return done(null, profile);\r\n      });\r\n    },\r\n  ),\r\n);\r\n\r\n/**\r\n * Exports the configured Passport instance.\r\n */\r\nexport { passport };\r\n"],"names":[],"mappings":";;;AAAA;;;;;;;GAOG;;;;;;AAEH,wDAAgC;AA8EvB,mBA9EF,kBAAQ,CA8EE;AA7EjB,uDAA4C;AAE5C,kDAA6C;AAC7C,0CAAuC;AAEvC,8GAA8G;AAE9G;;;;;GAKG;AACH,kBAAQ,CAAC,aAAa,CAAC,CAAC,IAAS,EAAE,IAAS,EAAE,EAAE;IAC9C,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC;AAEH;;;;;GAKG;AACH,kBAAQ,CAAC,eAAe,CAAC,CAAC,GAAQ,EAAE,IAAS,EAAE,EAAE;IAC/C,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC;AAEH;;;;;;;;;GASG;AACH,kBAAQ,CAAC,GAAG,CACV,IAAI,2BAAQ,CACV;IACE;;OAEG;IACH,QAAQ,EAAE,eAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;IACnC;;OAEG;IACH,YAAY,EAAE,eAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM;IAC3C;;OAEG;IACH,WAAW,EAAE,GAAG,IAAA,mBAAO,GAAE,IAAI,eAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE;IAC9D;;OAEG;IACH,KAAK,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;CAC9B;AACD;;;;;;;GAOG;AACH,CAAC,YAAoB,EAAE,aAAqB,EAAE,OAAY,EAAE,IAAS,EAAE,EAAE;IACvE,uBAAuB;IACvB,OAAO,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;QAC1B,OAAO,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC,CACF,CACF,CAAC","debug_id":"f5bbf058-0c57-5f5c-908c-a63a96a65d60"}
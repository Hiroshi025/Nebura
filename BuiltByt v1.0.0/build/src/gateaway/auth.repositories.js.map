{"version":3,"file":"auth.repositories.js","sources":["src/gateaway/auth.repositories.ts"],"sourceRoot":"/","sourcesContent":["import { AuthRegisterType } from \"@/adapters/validators/user\";\r\nimport { main } from \"@/main\";\r\nimport { RepositoryError } from \"@/shared/adapters/extends/error.extend\";\r\n\r\nexport class AuthRepository {\r\n  constructor() {}\r\n  public async createAuth(\r\n    data: AuthRegisterType,\r\n    discord?: { id: string; avatar: string; username: string; global_name: string },\r\n  ) {\r\n    try {\r\n      let dataCreate;\r\n      if (discord) {\r\n        dataCreate = await main.prisma.userAPI.create({\r\n          data: {\r\n            email: data.email,\r\n            password: data.password,\r\n            name: data.name,\r\n            discord: {\r\n              userId: discord.id,\r\n              userAvatar: discord.avatar,\r\n              userName: discord.username ? discord.username : discord.global_name,\r\n            },\r\n          },\r\n        });\r\n      } else {\r\n        dataCreate = await main.prisma.userAPI.create({\r\n          data: {\r\n            email: data.email,\r\n            password: data.password,\r\n            name: data.name,\r\n          },\r\n        });\r\n      }\r\n      return dataCreate ? dataCreate : false;\r\n    } catch (e) {\r\n      throw new RepositoryError(e instanceof Error ? e.message : \"Unknown repository error\");\r\n    }\r\n  }\r\n\r\n  public async findAuthByEmail(email: string) {\r\n    try {\r\n      const data = await main.prisma.userAPI.findUnique({\r\n        where: { email },\r\n      });\r\n\r\n      return data ? data : false;\r\n    } catch (e) {\r\n      throw new RepositoryError(e instanceof Error ? e.message : \"Unknown repository error\");\r\n    }\r\n  }\r\n\r\n  public async findAuthById(id: string) {\r\n    try {\r\n      const data = await main.prisma.userAPI.findUnique({\r\n        where: { id },\r\n      });\r\n\r\n      return data ? data : false;\r\n    } catch (e) {\r\n      throw new RepositoryError(e instanceof Error ? e.message : \"Unknown repository error\");\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;AACA,iCAA8B;AAC9B,yEAAyE;AAEzE,MAAa,cAAc;IACzB,gBAAe,CAAC;IACT,KAAK,CAAC,UAAU,CACrB,IAAsB,EACtB,OAA+E;QAE/E,IAAI,CAAC;YACH,IAAI,UAAU,CAAC;YACf,IAAI,OAAO,EAAE,CAAC;gBACZ,UAAU,GAAG,MAAM,WAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;oBAC5C,IAAI,EAAE;wBACJ,KAAK,EAAE,IAAI,CAAC,KAAK;wBACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;wBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,OAAO,EAAE;4BACP,MAAM,EAAE,OAAO,CAAC,EAAE;4BAClB,UAAU,EAAE,OAAO,CAAC,MAAM;4BAC1B,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW;yBACpE;qBACF;iBACF,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,UAAU,GAAG,MAAM,WAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;oBAC5C,IAAI,EAAE;wBACJ,KAAK,EAAE,IAAI,CAAC,KAAK;wBACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;wBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;qBAChB;iBACF,CAAC,CAAC;YACL,CAAC;YACD,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC;QACzC,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,MAAM,IAAI,8BAAe,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC;QACzF,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,eAAe,CAAC,KAAa;QACxC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,WAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;gBAChD,KAAK,EAAE,EAAE,KAAK,EAAE;aACjB,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAC7B,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,MAAM,IAAI,8BAAe,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC;QACzF,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,EAAU;QAClC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,WAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;gBAChD,KAAK,EAAE,EAAE,EAAE,EAAE;aACd,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAC7B,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,MAAM,IAAI,8BAAe,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC;QACzF,CAAC;IACH,CAAC;CACF;AA3DD,wCA2DC","debug_id":"5bcacaee-4d90-528b-a469-6d841f8cffdc"}
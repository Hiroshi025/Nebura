{"version":3,"file":"i18n.js","sources":["src/shared/i18n.ts"],"sourceRoot":"/","sourcesContent":["/**\r\n * @module i18n\r\n * @description\r\n * This module initializes and configures the i18next internationalization library\r\n * for the application, enabling multi-language support with file-system backend.\r\n *\r\n * It sets up language detection, namespace management, and backend loading for translation files.\r\n * The configuration is tailored for a Node.js environment using the `i18next-fs-backend` plugin.\r\n */\r\n\r\nimport i18next from \"i18next\";\r\nimport Backend from \"i18next-fs-backend\";\r\n\r\n/**\r\n * Initializes i18next with the following configuration:\r\n *\r\n * - `fallbackLng`: Default language to use if the detected language is not available.\r\n * - `preload`: Array of supported languages to preload.\r\n * - `ns`: List of namespaces to load (e.g., 'common', 'errors').\r\n * - `defaultNS`: Default namespace to use for translation keys.\r\n * - `backend.loadPath`: Path pattern to load translation files from the filesystem.\r\n * - `detection`: Language detection options, including order and caching in cookies.\r\n * - `interpolation.escapeValue`: Disables escaping since the environment is considered safe.\r\n * - `saveMissing`: Enables saving of missing translation keys for later review.\r\n *\r\n * @see https://www.i18next.com/\r\n * @see https://github.com/i18next/i18next-fs-backend\r\n */\r\ni18next.use(Backend).init({\r\n  fallbackLng: \"en\", // Default language\r\n  preload: [\"en\", \"es\", \"es-419\"], // Supported languages to preload\r\n  ns: [\"common\", \"errors\"], // Namespaces to load\r\n  defaultNS: \"common\", // Default namespace\r\n  backend: {\r\n    /**\r\n     * Path to load translation files.\r\n     * The placeholders `{{lng}}` and `{{ns}}` are replaced by the language code and namespace respectively.\r\n     * Example: './src/locales/en/common.json'\r\n     */\r\n    loadPath: \"./src/locales/{{lng}}/{{ns}}.json\",\r\n  },\r\n  detection: {\r\n    /**\r\n     * Order in which language detection is attempted.\r\n     * - 'header': Detect from HTTP headers.\r\n     * - 'querystring': Detect from URL query parameters.\r\n     * - 'cookie': Detect from browser cookies.\r\n     */\r\n    order: [\"header\", \"querystring\", \"cookie\"],\r\n    /**\r\n     * Specifies where to cache the detected language.\r\n     * In this case, the language is cached in cookies.\r\n     */\r\n    caches: [\"cookie\"],\r\n    /**\r\n     * Cookie configuration for language caching.\r\n     * - `path`: The path where the cookie is accessible.\r\n     * - `httpOnly`: If false, the cookie is accessible via JavaScript.\r\n     */\r\n    cookieOptions: { path: \"/\", httpOnly: false },\r\n  },\r\n  interpolation: {\r\n    /**\r\n     * Disables escaping of values during interpolation.\r\n     * This is safe in trusted environments (e.g., server-side rendering).\r\n     */\r\n    escapeValue: false,\r\n  },\r\n  /**\r\n   * If true, missing translation keys will be sent to the backend for saving.\r\n   */\r\n  saveMissing: true,\r\n});\r\n\r\n/**\r\n * Exports the configured i18next instance for use throughout the application.\r\n */\r\nexport default i18next;\r\n"],"names":[],"mappings":";;;AAAA;;;;;;;;GAQG;;;;;AAEH,sDAA8B;AAC9B,4EAAyC;AAEzC;;;;;;;;;;;;;;GAcG;AACH,iBAAO,CAAC,GAAG,CAAC,4BAAO,CAAC,CAAC,IAAI,CAAC;IACxB,WAAW,EAAE,IAAI,EAAE,mBAAmB;IACtC,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE,iCAAiC;IAClE,EAAE,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,qBAAqB;IAC/C,SAAS,EAAE,QAAQ,EAAE,oBAAoB;IACzC,OAAO,EAAE;QACP;;;;WAIG;QACH,QAAQ,EAAE,mCAAmC;KAC9C;IACD,SAAS,EAAE;QACT;;;;;WAKG;QACH,KAAK,EAAE,CAAC,QAAQ,EAAE,aAAa,EAAE,QAAQ,CAAC;QAC1C;;;WAGG;QACH,MAAM,EAAE,CAAC,QAAQ,CAAC;QAClB;;;;WAIG;QACH,aAAa,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE;KAC9C;IACD,aAAa,EAAE;QACb;;;WAGG;QACH,WAAW,EAAE,KAAK;KACnB;IACD;;OAEG;IACH,WAAW,EAAE,IAAI;CAClB,CAAC,CAAC;AAEH;;GAEG;AACH,kBAAe,iBAAO,CAAC","debug_id":"6affd452-79c0-57ab-b14d-f8637e04abc0"}
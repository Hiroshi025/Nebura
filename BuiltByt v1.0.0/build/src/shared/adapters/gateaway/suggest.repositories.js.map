{"version":3,"file":"suggest.repositories.js","sources":["src/shared/adapters/gateaway/suggest.repositories.ts"],"sourceRoot":"/","sourcesContent":["import { main } from \"@/main\";\r\nimport { DiscordError } from \"@/shared/adapters/extends/error.extend\";\r\nimport { Suggest } from \"@typings/modules/discord\";\r\n\r\n/**\r\n * Repository class for managing Suggestion entities in the database.\r\n * Provides methods to create, update, and retrieve suggestions, as well as manage upvotes, downvotes, and status changes.\r\n */\r\nexport class SuggestRepository {\r\n  constructor() {}\r\n\r\n  /**\r\n   * Creates a new suggestion in the database.\r\n   * @param suggest Partial suggestion object containing required fields.\r\n   * @throws {DiscordError} If required data is missing or invalid.\r\n   * @returns The created suggestion object or false if creation failed.\r\n   */\r\n  public async createSuggest(suggest: Partial<Suggest>) {\r\n    if (\r\n      !suggest ||\r\n      !suggest.suggestId ||\r\n      !suggest.messageId ||\r\n      !suggest.content ||\r\n      !suggest.authorId ||\r\n      !suggest.guildId ||\r\n      !suggest.status\r\n    ) {\r\n      throw new DiscordError(\"Invalid data provided for creating a suggestion.\");\r\n    }\r\n\r\n    const data = await main.prisma.suggestion.create({\r\n      data: {\r\n        suggestId: suggest.suggestId,\r\n        messageId: suggest.messageId,\r\n        content: suggest.content,\r\n        imageUrl: suggest.imageUrl,\r\n        authorId: suggest.authorId,\r\n        guildId: suggest.guildId,\r\n        status: suggest.status,\r\n      },\r\n    });\r\n\r\n    return data ? data : false;\r\n  }\r\n\r\n  /**\r\n   * Updates the upvote-related fields of a suggestion.\r\n   * @param data Partial suggestion object containing upvote-related fields.\r\n   * @param messageId The message ID of the suggestion to update.\r\n   * @throws {DiscordError} If data or messageId is missing or invalid.\r\n   * @returns The updated suggestion object or false if update failed.\r\n   */\r\n  public async updateUpvote(data: Partial<Suggest>, messageId: string) {\r\n    if (!data || !messageId) {\r\n      throw new DiscordError(\"Invalid data provided for updating upvotes.\");\r\n    }\r\n\r\n    const updatedData = await main.prisma.suggestion.update({\r\n      where: { messageId: messageId },\r\n      data: {\r\n        upvotes: data.upvotes,\r\n        downvotes: data.downvotes,\r\n        voters: data.voters,\r\n        downvoters: data.downvoters,\r\n        lastVoter: data.lastVoter,\r\n      },\r\n    });\r\n\r\n    return updatedData ? updatedData : false;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a suggestion by its unique suggest ID.\r\n   * @param suggestId The unique suggest ID or message ID of the suggestion.\r\n   * @throws {DiscordError} If suggestId is missing or invalid.\r\n   * @returns The found suggestion object or false if not found.\r\n   */\r\n  public async getSuggestById(suggestId: string) {\r\n    if (!suggestId) {\r\n      throw new DiscordError(\"Invalid suggest ID provided.\");\r\n    }\r\n\r\n    const data = await main.prisma.suggestion.findUnique({\r\n      where: { messageId: suggestId },\r\n    });\r\n\r\n    return data ? data : false;\r\n  }\r\n\r\n  /**\r\n   * Updates the downvote-related fields of a suggestion.\r\n   * @param data Partial suggestion object containing downvote-related fields.\r\n   * @param messageId The message ID of the suggestion to update.\r\n   * @throws {DiscordError} If data or messageId is missing or invalid.\r\n   * @returns The updated suggestion object or false if update failed.\r\n   */\r\n  public async updateDownvote(data: Partial<Suggest>, messageId: string) {\r\n    if (!data || !messageId) {\r\n      throw new DiscordError(\"Invalid data provided for updating downvotes.\");\r\n    }\r\n\r\n    const dataSuggest = await main.prisma.suggestion.update({\r\n      where: { messageId: messageId },\r\n      data: {\r\n        upvotes: data.upvotes,\r\n        downvotes: data.downvotes,\r\n        voters: data.voters,\r\n        downvoters: data.downvoters,\r\n        lastVoter: data.lastVoter,\r\n      },\r\n    });\r\n\r\n    return dataSuggest ? dataSuggest : false;\r\n  }\r\n\r\n  /**\r\n   * Updates the status of a suggestion, marking it as resolved.\r\n   * @param suggestId The unique suggest ID or message ID of the suggestion.\r\n   * @param status The new status to set for the suggestion.\r\n   * @param resolvedBy The ID of the user who resolved the suggestion.\r\n   * @throws {DiscordError} If suggestId, status, or resolvedBy is missing or invalid.\r\n   * @returns The updated suggestion object or false if update failed.\r\n   */\r\n  public async updateStatus(suggestId: string, status: string, resolvedBy: string) {\r\n    if (!suggestId || !status || !resolvedBy) {\r\n      throw new DiscordError(\"Invalid suggest ID or status provided.\");\r\n    }\r\n\r\n    const data = await main.prisma.suggestion.update({\r\n      where: { messageId: suggestId },\r\n      data: { status: status, resolvedBy: resolvedBy, resolvedAt: new Date() },\r\n    });\r\n\r\n    return data ? data : false;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"256141c0-e51c-5174-91a9-6bd13f5465ff"}
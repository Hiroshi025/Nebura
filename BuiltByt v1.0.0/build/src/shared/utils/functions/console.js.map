{"version":3,"file":"console.js","sources":["src/shared/utils/functions/console.ts"],"sourceRoot":"/","sourcesContent":["import chalk from \"chalk\";\r\nimport os from \"os\";\r\nimport path from \"path\";\r\n\r\nimport Sentry from \"@sentry/node\";\r\nimport { LogContext } from \"@typings/utils\";\r\nimport { WinstonLogger } from \"@utils/winston\";\r\n\r\nimport { config } from \"../config\";\r\n\r\n/**\r\n * Represents the types of labels that can be used for logging purposes.\r\n * Each label corresponds to a specific category of log messages.\r\n */\r\ntype Labels =\r\n  | \"error\"       // Represents an error message.\r\n  | \"success\"     // Represents a success message.\r\n  | \"debug\"       // Represents a debug message.\r\n  | \"info\"        // Represents an informational message.\r\n  | \"warn\"        // Represents a warning message.\r\n  | \"cache\"       // Represents a cache-related message.\r\n  | \"api\"         // Represents an API-related message.\r\n  | \"IPBlocker\"   // Represents a message related to IP blocking.\r\n  | \"LicenseIP\"   // Represents a message related to license IP management.\r\n  | \"cluster\"     // Represents a message related to clustering.\r\n  | \"maintenance\" // Represents a message related to maintenance operations.\r\n\r\n/**\r\n * A mapping of log labels to their corresponding colors.\r\n * Each label is associated with a specific color for better visual distinction in logs.\r\n */\r\nconst labelColors: Record<Labels, chalk.Chalk> = {\r\n  error: chalk.redBright,          // Bright red for error messages.\r\n  success: chalk.greenBright,      // Bright green for success messages.\r\n  debug: chalk.magentaBright,      // Bright magenta for debug messages.\r\n  info: chalk.blueBright,          // Bright blue for informational messages.\r\n  maintenance: chalk.hex(\"#FFA500\"), // Orange for maintenance messages.\r\n  warn: chalk.yellowBright,        // Bright yellow for warning messages.\r\n  cache: chalk.hex(\"#5c143b\"),     // Custom dark purple for cache messages.\r\n  api: chalk.hex(\"#FFA500\"),       // Orange for API-related messages.\r\n  IPBlocker: chalk.hex(\"#FFA500\"), // Orange for IP blocker messages.\r\n  LicenseIP: chalk.hex(\"#FFA500\"), // Orange for license IP messages.\r\n  cluster: chalk.hex(\"#EB5C2D\"),   // Custom orange-red for cluster messages.\r\n};\r\n\r\n/**\r\n * A mapping of log labels to their corresponding display names.\r\n * These names are used as prefixes in log messages for better readability.\r\n */\r\nconst labelNames: Record<Labels, string> = {\r\n  error: \"Error\",           // Display name for error messages.\r\n  success: \"Success\",       // Display name for success messages.\r\n  debug: \"Debug\",           // Display name for debug messages.\r\n  info: \"Info\",             // Display name for informational messages.\r\n  maintenance: \"Maintenance\", // Display name for maintenance messages.\r\n  warn: \"Warn\",             // Display name for warning messages.\r\n  cache: \"Cache\",           // Display name for cache messages.\r\n  IPBlocker: \"IP\",  // Display name for IP blocker messages.\r\n  api: \"API\",               // Display name for API-related messages.\r\n  LicenseIP: \"License\",  // Display name for license IP messages.\r\n  cluster: \"Cluster\",       // Display name for cluster messages.\r\n};\r\n\r\nconst logger = new WinstonLogger();\r\ntype LogLevel = Labels | \"debug\" | \"verbose\" | \"warning\";\r\n\r\n// Constants for consistent formatting\r\nconst LABEL_WIDTH = 12;\r\nconst ORIGIN_WIDTH = 20;\r\nconst TIME_WIDTH = 24;\r\n\r\n/**\r\n * Logs a message with a specific label and additional context or error information.\r\n *\r\n * This function formats the log output with consistent widths for labels, origins, and timestamps.\r\n * It also integrates with Winston for structured logging and Sentry for error tracking.\r\n *\r\n * @param level - The log level or label. Can be a predefined label, \"debug\", \"verbose\", \"warning\", or \"custom\".\r\n * @param message - The main log message to display.\r\n * @param options - Optional parameters for additional context or error information.\r\n * @param options.customLabel - A custom label to use when the level is \"custom\".\r\n * @param options.context - Additional context data to include in the log. Only displayed in development mode.\r\n * @param options.error - An error object to include in the log. Its stack trace will be displayed if available.\r\n *\r\n * @throws {Error} If the level is \"custom\" and no custom label is provided.\r\n */\r\nexport async function logWithLabel(\r\n  level: LogLevel | \"custom\",\r\n  message: string,\r\n  options?: {\r\n    customLabel?: string;\r\n    context?: LogContext;\r\n    error?: Error;\r\n  },\r\n) {\r\n  // Validación de parámetros\r\n  if (level === \"custom\" && !options?.customLabel) {\r\n    throw new Error(\"Custom label name must be provided when using custom level.\");\r\n  }\r\n\r\n  // Configuración de etiquetas\r\n  const labelName = level === \"custom\" ? options!.customLabel! : labelNames[level as Labels];\r\n  const labelColor = level === \"custom\" ? chalk.hex(\"#5c143b\") : labelColors[level as Labels];\r\n\r\n  // Obtener información del sistema\r\n  const hostname = os.hostname();\r\n  const pid = process.pid;\r\n  const appVersion = config.project.version;\r\n\r\n  // Obtener origen del log\r\n  const origin = getLogOrigin();\r\n  const time = new Date().toISOString();\r\n\r\n  // Format components with consistent widths\r\n  const formattedLabel = labelColor(labelName.padEnd(LABEL_WIDTH, \" \"));\r\n  const formattedAppInfo = chalk.hex(\"#ffffbf\")(\r\n    `${config.project.name}@${appVersion}`.padEnd(20, \" \"),\r\n  );\r\n  const formattedHost = chalk.grey(`[${hostname}:${pid}]`.padEnd(15, \" \"));\r\n\r\n  // Truncate or pad the origin for consistent width\r\n  let formattedOrigin = origin;\r\n  if (origin.length > ORIGIN_WIDTH) {\r\n    const ext = path.extname(origin);\r\n    const basename = path.basename(origin, ext);\r\n    const truncatedBasename = basename.substring(0, ORIGIN_WIDTH - ext.length - 3) + \"...\";\r\n    formattedOrigin = chalk.grey(`${truncatedBasename}${ext}`.padEnd(ORIGIN_WIDTH, \" \"));\r\n  } else {\r\n    formattedOrigin = chalk.grey(origin.padEnd(ORIGIN_WIDTH, \" \"));\r\n  }\r\n\r\n  const formattedTime = chalk.hex(\"#386ce9\")(`[${time}]`.padEnd(TIME_WIDTH, \" \"));\r\n\r\n  // Build the main log line\r\n  const mainLineParts = [\r\n    `${formattedLabel}→`, // Arrow after label\r\n    formattedAppInfo,\r\n    formattedHost,\r\n    formattedOrigin,\r\n    `${formattedTime}\\n`,\r\n    message,\r\n  ];\r\n\r\n  console.log(mainLineParts.join(\" \"));\r\n\r\n  /**\r\n   * Logs additional context data if provided and the environment is set to \"development\".\r\n   * The context is formatted as a JSON string and indented for readability.\r\n   */\r\n  if (process.env.NODE_ENV === \"development\" && options?.context) {\r\n    const contextStr = JSON.stringify(options.context, null, 2)\r\n      .split(\"\\n\")\r\n      .map((line) => `  ${line}`)\r\n      .join(\"\\n\");\r\n    console.log(chalk.hex(\"#2aa198\")(`  Context:\\n${contextStr}`));\r\n  }\r\n\r\n  /**\r\n   * Logs the stack trace of an error if provided. The stack trace is indented for readability.\r\n   * If no stack trace is available, a default message is displayed.\r\n   */\r\n  if (options?.error) {\r\n    const errorStack =\r\n      options.error.stack\r\n        ?.split(\"\\n\")\r\n        .map((line) => `  ${line}`)\r\n        .join(\"\\n\") || \"No stack available\";\r\n    console.log(chalk.red(`  Error Stack:\\n${errorStack}`));\r\n  }\r\n\r\n  // Winston logging\r\n  logger.info(message, level === \"custom\" ? options!.customLabel! : labelName);\r\n\r\n  // Sentry integration for errors\r\n  if (level === \"error\") {\r\n    Sentry.withScope((scope) => {\r\n      if (options?.context) {\r\n        scope.setExtras(options.context);\r\n      }\r\n      if (options?.error) {\r\n        scope.setExtra(\"stack\", options.error.stack);\r\n      }\r\n      Sentry.captureException(options?.error || new Error(message));\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves the origin file path of the log call.\r\n *\r\n * This function analyzes the stack trace to determine the file and line number where the log function was called.\r\n * It skips frames related to the logger itself and attempts to return a relative path from the project root.\r\n *\r\n * @returns {string} The relative file path of the log origin, or \"unknown\" if it cannot be determined.\r\n */\r\nconst getLogOrigin = (): string => {\r\n  try {\r\n    const originalPrepare = Error.prepareStackTrace;\r\n    Error.prepareStackTrace = (_, stack) => stack;\r\n\r\n    const err = new Error();\r\n    const stack = err.stack as unknown as NodeJS.CallSite[];\r\n    Error.prepareStackTrace = originalPrepare;\r\n\r\n    if (!Array.isArray(stack)) return \"unknown\";\r\n\r\n    // Skip frames from this file and logger-related files\r\n    const currentFile = __filename;\r\n    const loggerFiles = [\"logger\", \"log\", \"winston\"]; // Add other logger-related keywords if needed\r\n\r\n    for (const frame of stack.slice(1)) {\r\n      const fileName = frame.getFileName();\r\n      if (!fileName) continue;\r\n\r\n      const isLoggerFile = loggerFiles.some((keyword) => fileName.toLowerCase().includes(keyword));\r\n\r\n      if (fileName !== currentFile && !isLoggerFile) {\r\n        // Return relative path from project root if possible\r\n        const projectRoot = path.join(__dirname, \"../../\");\r\n        const relativePath = path.relative(projectRoot, fileName);\r\n        return relativePath || path.basename(fileName);\r\n      }\r\n    }\r\n\r\n    return \"unknown\";\r\n  } catch {\r\n    return \"unknown\";\r\n  }\r\n};\r\n"],"names":[],"mappings":"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","debug_id":"1fc24d09-26f4-52f3-8832-76471b58f91f"}
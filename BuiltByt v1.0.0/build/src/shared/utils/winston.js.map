{"version":3,"file":"winston.js","sources":["src/shared/utils/winston.ts"],"sourceRoot":"/","sourcesContent":["import \"winston-daily-rotate-file\";\r\n\r\nimport fs from \"fs\";\r\nimport { DateTime } from \"luxon\";\r\nimport path from \"path\";\r\nimport winston, { LogEntry } from \"winston\";\r\n\r\nimport { LogFile } from \"@/typings/utils\";\r\n\r\n/**\r\n * A logger utility class that wraps the Winston logging library.\r\n * Provides features such as daily log rotation, log cleanup, and log retrieval.\r\n */\r\nexport class WinstonLogger {\r\n  private logger: winston.Logger;\r\n  public logDir: string;\r\n  public maxLogAgeDays: number;\r\n\r\n  /**\r\n   * Creates an instance of WinstonLogger.\r\n   * @param maxLogAgeDays - The maximum age of log files in days before they are deleted. Defaults to 14 days.\r\n   */\r\n  constructor(maxLogAgeDays: number = 14) {\r\n    this.logDir = path.resolve(\r\n      process.env.WINSTON_LOG_DIR ? process.env.WINSTON_LOG_DIR : \"./config/logs-apps/proyect\",\r\n    );\r\n    if (!fs.existsSync(this.logDir)) {\r\n      fs.mkdirSync(this.logDir, { recursive: true });\r\n    }\r\n    this.maxLogAgeDays = maxLogAgeDays;\r\n    this.ensureDirExists();\r\n\r\n    winston.addColors({\r\n      error: \"red\",\r\n      warn: \"yellow\",\r\n      info: \"green\",\r\n      debug: \"blue\",\r\n      verbose: \"cyan\",\r\n      http: \"magenta\",\r\n    });\r\n\r\n    this.logger = winston.createLogger({\r\n      levels: {\r\n        error: 0,\r\n        warn: 1,\r\n        info: 2,\r\n        debug: 3,\r\n        verbose: 4,\r\n        http: 5,\r\n      },\r\n      format: winston.format.combine(\r\n        winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss.SSS\" }),\r\n        winston.format.colorize(),\r\n        winston.format.printf(({ timestamp, level, message, category }) => {\r\n          // Formato típico de log: [fecha] [nivel] [categoría] mensaje\r\n          return `[${timestamp}] [${level}]${category ? ` [${category}]` : \"\"} ${message}`;\r\n        }),\r\n      ),\r\n      transports: [\r\n        new winston.transports.DailyRotateFile({\r\n          filename: path.join(this.logDir, \"app-%DATE%.log\"),\r\n          datePattern: \"YYYY-MM-DD\",\r\n          zippedArchive: true,\r\n          maxSize: \"5m\",\r\n          maxFiles: \"14d\",\r\n          // Cambia el formato del archivo .log a texto plano\r\n          format: winston.format.combine(\r\n            winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss.SSS\" }),\r\n            winston.format.printf(({ timestamp, level, message, category }) => {\r\n              return `[${timestamp}] [${level}]${category ? ` [${category}]` : \"\"} ${message}`;\r\n            }),\r\n          ),\r\n        }),\r\n      ],\r\n    });\r\n\r\n    this.cleanOldLogs();\r\n  }\r\n\r\n  /**\r\n   * Ensures that the log directory exists. Creates it if it does not exist.\r\n   */\r\n  private ensureDirExists(): void {\r\n    if (!fs.existsSync(this.logDir)) {\r\n      fs.mkdirSync(this.logDir, { recursive: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleans up old log files based on the maximum log age.\r\n   * @returns An object containing the number of deleted and remaining log files.\r\n   */\r\n  public cleanOldLogs(): { deleted: number; remaining: number } {\r\n    const files = fs.readdirSync(this.logDir);\r\n    const cutoffDate = DateTime.now().minus({ days: this.maxLogAgeDays });\r\n    let deletedCount = 0;\r\n\r\n    files.forEach((file) => {\r\n      if (file.match(/app-\\d{4}-\\d{2}-\\d{2}(\\.log|\\.gz)$/)) {\r\n        const filePath = path.join(this.logDir, file);\r\n        const stats = fs.statSync(filePath);\r\n        const fileDate = DateTime.fromJSDate(stats.mtime);\r\n\r\n        if (fileDate < cutoffDate) {\r\n          try {\r\n            fs.unlinkSync(filePath);\r\n            deletedCount++;\r\n          } catch (error) {\r\n            this.logger.error(`Error deleting old file: ${file}`, {\r\n              error: (error as Error).message,\r\n              category: \"Logger\",\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const remainingFiles = files.length - deletedCount;\r\n    return { deleted: deletedCount, remaining: remainingFiles };\r\n  }\r\n\r\n  /**\r\n   * Schedules periodic cleanup of old log files.\r\n   * @param intervalHours - The interval in hours at which cleanup should occur. Defaults to 24 hours.\r\n   * @returns A NodeJS.Timeout object representing the scheduled interval.\r\n   */\r\n  public scheduleCleanup(intervalHours: number = 24): NodeJS.Timeout {\r\n    return setInterval(\r\n      () => {\r\n        const result = this.cleanOldLogs();\r\n        this.logger.info(\r\n          `Automatic cleanup completed. Deleted: ${result.deleted}, Remaining: ${result.remaining}`,\r\n          {\r\n            category: \"Logger\",\r\n          },\r\n        );\r\n      },\r\n      intervalHours * 60 * 60 * 1000,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Logs an error message.\r\n   * @param message - The error message to log.\r\n   * @param category - An optional category for the log entry.\r\n   */\r\n  public error(message: string, category?: string): void {\r\n    this.logger.error(message, { category });\r\n  }\r\n\r\n  /**\r\n   * Logs a warning message.\r\n   * @param message - The warning message to log.\r\n   * @param category - An optional category for the log entry.\r\n   */\r\n  public warn(message: string, category?: string): void {\r\n    this.logger.warn(message, { category });\r\n  }\r\n\r\n  /**\r\n   * Logs an informational message.\r\n   * @param message - The informational message to log.\r\n   * @param category - An optional category for the log entry.\r\n   */\r\n  public info(message: string, category?: string): void {\r\n    this.logger.info(message, { category });\r\n  }\r\n\r\n  /**\r\n   * Logs a debug message.\r\n   * @param message - The debug message to log.\r\n   * @param category - An optional category for the log entry.\r\n   */\r\n  public debug(message: string, category?: string): void {\r\n    this.logger.debug(message, { category });\r\n  }\r\n\r\n  /**\r\n   * Logs a verbose message.\r\n   * @param message - The verbose message to log.\r\n   * @param category - An optional category for the log entry.\r\n   */\r\n  public verbose(message: string, category?: string): void {\r\n    this.logger.verbose(message, { category });\r\n  }\r\n\r\n  /**\r\n   * Logs an HTTP-related message.\r\n   * @param message - The HTTP message to log.\r\n   * @param category - An optional category for the log entry.\r\n   */\r\n  public http(message: string, category?: string): void {\r\n    this.logger.log(\"http\", message, { category });\r\n  }\r\n\r\n  /**\r\n   * Retrieves recent log files within a specified number of days.\r\n   * @param days - The number of days to look back for log files. Defaults to 7 days.\r\n   * @returns An array of LogFile objects representing the recent log files.\r\n   */\r\n  public getRecentLogs(days: number = 7): LogFile[] {\r\n    try {\r\n      const cutoffDate = DateTime.now().minus({ days });\r\n\r\n      return fs\r\n        .readdirSync(this.logDir)\r\n        .filter((file) => file.match(/app-\\d{4}-\\d{2}-\\d{2}(\\.log|\\.gz)$/))\r\n        .map((file) => {\r\n          const filePath = path.join(this.logDir, file);\r\n          const stats = fs.statSync(filePath);\r\n          const fileDate = DateTime.fromJSDate(stats.mtime);\r\n\r\n          return {\r\n            filename: file,\r\n            path: filePath,\r\n            lastModified: fileDate.toISO() || \"\",\r\n            size: this.formatSize(stats.size),\r\n            isCompressed: file.endsWith(\".gz\"),\r\n          };\r\n        })\r\n        .filter((file) => DateTime.fromISO(file.lastModified) >= cutoffDate)\r\n        .sort((a, b) => b.lastModified.localeCompare(a.lastModified));\r\n    } catch (error) {\r\n      this.error(`Error reading records: ${(error as Error).message}`, \"Logger\");\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Formats a file size in bytes into a human-readable string.\r\n   * @param bytes - The size in bytes.\r\n   * @returns A formatted string representing the size (e.g., \"1.23 MB\").\r\n   */\r\n  private formatSize(bytes: number): string {\r\n    const units = [\"B\", \"KB\", \"MB\", \"GB\"];\r\n    if (bytes === 0) return \"0 B\";\r\n    const exp = Math.floor(Math.log(bytes) / Math.log(1024));\r\n    return `${(bytes / Math.pow(1024, exp)).toFixed(2)} ${units[exp]}`;\r\n  }\r\n\r\n  /**\r\n   * Reads the content of a specific log file.\r\n   * @param filename - The name of the log file to read.\r\n   * @returns A promise that resolves to an array of log entries.\r\n   */\r\n  public async getLogContent(filename: string): Promise<LogEntry[]> {\r\n    const filePath = path.join(this.logDir, filename);\r\n\r\n    if (!fs.existsSync(filePath)) {\r\n      this.error(`File not found: ${filename}`, \"Logger\");\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      const content = fs.readFileSync(filePath, \"utf-8\");\r\n      return content\r\n        .split(\"\\n\")\r\n        .filter((line) => line.trim())\r\n        .map((line) => JSON.parse(line));\r\n    } catch (error) {\r\n      this.error(`Error reading file: ${(error as Error).message}`, \"Logger\");\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepares log data for API consumption.\r\n   * @param days - The number of days to include in the log data. Defaults to 1 day.\r\n   * @returns An object containing the logs and their statistics.\r\n   */\r\n  public prepareForAPI(days: number = 1): {\r\n    logs: LogFile[];\r\n    stats: {\r\n      total: number;\r\n      totalSize: string;\r\n      oldest: string | null;\r\n      newest: string | null;\r\n    };\r\n  } {\r\n    const logs = this.getRecentLogs(days);\r\n    const sizes = logs.map((l) => {\r\n      const sizeStr = l.size.replace(/[^\\d.]/g, \"\");\r\n      return (\r\n        parseFloat(sizeStr) * (l.size.includes(\"KB\") ? 1024 : l.size.includes(\"MB\") ? 1024 ** 2 : 1)\r\n      );\r\n    });\r\n    const totalSize = sizes.reduce((sum, size) => sum + size, 0);\r\n\r\n    return {\r\n      logs,\r\n      stats: {\r\n        total: logs.length,\r\n        totalSize: this.formatSize(totalSize),\r\n        oldest: logs[logs.length - 1]?.lastModified || null,\r\n        newest: logs[0]?.lastModified || null,\r\n      },\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"a38dc226-1a54-5322-8e40-a4efda22c177"}
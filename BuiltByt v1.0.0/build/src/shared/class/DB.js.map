{"version":3,"file":"DB.js","sources":["src/shared/class/DB.ts"],"sourceRoot":"/","sourcesContent":["import { ObjectId } from \"bson\"; // BSON library for working with ObjectId: https://www.npmjs.com/package/bson\r\n\r\nimport { main } from \"@/main\";\r\nimport { MyClient } from \"@modules/discord/client\";\r\nimport { config } from \"@utils/config\";\r\n\r\n/**\r\n * The client ID from environment variables.\r\n * @type {string | undefined}\r\n */\r\nconst { CLIENT_ID, API_VERSION, TOKEN_DISCORD } = process.env;\r\n\r\n/**\r\n * The concatenated client ID and API version, used as a unique identifier for the client.\r\n * @type {string}\r\n */\r\nexport const clientID: string = `${CLIENT_ID}${API_VERSION}`;\r\nconst validId = new ObjectId().toHexString();\r\nconst data = config.modules.discord;\r\n\r\n/**\r\n * Service for managing and accessing client, Discord, WhatsApp, and modules data using Prisma.\r\n *\r\n * Provides methods to create and retrieve records for Discord, WhatsApp, modules, and client entities.\r\n *\r\n * @see [Prisma Documentation](https://www.prisma.io/docs/)\r\n * @see [BSON ObjectId](https://www.mongodb.com/docs/manual/reference/method/ObjectId/)\r\n */\r\nexport class DBPrisma {\r\n  constructor() {}\r\n\r\n  /**\r\n   * Creates or updates the Discord, WhatsApp, modules, and client records in the database.\r\n   *\r\n   * Uses Prisma's upsert operation to ensure records exist and are updated as needed.\r\n   *\r\n   * @param discordClient - The Discord client instance.\r\n   * @param session - The WhatsApp session identifier.\r\n   * @returns A promise that resolves to the upserted client record.\r\n   *\r\n   * @see [Prisma Upsert](https://www.prisma.io/docs/orm/prisma-client/queries/upsert)\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const client = await dbPrisma.createClient(discordClient, \"session123\");\r\n   * ```\r\n   */\r\n  public async createClient(discordClient: MyClient, session: string) {\r\n    const discord = await main.prisma.discord.upsert({\r\n      where: { clientId: discordClient.user?.id as string },\r\n      update: {\r\n        token: TOKEN_DISCORD as string,\r\n        clientId: data.id,\r\n        clientSecret: data.secret,\r\n      },\r\n      create: {\r\n        token: TOKEN_DISCORD as string,\r\n        clientId: data.id,\r\n        clientSecret: data.secret,\r\n        owners: data.owners,\r\n      },\r\n    });\r\n\r\n    const whatsapp = await main.prisma.whatsApp.upsert({\r\n      where: { session },\r\n      update: {\r\n        session,\r\n      },\r\n      create: {\r\n        session,\r\n        updatedAt: new Date(),\r\n      },\r\n    });\r\n\r\n    const modules = await main.prisma.modules.upsert({\r\n      where: {\r\n        whatsappId: whatsapp.id,\r\n        discordId: discord.id,\r\n      },\r\n      update: {\r\n        whatsappId: whatsapp.id,\r\n        discordId: discord.id,\r\n      },\r\n      create: {\r\n        whatsappId: whatsapp.id,\r\n        discordId: discord.id,\r\n      },\r\n    });\r\n\r\n    const client = await main.prisma.client.upsert({\r\n      where: { clientId: clientID },\r\n      update: {\r\n        name: config.project.name,\r\n        version: API_VERSION,\r\n      },\r\n      create: {\r\n        id: validId,\r\n        clientId: clientID,\r\n        name: config.project.name,\r\n        version: API_VERSION as string,\r\n        modulesId: modules.id,\r\n      },\r\n    });\r\n\r\n    return client;\r\n  }\r\n\r\n  /**\r\n   * Finds a Discord record by its client ID.\r\n   *\r\n   * @param clientId - The Discord client ID.\r\n   * @returns A promise that resolves to the Discord record or null if not found.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const discord = await dbPrisma.findDiscord(\"discordClientId\");\r\n   * ```\r\n   */\r\n  public async findDiscord(clientId: string) {\r\n    const discord = await main.prisma.discord.findFirst({\r\n      where: { clientId },\r\n    });\r\n\r\n    return discord;\r\n  }\r\n\r\n  /**\r\n   * Finds a WhatsApp record by its session identifier.\r\n   *\r\n   * @param session - The WhatsApp session string.\r\n   * @returns A promise that resolves to the WhatsApp record or null if not found.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const whatsapp = await dbPrisma.findWhatsApp(\"session123\");\r\n   * ```\r\n   */\r\n  public async findWhatsApp(session: string) {\r\n    const whatsapp = await main.prisma.whatsApp.findFirst({\r\n      where: { session },\r\n    });\r\n\r\n    return whatsapp;\r\n  }\r\n\r\n  /**\r\n   * Finds a modules record by WhatsApp and Discord IDs.\r\n   *\r\n   * Includes related WhatsApp and Discord data.\r\n   *\r\n   * @param whatsappId - The WhatsApp record ID.\r\n   * @param discordId - The Discord record ID.\r\n   * @returns A promise that resolves to the modules record or null if not found.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const modules = await dbPrisma.findModules(\"whatsappId\", \"discordId\");\r\n   * ```\r\n   */\r\n  public async findModules(whatsappId: string, discordId: string) {\r\n    const modules = await main.prisma.modules.findFirst({\r\n      where: {\r\n        whatsappId,\r\n        discordId,\r\n      },\r\n      include: {\r\n        whatsapp: true,\r\n        discord: true,\r\n      },\r\n    });\r\n\r\n    return modules;\r\n  }\r\n\r\n  /**\r\n   * Finds a client record by its client ID.\r\n   *\r\n   * Includes related modules, WhatsApp, and Discord data.\r\n   *\r\n   * @param clientId - The client ID.\r\n   * @returns A promise that resolves to the client record or null if not found.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const client = await dbPrisma.findClient(\"clientId\");\r\n   * ```\r\n   */\r\n  public async findClient(clientId: string) {\r\n    const client = await main.prisma.client.findFirst({\r\n      where: { clientId },\r\n      include: {\r\n        modules: {\r\n          include: {\r\n            whatsapp: true,\r\n            discord: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    return client;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"3f85a67e-478a-5e15-b685-aad81390d6a6"}
{"version":3,"file":"utils.js","sources":["src/shared/class/utils.ts"],"sourceRoot":"/","sourcesContent":["import { Message } from \"discord.js\";\r\nimport { readdirSync, statSync } from \"fs\";\r\nimport { basename, extname, join } from \"path\";\r\n\r\nimport { client } from \"@/main\";\r\nimport { config } from \"@utils/config\";\r\nimport { logWithLabel } from \"@utils/functions/console\";\r\n\r\n/**\r\n * Utility class for managing Discord guilds and commands\r\n * @class Utils\r\n * @description Provides methods to retrieve guilds, cache guild information, check message replies, and reload commands.\r\n * @example\r\n * const utils = new Utils();\r\n * const guild = await utils.get(\"123456789012345678\");\r\n * console.log(guild?.name); // Outputs the name of the guild if found\r\n * \r\n */\r\nexport class Utils {\r\n  constructor() {}\r\n\r\n  /**\r\n   * Retrieves a guild by its ID\r\n   * @param guildId - The ID of the guild to retrieve\r\n   * @returns {Promise<Guild | null>} The guild object if found, otherwise null\r\n   */\r\n  public async get(guildId: string) {\r\n    if (!guildId) return null;\r\n    if (guildId === \"0\") return null;\r\n\r\n    const guild = client.guilds.cache.get(guildId);\r\n    if (!guild) return null;\r\n    return guild;\r\n  }\r\n\r\n  /**\r\n   * Caches the guilds in the Discord client\r\n   * @returns {Promise<Array<{ id: string, name: string, iconURL: string | null, memberCount: number }>>} Array of guild objects\r\n   */\r\n  public async cache() {\r\n    const guilds = client.guilds.cache.map((guild) => {\r\n      return {\r\n        id: guild.id,\r\n        name: guild.name,\r\n        iconURL: guild.iconURL(),\r\n        memberCount: guild.memberCount,\r\n      };\r\n    });\r\n\r\n    return guilds;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a guild by its ID\r\n   * @param guildId - The ID of the guild to retrieve\r\n   * @returns {Promise<Guild | null>} The guild object if found, otherwise null\r\n   */\r\n  public async getByGuild(guildId: string) {\r\n    if (!guildId) return null;\r\n    if (guildId === \"0\") return null;\r\n\r\n    const guild = client.guilds.cache.get(guildId);\r\n    if (!guild) return null;\r\n    return guild;\r\n  }\r\n\r\n  /**\r\n   * Checks if a message is a reply to a bot's message\r\n   * @param message - The message to check\r\n   */\r\n  public async isReplyingToBot(message: Message): Promise<boolean> {\r\n    if (!message.reference) return false;\r\n    try {\r\n      const referencedMessage = message.reference.messageId\r\n        ? await message.channel.messages.fetch(message.reference.messageId)\r\n        : null;\r\n      return referencedMessage?.author?.id === client.user?.id;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reloads a specific command by searching recursively in the commands directory\r\n   * @param commandName - The name of the command to reload (without extension)\r\n   * @returns {Promise<void>} Resolves when the command is reloaded or rejects on error\r\n   */\r\n  public async reloadCommand(commandName: string): Promise<void> {\r\n    const commandPath =\r\n      config.modules.discord.configs.default + config.modules.discord.configs.paths.precommands;\r\n    logWithLabel(\"debug\", `Starting reload for command: ${commandName}`);\r\n\r\n    try {\r\n      // Find the command file recursively\r\n      const commandFile = this.findCommandFile(commandPath, commandName);\r\n\r\n      if (!commandFile) {\r\n        logWithLabel(\"custom\", `Command ${commandName} not found in ${commandPath}`, {\r\n          customLabel: \"Warning\",\r\n          context: {\r\n            commandName,\r\n            commandPath,\r\n          },\r\n        });\r\n        throw new Error(`Command ${commandName} not found`);\r\n      }\r\n\r\n      logWithLabel(\"debug\", `Found command file at: ${commandFile}`);\r\n\r\n      // Clear the cache and re-import\r\n      const modulePath = require.resolve(commandFile);\r\n      delete require.cache[modulePath];\r\n\r\n      // Use dynamic import for better error handling\r\n      const commandModule = await import(commandFile);\r\n      const command = commandModule.default || commandModule;\r\n\r\n      if (!command || !command.name) {\r\n        logWithLabel(\"error\", `Invalid command structure in ${commandFile}`);\r\n        throw new Error(`Invalid command structure`);\r\n      }\r\n\r\n      // Update the command in collections\r\n      client.precommands.set(command.name, command);\r\n\r\n      // Update aliases if they exist\r\n      if (command.aliases && Array.isArray(command.aliases)) {\r\n        command.aliases.forEach((alias: string) => {\r\n          client.aliases.set(alias, command.name);\r\n        });\r\n      }\r\n\r\n      logWithLabel(\"success\", `Command ${command.name} successfully reloaded from ${commandFile}`);\r\n    } catch (error: any) {\r\n      logWithLabel(\"error\", `Failed to reload command ${commandName}: ${error.message}`);\r\n      console.error(error.stack);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recursively finds a command file in the directory and subdirectories\r\n   * @param directory - Directory to search in\r\n   * @param commandName - Command name to search for\r\n   * @returns {string | null} Full path to the command file or null if not found\r\n   */\r\n  private findCommandFile(directory: string, commandName: string): string | null {\r\n    try {\r\n      const files = readdirSync(directory);\r\n\r\n      for (const file of files) {\r\n        const fullPath = join(directory, file);\r\n        const stat = statSync(fullPath);\r\n\r\n        if (stat.isDirectory()) {\r\n          const found = this.findCommandFile(fullPath, commandName);\r\n          if (found) return found;\r\n        } else if (\r\n          stat.isFile() &&\r\n          [\".ts\", \".js\"].includes(extname(file).toLowerCase()) &&\r\n          basename(file, extname(file)).toLowerCase() === commandName.toLowerCase()\r\n        ) {\r\n          return fullPath;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    } catch (error: any) {\r\n      logWithLabel(\r\n        \"error\",\r\n        `Error searching for command ${commandName} in ${directory}: ${error.message}`,\r\n      );\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reloads all commands from the commands directory and subdirectories\r\n   * @returns {Promise<void>} Resolves when all commands are reloaded\r\n   */\r\n  public async loadCommands(): Promise<void> {\r\n    const commandPath =\r\n      config.modules.discord.configs.default + config.modules.discord.configs.paths.precommands;\r\n    logWithLabel(\"debug\", `Starting reload of all commands from ${commandPath}`);\r\n\r\n    try {\r\n      // Clear existing commands\r\n      client.precommands.clear();\r\n      client.aliases.clear();\r\n\r\n      // Find and load all command files\r\n      const commandFiles = this.findAllCommandFiles(commandPath);\r\n\r\n      if (commandFiles.length === 0) {\r\n        logWithLabel(\"custom\", `No command files found in ${commandPath}`, {\r\n          customLabel: \"Warning\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      logWithLabel(\"debug\", `Found ${commandFiles.length} command files to load`);\r\n\r\n      // Load all commands in parallel\r\n      const loadPromises = commandFiles.map(async (file) => {\r\n        try {\r\n          const modulePath = require.resolve(file);\r\n          delete require.cache[modulePath];\r\n\r\n          const commandModule = await import(file);\r\n          const command = commandModule.default || commandModule;\r\n\r\n          if (!command || !command.name) {\r\n            logWithLabel(\"custom\", `Skipping invalid command file: ${file}`, {\r\n              customLabel: \"Warning\",\r\n              context: {\r\n                file,\r\n              },\r\n            });\r\n            return;\r\n          }\r\n\r\n          client.precommands.set(command.name, command);\r\n\r\n          if (command.aliases && Array.isArray(command.aliases)) {\r\n            command.aliases.forEach((alias: string) => {\r\n              client.aliases.set(alias, command.name);\r\n            });\r\n          }\r\n\r\n          logWithLabel(\"debug\", `Loaded command: ${command.name} from ${file}`);\r\n        } catch (error: any) {\r\n          logWithLabel(\"error\", `Failed to load command from ${file}: ${error.message}`);\r\n        }\r\n      });\r\n\r\n      await Promise.all(loadPromises);\r\n\r\n      logWithLabel(\"success\", `Successfully reloaded ${client.precommands.size} commands`);\r\n    } catch (error: any) {\r\n      logWithLabel(\"error\", `Failed to reload commands: ${error.message}`);\r\n      console.error(error.stack);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recursively finds all command files in a directory\r\n   * @param directory - Directory to search in\r\n   * @returns {string[]} Array of full paths to command files\r\n   */\r\n  private findAllCommandFiles(directory: string): string[] {\r\n    const commandFiles: string[] = [];\r\n\r\n    try {\r\n      const files = readdirSync(directory);\r\n\r\n      for (const file of files) {\r\n        const fullPath = join(directory, file);\r\n        const stat = statSync(fullPath);\r\n\r\n        if (stat.isDirectory()) {\r\n          commandFiles.push(...this.findAllCommandFiles(fullPath));\r\n        } else if (\r\n          stat.isFile() &&\r\n          [\".ts\", \".js\"].includes(extname(file).toLowerCase()) &&\r\n          !file.endsWith(\".d.ts\") // Exclude TypeScript declaration files\r\n        ) {\r\n          commandFiles.push(fullPath);\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      logWithLabel(\"error\", `Error searching for command files in ${directory}: ${error.message}`);\r\n    }\r\n\r\n    return commandFiles;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debug_id":"c344f29d-e476-5047-9963-c94418097b1b"}
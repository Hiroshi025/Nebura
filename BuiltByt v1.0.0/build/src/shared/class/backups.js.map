{"version":3,"file":"backups.js","sources":["src/shared/class/backups.ts"],"sourceRoot":"/","sourcesContent":["import fs from \"fs-extra\";\r\nimport schedule, { Job } from \"node-schedule\";\r\nimport path from \"path\";\r\n\r\nimport { PrismaError } from \"@/shared/adapters/extends/error.extend\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\nimport { config } from \"@utils/config\";\r\nimport { logWithLabel } from \"@utils/functions/console\";\r\n\r\n/**\r\n * Service for managing database backups.\r\n * Provides functionality to create, list, retrieve, delete, and schedule backups.\r\n */\r\nexport const Backups = class BackupService {\r\n  private prisma: PrismaClient;\r\n  private backupDir: string;\r\n  private job: Job | null;\r\n\r\n  /**\r\n   * Initializes a new instance of the BackupService.\r\n   * @param backupDir - The directory where backups will be stored. Defaults to a `backups` folder in the current directory.\r\n   */\r\n  constructor(backupDir: string = path.join(__dirname, config.tasks.backups.path)) {\r\n    this.prisma = new PrismaClient();\r\n    this.backupDir = backupDir;\r\n    this.job = null;\r\n    console.info(`[BackupService] Initialized with backup directory: ${this.backupDir}`);\r\n  }\r\n\r\n  private isValidFileName(fileName: string): boolean {\r\n    // Solo permite nombres de archivo simples terminados en .json\r\n    return /^[\\w\\-]+(\\.[\\w\\-]+)*\\.json$/.test(fileName);\r\n  }\r\n\r\n  /**\r\n   * Ensures that the backup directory exists. Creates it if it does not exist.\r\n   * @private\r\n   */\r\n  private async ensureBackupDir() {\r\n    console.debug(`[BackupService] Ensuring backup directory exists: ${this.backupDir}`);\r\n    await fs.ensureDir(this.backupDir);\r\n  }\r\n\r\n  /**\r\n   * Dynamically retrieves all models from the Prisma client.\r\n   * @returns A promise that resolves to an array of model names.\r\n   * @private\r\n   */\r\n  private async getAllModels(): Promise<string[]> {\r\n    const models = Object.keys(this.prisma).filter(\r\n      (key) => typeof (this.prisma as any)[key]?.findMany === \"function\",\r\n    ) as string[];\r\n    console.debug(`[BackupService] Prisma models detected: ${models.join(\", \")}`);\r\n    return models;\r\n  }\r\n\r\n  /**\r\n   * Creates a backup of all database models and saves it as a JSON file in the backup directory.\r\n   * The backup file is named with a timestamp.\r\n   * @returns A promise that resolves when the backup is complete.\r\n   */\r\n  public async createBackup(): Promise<void> {\r\n    console.info(`[BackupService] Starting backup process...`);\r\n    console.time(\"[BackupService] BackupDuration\");\r\n    try {\r\n      await this.ensureBackupDir();\r\n\r\n      const models = await this.getAllModels();\r\n      const backupData: Record<string, any[]> = {};\r\n\r\n      for (const model of models) {\r\n        console.debug(`[BackupService] Fetching data from model: ${model}`);\r\n        backupData[model] = await (this.prisma as any)[model].findMany();\r\n        console.debug(`[BackupService] Model ${model} fetched: ${backupData[model].length} records`);\r\n      }\r\n\r\n      const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\r\n      const backupFile = path.join(this.backupDir, `backup-${timestamp}.json`);\r\n\r\n      console.debug(`[BackupService] Writing backup file: ${backupFile}`);\r\n      await fs.writeJson(backupFile, backupData, { spaces: 2 });\r\n\r\n      console.info(`[BackupService] Backup completed successfully: ${backupFile}`);\r\n    } catch (error: any) {\r\n      console.error(`[BackupService] Error during backup: ${error.message}`);\r\n      console.trace(error);\r\n      throw error;\r\n    } finally {\r\n      console.timeEnd(\"[BackupService] BackupDuration\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lists all backup files in the backup directory.\r\n   * @returns A promise that resolves to an array of backup file names.\r\n   */\r\n  public async listBackups(): Promise<string[]> {\r\n    console.debug(`[BackupService] Listing backup files in: ${this.backupDir}`);\r\n    await this.ensureBackupDir();\r\n    const files = await fs.readdir(this.backupDir);\r\n    return files.filter((file) => file.endsWith(\".json\"));\r\n  }\r\n\r\n  /**\r\n   * Retrieves the contents of a specific backup file by its name.\r\n   * @param fileName - The name of the backup file to retrieve.\r\n   * @returns A promise that resolves to the contents of the backup file.\r\n   * @throws {PrismaError} If the backup file does not exist.\r\n   */\r\n  public async findBackupById(fileName: string): Promise<any> {\r\n    if (!this.isValidFileName(fileName)) {\r\n      throw new PrismaError(`Invalid backup file name: ${fileName}`);\r\n    }\r\n    const filePath = path.join(this.backupDir, fileName);\r\n    console.debug(`[BackupService] Retrieving backup file: ${filePath}`);\r\n    if (await fs.pathExists(filePath)) {\r\n      const data = await fs.readJson(filePath);\r\n      console.info(`[BackupService] Backup file ${fileName} loaded`);\r\n      return data;\r\n    } else {\r\n      console.error(`[BackupService] Backup file not found: ${fileName}`);\r\n      throw new PrismaError(`Backup ${fileName} not found.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes a specific backup file by its name.\r\n   * @param fileName - The name of the backup file to delete.\r\n   * @returns A promise that resolves when the backup file is deleted.\r\n   * @throws {PrismaError} If the backup file does not exist.\r\n   */\r\n  public async deleteBackup(fileName: string): Promise<void> {\r\n    if (!this.isValidFileName(fileName)) {\r\n      throw new PrismaError(`Invalid backup file name: ${fileName}`);\r\n    }\r\n    const filePath = path.join(this.backupDir, fileName);\r\n    console.debug(`[BackupService] Deleting backup file: ${filePath}`);\r\n    if (await fs.pathExists(filePath)) {\r\n      await fs.remove(filePath);\r\n      console.info(`[BackupService] Backup file deleted: ${fileName}`);\r\n    } else {\r\n      console.error(`[BackupService] Backup file not found for deletion: ${fileName}`);\r\n      throw new PrismaError(`Backup ${fileName} not found.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedules automatic backups using a cron expression.\r\n   * @param cronExpression - The cron expression defining the backup schedule. Defaults to '0 2 * * *' (daily at 2 AM).\r\n   */\r\n\r\n  // en un minuto\r\n  public scheduleBackups(cronExpression: string = config.tasks.backups.cron): void {\r\n    if (this.job) {\r\n      this.job.cancel();\r\n      console.info(`[BackupService] Previous backup job cancelled`);\r\n    }\r\n    this.job = schedule.scheduleJob(cronExpression, async () => {\r\n      console.info(`[BackupService] Scheduled backup triggered`);\r\n      try {\r\n        await this.createBackup();\r\n      } catch (error: any) {\r\n        logWithLabel(\"error\", `Scheduled backup failed: ${error.message}`);\r\n      }\r\n    });\r\n    // --- RECOMENDACIÃ“N 4: Usar nivel de log adecuado ---\r\n    logWithLabel(\r\n      \"info\",\r\n      [\r\n        \"Backups scheduled with cron expression.\",\r\n        `Next backup: ${this.job.nextInvocation()}`,\r\n        `Cron expression: ${cronExpression}`,\r\n      ].join(\"\\n\"),\r\n    );\r\n  }\r\n\r\n  public async disconnect(): Promise<void> {\r\n    await this.prisma.$disconnect();\r\n    console.info(`[BackupService] PrismaClient disconnected.`);\r\n  }\r\n};\r\n"],"names":[],"mappings":"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","debug_id":"308845e9-91e5-5fd6-beb8-4ab2e6103806"}
{"version":3,"file":"monitor.js","sources":["src/shared/monitor.ts"],"sourceRoot":"/","sourcesContent":["import chalk from \"chalk\";\r\n//import { Request, Response } from \"express\";\r\nimport { debug } from \"node:console\";\r\nimport SwaggerParser from \"swagger-parser\";\r\nimport swStats from \"swagger-stats\";\r\n\r\nimport { config } from \"@/shared/utils/config\";\r\nimport { logWithLabel } from \"@/shared/utils/functions/console\";\r\nimport emojis from \"@config/json/emojis.json\";\r\n\r\nimport { API } from \"../\";\r\n\r\n/**\r\n * Sets up and configures Swagger monitoring and metrics for the provided API instance.\r\n *\r\n * This function validates the Swagger API specification and, if successful, enables\r\n * Swagger-stats middleware for monitoring API performance and metrics. It also provides\r\n * authentication for accessing the metrics dashboard.\r\n *\r\n * @param main - The main API instance where the middleware will be applied.\r\n *\r\n * @remarks\r\n * - The Swagger specification is validated using `swagger-parser`.\r\n * - Metrics are exposed via `swagger-stats` middleware.\r\n * - Authentication is required to access the metrics dashboard.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { SwaggerMonitor } from \"@/server/shared/monitor\";\r\n * import { API } from \"@/server\";\r\n *\r\n * const api = new API();\r\n * SwaggerMonitor(api);\r\n * ```\r\n */\r\nexport const SwaggerMonitor = (main: API) => {\r\n  const projectconfig = config.environments.default.api.swagger;\r\n  let swaggerSpec = null;\r\n\r\n  // Validate the Swagger API specification\r\n  SwaggerParser.prototype.validate(projectconfig.local, function (err, api) {\r\n    if (!err) {\r\n      // Log successful loading of the Swagger API\r\n      logWithLabel(\r\n        \"api\",\r\n        [\r\n          `Monitoring API: ${api?.info.title} v${api?.info.version}`,\r\n          `  ${emojis.circle_check}  ${chalk.grey(\"Swagger API Loaded\")}`,\r\n          `  ${emojis.circle_check}  ${chalk.grey(\"Swagger API Metrics\")}`,\r\n        ].join(\"\\n\"),\r\n      );\r\n\r\n      swaggerSpec = api;\r\n\r\n      // Configure and apply the swagger-stats middleware\r\n      main.app.use(\r\n        swStats.getMiddleware({\r\n          name: projectconfig.name,\r\n          version: projectconfig.version,\r\n          hostname: projectconfig.url,\r\n          timelineBucketDuration: 60000,\r\n          swaggerSpec: swaggerSpec,\r\n          uriPath: projectconfig.url,\r\n          durationBuckets: [50, 100, 200, 500, 1000, 5000],\r\n          requestSizeBuckets: [500, 5000, 15000, 50000],\r\n          responseSizeBuckets: [600, 6000, 6000, 60000],\r\n          apdexThreshold: 50,\r\n          onResponseFinish: function (_req, _res, rrr) {\r\n            debug(\"onResponseFinish: %s\", JSON.stringify(rrr));\r\n          },\r\n          authentication: true,\r\n          onAuthenticate(_req, username, password) {\r\n            return username === projectconfig.auth.name && password === projectconfig.auth.password;\r\n          },\r\n        }),\r\n      );\r\n\r\n      /*       main.app.get(projectconfig.url, async (_req: Request, res: Response) => {\r\n        res.send(swStats.getCoreStats());\r\n      }); */\r\n    } else {\r\n      // Log an error if the Swagger API specification fails validation\r\n      logWithLabel(\"custom\", `Swagger API: ${err}`, {\r\n        customLabel: \"Swagger\",\r\n      });\r\n      return;\r\n    }\r\n  });\r\n};"],"names":[],"mappings":";;;;;;;;AAAA,kDAA0B;AAC1B,8CAA8C;AAC9C,+CAAqC;AACrC,oEAA2C;AAC3C,kEAAoC;AAEpC,kDAA+C;AAC/C,8DAAgE;AAChE,2EAA8C;AAI9C;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACI,MAAM,cAAc,GAAG,CAAC,IAAS,EAAE,EAAE;IAC1C,MAAM,aAAa,GAAG,eAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC;IAC9D,IAAI,WAAW,GAAG,IAAI,CAAC;IAEvB,yCAAyC;IACzC,wBAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,UAAU,GAAG,EAAE,GAAG;QACtE,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,4CAA4C;YAC5C,IAAA,sBAAY,EACV,KAAK,EACL;gBACE,mBAAmB,GAAG,EAAE,IAAI,CAAC,KAAK,KAAK,GAAG,EAAE,IAAI,CAAC,OAAO,EAAE;gBAC1D,KAAK,qBAAM,CAAC,YAAY,KAAK,eAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,EAAE;gBAC/D,KAAK,qBAAM,CAAC,YAAY,KAAK,eAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAE;aACjE,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;YAEF,WAAW,GAAG,GAAG,CAAC;YAElB,mDAAmD;YACnD,IAAI,CAAC,GAAG,CAAC,GAAG,CACV,uBAAO,CAAC,aAAa,CAAC;gBACpB,IAAI,EAAE,aAAa,CAAC,IAAI;gBACxB,OAAO,EAAE,aAAa,CAAC,OAAO;gBAC9B,QAAQ,EAAE,aAAa,CAAC,GAAG;gBAC3B,sBAAsB,EAAE,KAAK;gBAC7B,WAAW,EAAE,WAAW;gBACxB,OAAO,EAAE,aAAa,CAAC,GAAG;gBAC1B,eAAe,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;gBAChD,kBAAkB,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;gBAC7C,mBAAmB,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;gBAC7C,cAAc,EAAE,EAAE;gBAClB,gBAAgB,EAAE,UAAU,IAAI,EAAE,IAAI,EAAE,GAAG;oBACzC,IAAA,oBAAK,EAAC,sBAAsB,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;gBACrD,CAAC;gBACD,cAAc,EAAE,IAAI;gBACpB,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ;oBACrC,OAAO,QAAQ,KAAK,aAAa,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,KAAK,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAC1F,CAAC;aACF,CAAC,CACH,CAAC;YAEF;;kBAEM;QACR,CAAC;aAAM,CAAC;YACN,iEAAiE;YACjE,IAAA,sBAAY,EAAC,QAAQ,EAAE,gBAAgB,GAAG,EAAE,EAAE;gBAC5C,WAAW,EAAE,SAAS;aACvB,CAAC,CAAC;YACH,OAAO;QACT,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AArDW,QAAA,cAAc,kBAqDzB","debug_id":"5d7ee940-a99e-592f-843b-bd3f04bdf469"}
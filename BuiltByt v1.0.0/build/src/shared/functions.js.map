{"version":3,"file":"functions.js","sources":["src/shared/functions.ts"],"sourceRoot":"/","sourcesContent":["import { timingSafeEqual } from \"crypto\";\r\n\r\nimport emojis from \"@config/json/emojis.json\";\r\nimport { config } from \"@utils/config\";\r\nimport { logWithLabel } from \"@utils/functions/console\";\r\n\r\n/**\r\n * Compares two strings in a timing-safe manner to prevent timing attacks.\r\n *\r\n * @param a - The first string to compare.\r\n * @param b - The second string to compare.\r\n * @returns True if the strings are equal, false otherwise.\r\n */\r\nexport function safeCompare(a: string, b: string): boolean {\r\n  try {\r\n    return timingSafeEqual(Buffer.from(a), Buffer.from(b));\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Constructs the base URL for the API host, including protocol and port if necessary.\r\n *\r\n * @returns The constructed host URL as a string.\r\n */\r\nexport function hostURL(): string {\r\n  const host =\r\n    config.environments.default.api.host === \"localhost\"\r\n      ? \"http://localhost\"\r\n      : `https://${config.environments.default.api.host}`;\r\n  const port = config.environments.default.api.port;\r\n\r\n  if (config.environments.default.api.host === \"localhost\") {\r\n    return `${host}:${port}`;\r\n  }\r\n  return `${host}`;\r\n}\r\n\r\n/**\r\n * Executes a cleanup task and logs the result.\r\n *\r\n * @param taskName - The name of the cleanup task.\r\n * @param cleanupFunction - An asynchronous function that performs the cleanup and returns the number of deleted items.\r\n * @returns A Promise that resolves when the cleanup and logging are complete.\r\n */\r\nexport async function globalCleanup(\r\n  taskName: string,\r\n  cleanupFunction: () => Promise<number>,\r\n): Promise<void> {\r\n  try {\r\n    const deletedCount = await cleanupFunction();\r\n    logWithLabel(\r\n      \"custom\",\r\n      [\r\n        `${taskName} cleanup completed.`,\r\n        `  ${emojis.database} Deleted items: ${deletedCount}`,\r\n      ].join(\"\\n\"),\r\n      {\r\n        customLabel: \"Tasks\",\r\n      },\r\n    );\r\n  } catch (error) {\r\n    logWithLabel(\"error\", `${error}`);\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n//const taskService = new TaskService();\r\n\r\n// Run the cleanup task for global tasks.\r\n//executeGlobalCleanup(\"Global Tasks\", () => taskService.cleanUpTasks());\r\n"],"names":[],"mappings":";;;;;;;AAaA,kCAMC;AAOD,0BAWC;AASD,sCAoBC;AAlED,mCAAyC;AAEzC,2EAA8C;AAC9C,0CAAuC;AACvC,sDAAwD;AAExD;;;;;;GAMG;AACH,SAAgB,WAAW,CAAC,CAAS,EAAE,CAAS;IAC9C,IAAI,CAAC;QACH,OAAO,IAAA,wBAAe,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH,SAAgB,OAAO;IACrB,MAAM,IAAI,GACR,eAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,KAAK,WAAW;QAClD,CAAC,CAAC,kBAAkB;QACpB,CAAC,CAAC,WAAW,eAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IACxD,MAAM,IAAI,GAAG,eAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;IAElD,IAAI,eAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,KAAK,WAAW,EAAE,CAAC;QACzD,OAAO,GAAG,IAAI,IAAI,IAAI,EAAE,CAAC;IAC3B,CAAC;IACD,OAAO,GAAG,IAAI,EAAE,CAAC;AACnB,CAAC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,aAAa,CACjC,QAAgB,EAChB,eAAsC;IAEtC,IAAI,CAAC;QACH,MAAM,YAAY,GAAG,MAAM,eAAe,EAAE,CAAC;QAC7C,IAAA,sBAAY,EACV,QAAQ,EACR;YACE,GAAG,QAAQ,qBAAqB;YAChC,KAAK,qBAAM,CAAC,QAAQ,mBAAmB,YAAY,EAAE;SACtD,CAAC,IAAI,CAAC,IAAI,CAAC,EACZ;YACE,WAAW,EAAE,OAAO;SACrB,CACF,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAA,sBAAY,EAAC,OAAO,EAAE,GAAG,KAAK,EAAE,CAAC,CAAC;QAClC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;AACH,CAAC;AAED,wCAAwC;AAExC,yCAAyC;AACzC,yEAAyE","debug_id":"5ae6dd92-9994-501d-8213-d4dc8bb0acd9"}
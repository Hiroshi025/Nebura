import { Request } from "express";

/**
 * Options for configuring the Gemini API.
 *
 * @remarks
 * This interface defines the configuration options required to interact with the Gemini API, including authentication and model selection.
 *
 * @see {@link https://cloud.google.com/vertex-ai/docs/generative-ai Gemini API Documentation}
 *
 * @example
 * ```ts
 * const options: GeminiOptions = {
 *   apiKey: "your-api-key",
 *   model: "gemini-pro",
 *   systemInstruction: "You are a helpful assistant."
 * };
 * ```
 */
export interface GeminiOptions {
  /**
   * The API key used for authentication with the Gemini API.
   */
  apiKey: string;
  /**
   * The model to be used for processing requests.
   * @example "gemini-pro"
   */
  model: string;
  /**
   * Optional system instruction to guide the model's behavior.
   * @example "You are a helpful assistant."
   */
  systemInstruction?: string;
  /**
   * Optional hashed version of the API key for added security.
   */
  apiKeyHash?: string;
}

/**
 * Response structure returned by the Gemini API.
 *
 * @remarks
 * This interface represents the structure of a response from the Gemini API, including the generated response, model used, and timestamp.
 *
 * @see {@link https://cloud.google.com/vertex-ai/docs/generative-ai Gemini API Documentation}
 */
export interface GeminiResponse {
  /**
   * The response generated by the model.
   */
  response: string;
  /**
   * The model used to generate the response.
   */
  model: string;
  /**
   * The timestamp indicating when the response was generated.
   */
  timestamp: Date;
  /**
   * Optional hashed version of the user's token for added security.
   */
  userTokenHash?: string;
}

/**
 * Request structure for sending text-based input to the Gemini API.
 *
 * @remarks
 * Use this interface to send a text prompt to the Gemini API for processing.
 *
 * @see {@link https://cloud.google.com/vertex-ai/docs/generative-ai Gemini API Documentation}
 *
 * @example
 * ```ts
 * const request: GeminiTextRequest = {
 *   text: "What is the weather today?",
 *   systemInstruction: "Be concise."
 * };
 * ```
 */
export interface GeminiTextRequest {
  /**
   * The text input to be processed by the model.
   */
  text: string;
  /**
   * Optional system instruction to guide the model's behavior.
   */
  systemInstruction?: string;
}

/**
 * Request structure for sending file-based input to the Gemini API.
 *
 * @remarks
 * Use this interface to send a file (such as an image or document) to the Gemini API for processing.
 *
 * @see {@link https://nodejs.org/api/buffer.html Node.js Buffer}
 *
 * @example
 * ```ts
 * const request: GeminiFileRequest = {
 *   file: fs.readFileSync("./image.png"),
 *   mimeType: "image/png",
 *   text: "Describe this image.",
 *   systemInstruction: "Be detailed."
 * };
 * ```
 */
export interface GeminiFileRequest {
  /**
   * The file to be processed by the model, represented as a Buffer.
   * @see {@link https://nodejs.org/api/buffer.html Node.js Buffer}
   */
  file: Buffer;
  /**
   * The MIME type of the file being sent.
   * @example "image/png"
   */
  mimeType: string;
  /**
   * Optional text input to accompany the file.
   */
  text?: string;
  /**
   * Optional system instruction to guide the model's behavior.
   */
  systemInstruction?: string;
}

/**
 * Request structure for sending both text and file-based input to the Gemini API.
 *
 * @remarks
 * Use this interface to send a combination of text and file input to the Gemini API for multi-modal processing.
 *
 * @see {@link https://cloud.google.com/vertex-ai/docs/generative-ai Gemini API Documentation}
 *
 * @example
 * ```ts
 * const request: GeminiCombinedRequest = {
 *   text: "What is shown in this image?",
 *   file: fs.readFileSync("./photo.jpg"),
 *   mimeType: "image/jpeg",
 *   systemInstruction: "Be descriptive."
 * };
 * ```
 */
export interface GeminiCombinedRequest {
  /**
   * The text input to be processed by the model.
   */
  text: string;
  /**
   * The file to be processed by the model, represented as a Buffer.
   * @see {@link https://nodejs.org/api/buffer.html Node.js Buffer}
   */
  file: Buffer;
  /**
   * The MIME type of the file being sent.
   * @example "image/jpeg"
   */
  mimeType: string;
  /**
   * Optional system instruction to guide the model's behavior.
   */
  systemInstruction?: string;
}

/**
 * Extended Express Request object with additional Gemini configuration.
 *
 * @remarks
 * This interface extends the standard Express {@link https://expressjs.com/en/4x/api.html#req Express Request} object to include Gemini API configuration for authenticated requests.
 *
 * @see {@link https://expressjs.com/en/4x/api.html#req Express Request}
 *
 * @example
 * ```ts
 * function handler(req: AuthenticatedRequest, res: Response) {
 *   if (req.geminiConfig) {
 *     // Use Gemini config for API calls
 *   }
 * }
 * ```
 */
export interface AuthenticatedRequest extends Request {
  /**
   * Optional Gemini configuration object containing API key, model, and hashed API key.
   */
  geminiConfig?: {
    /**
     * The API key used for authentication with the Gemini API.
     */
    apiKey: string;
    /**
     * The model to be used for processing requests.
     */
    model: string;
    /**
     * The hashed version of the API key for added security.
     */
    apiKeyHash: string;
  };
}

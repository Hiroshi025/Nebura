<!DOCTYPE html>
<html lang="es" data-bs-theme="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Soporte Admin - Nebura</title>
  <meta name="description"
    content="Panel de administración de soporte de Nebura - Gestiona tickets, estadísticas y transcripciones">
  <meta name="keywords" content="Nebura, Soporte, Admin, Tickets, Estadísticas">
  <meta name="author" content="Nebura">

  <!-- Favicon y Open Graph -->
  <link rel="icon" href="/favicon.ico">
  <meta property="og:title" content="Panel de Administración de Soporte Nebura">
  <meta property="og:description" content="Panel de administración para gestionar el sistema de soporte de Nebura">
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://host.hiroshi-dev.me/admin/support">
  <meta name="twitter:card" content="summary_large_image">

  <!-- CSS -->
  <%- include('partials/link', { user: user }) %>
    <link rel="stylesheet" href="/css/support.css">
    <link rel="stylesheet" href="/css/tickets.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body class="loaded">
  <div id="app-container">
    <div class="d-flex" style="min-height: 100vh;">
      <%- include('partials/sidebar', { user: user, panelSection: ` <div class='sidebar-section-title'>
        <i class="fas fa-headset me-2"></i><span data-key="supportAdminTitle">Soporte Admin</span>
    </div>
    <div class='sidebar-divider'></div>
    <a href="#tickets-admin" class="sidebar-link" data-bs-toggle="tab" data-bs-target="#tickets-admin-pane">
      <i class="fas fa-ticket-alt me-2"></i><span data-key="ticketsTab">Tickets</span>
    </a>
    <a href="#stats-admin" class="sidebar-link" data-bs-toggle="tab" data-bs-target="#stats-admin-pane">
      <i class="fas fa-chart-bar me-2"></i><span data-key="statsTab">Estadísticas</span>
    </a>
    <a href="#transcripts-admin" class="sidebar-link" data-bs-toggle="tab" data-bs-target="#transcripts-admin-pane">
      <i class="fas fa-file-alt me-2"></i><span data-key="transcriptsTab">Transcripciones</span>
    </a>
    ` }) %>

    <main class="flex-grow-1 p-4">
      <!-- Tabs principales -->
      <ul class="nav nav-tabs mb-4" id="adminSupportTabs" role="tablist">
        <li class="nav-item" role="presentation">
          <button class="nav-link active" id="tickets-admin-tab" data-bs-toggle="tab"
            data-bs-target="#tickets-admin-pane" type="button" role="tab" aria-controls="tickets-admin-pane"
            aria-selected="true">
            <i class="fas fa-ticket-alt me-2"></i><span data-key="ticketsTab">Tickets</span>
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="stats-admin-tab" data-bs-toggle="tab" data-bs-target="#stats-admin-pane"
            type="button" role="tab" aria-controls="stats-admin-pane" aria-selected="false">
            <i class="fas fa-chart-bar me-2"></i><span data-key="statsTab">Estadísticas</span>
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="transcripts-admin-tab" data-bs-toggle="tab"
            data-bs-target="#transcripts-admin-pane" type="button" role="tab" aria-controls="transcripts-admin-pane"
            aria-selected="false">
            <i class="fas fa-file-alt me-2"></i><span data-key="transcriptsTab">Transcripciones</span>
          </button>
        </li>
      </ul>

      <div class="tab-content" id="adminSupportTabsContent">
        <!-- Tickets Tab -->
        <div class="tab-pane fade show active" id="tickets-admin-pane" role="tabpanel"
          aria-labelledby="tickets-admin-tab" tabindex="0">
          <!-- Filtros y búsqueda -->
          <div class="card mb-4">
            <div class="card-body py-2">
              <div class="d-flex flex-wrap align-items-center gap-2">
                <select id="admin-ticket-filter" class="form-select form-select-sm" style="width: 150px;">
                  <option value="all" data-key="filterAll">Todos</option>
                  <option value="OPEN" data-key="filterOpen">Abiertos</option>
                  <option value="PENDING" data-key="filterPending">Pendientes</option>
                  <option value="CLOSED" data-key="filterClosed">Cerrados</option>
                </select>
                <div class="input-group input-group-sm" style="width: 200px;">
                  <span class="input-group-text"><i class="fas fa-search"></i></span>
                  <input type="text" class="form-control" placeholder="Buscar tickets..." id="admin-ticket-search"
                    data-key="searchTicketsPlaceholder">
                </div>
                <button class="btn btn-sm btn-outline-secondary ms-auto" id="admin-refresh-tickets" title="Recargar">
                  <i class="fas fa-sync-alt"></i>
                </button>
              </div>
            </div>
          </div>

          <!-- Lista de tickets -->
          <div class="card">
            <div class="card-body p-0">
              <div class="table-responsive">
                <table class="table table-hover mb-0" id="admin-tickets-table">
                  <thead>
                    <tr>
                      <th data-key="ticketId">ID</th>
                      <th data-key="user">Usuario</th>
                      <th data-key="subject">Asunto</th>
                      <th data-key="status">Estado</th>
                      <th data-key="assignedTo">Asignado a</th>
                      <th data-key="date">Fecha</th>
                      <th data-key="actions">Acciones</th>
                    </tr>
                  </thead>
                  <tbody id="admin-tickets-list">
                    <!-- Tickets se cargarán aquí -->
                    <tr>
                      <td colspan="7" class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                          <span class="visually-hidden" data-key="loading">Cargando...</span>
                        </div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <!-- Paginación -->
          <nav class="mt-3">
            <ul class="pagination justify-content-center" id="admin-tickets-pagination">
              <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" data-key="previous">Anterior</a>
              </li>
              <li class="page-item active"><a class="page-link" href="#">1</a></li>
              <li class="page-item"><a class="page-link" href="#">2</a></li>
              <li class="page-item"><a class="page-link" href="#">3</a></li>
              <li class="page-item">
                <a class="page-link" href="#" data-key="next">Siguiente</a>
              </li>
            </ul>
          </nav>
        </div>

        <!-- Estadísticas Tab -->
        <div class="tab-pane fade" id="stats-admin-pane" role="tabpanel" aria-labelledby="stats-admin-tab" tabindex="0">
          <div class="animate__animated animate__fadeIn">
            <div class="row">
              <!-- Estadísticas generales -->
              <div class="col-md-6">
                <div class="stats-card">
                  <h5><i class="fas fa-chart-pie me-2"></i> Resumen de Tickets</h5>
                  <div class="chart-container">
                    <canvas id="tickets-summary-chart"></canvas>
                  </div>
                </div>
              </div>
              <div class="col-md-6">
                <div class="stats-card">
                  <h5><i class="fas fa-calendar-alt me-2"></i> Tickets por Mes</h5>
                  <div class="chart-container">
                    <canvas id="tickets-monthly-chart"></canvas>
                  </div>
                </div>
              </div>
            </div>

            <div class="row">
              <div class="col-md-6">
                <div class="stats-card">
                  <h5><i class="fas fa-tags me-2"></i> Tickets por Categoría</h5>
                  <div class="chart-container">
                    <canvas id="tickets-category-chart"></canvas>
                  </div>
                </div>
              </div>
              <div class="col-md-6">
                <div class="stats-card">
                  <h5><i class="fas fa-trophy me-2"></i> Top Usuarios</h5>
                  <div class="table-responsive">
                    <table class="table table-sm">
                      <thead>
                        <tr>
                          <th data-key="user">Usuario</th>
                          <th data-key="tickets">Tickets</th>
                          <th data-key="lastActivity">Última actividad</th>
                        </tr>
                      </thead>
                      <tbody id="top-users-list">
                        <!-- Top usuarios se cargará aquí -->
                        <tr>
                          <td colspan="3" class="text-center py-3">
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                              <span class="visually-hidden">Cargando...</span>
                            </div>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Transcripciones Tab -->
        <div class="tab-pane fade" id="transcripts-admin-pane" role="tabpanel" aria-labelledby="transcripts-admin-tab"
          tabindex="0">
          <div class="animate__animated animate__fadeIn">
            <div class="d-flex justify-content-between align-items-center mb-4">
              <h3 class="h4 fw-bold">
                <i class="fas fa-file-alt me-2"></i><span data-key="transcriptsAdminTitle">Todas las
                  Transcripciones</span>
              </h3>
              <div class="d-flex align-items-center gap-2">
                <select id="admin-transcript-filter" class="form-select form-select-sm" style="width: 150px;">
                  <option value="all" data-key="filterAll">Todos</option>
                  <option value="ticket" data-key="filterTicket">Tickets</option>
                  <option value="chat" data-key="filterChat">Chats</option>
                </select>
                <button class="btn btn-sm btn-outline-secondary" id="admin-refresh-transcripts" title="Recargar">
                  <i class="fas fa-sync-alt"></i>
                </button>
              </div>
            </div>

            <div class="card">
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table table-hover mb-0" id="admin-transcripts-table">
                    <thead>
                      <tr>
                        <th data-key="transcriptId">ID</th>
                        <th data-key="type">Tipo</th>
                        <th data-key="referenceId">Referencia</th>
                        <th data-key="participants">Participantes</th>
                        <th data-key="date">Fecha</th>
                        <th data-key="duration">Duración</th>
                        <th data-key="actions">Acciones</th>
                      </tr>
                    </thead>
                    <tbody id="admin-transcripts-list">
                      <!-- Transcripciones se cargarán aquí -->
                      <tr>
                        <td colspan="7" class="text-center py-4">
                          <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden" data-key="loading">Cargando...</span>
                          </div>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            <!-- Paginación -->
            <nav class="mt-3">
              <ul class="pagination justify-content-center" id="admin-transcripts-pagination">
                <li class="page-item disabled">
                  <a class="page-link" href="#" tabindex="-1" data-key="previous">Anterior</a>
                </li>
                <li class="page-item active"><a class="page-link" href="#">1</a></li>
                <li class="page-item"><a class="page-link" href="#">2</a></li>
                <li class="page-item"><a class="page-link" href="#">3</a></li>
                <li class="page-item">
                  <a class="page-link" href="#" data-key="next">Siguiente</a>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </main>
  </div>
  </div>

  <!-- Modal Chat Ticket Admin -->
  <div class="modal fade" id="adminTicketChatModal" tabindex="-1" aria-labelledby="adminTicketChatModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="adminTicketChatModalLabel">
            <i class="fas fa-ticket-alt me-2"></i><span data-key="ticketNumber">Ticket #</span><span
              id="admin-ticket-id-placeholder"></span>
          </h5>
          <div class="d-flex align-items-center">
            <span class="badge bg-primary me-2" id="admin-ticket-status-badge" data-key="openStatus">Abierto</span>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
        </div>
        <div class="modal-body p-0">
          <div class="ticket-chat-container">
            <div class="ticket-info-sidebar">
              <div class="ticket-info-header">
                <h6 data-key="ticketInfo">Información del Ticket</h6>
              </div>
              <div class="ticket-info-content">
                <div class="info-item">
                  <span class="info-label" data-key="userLabel">Usuario:</span>
                  <span class="info-value" id="admin-ticket-user-info">-</span>
                </div>
                <div class="info-item">
                  <span class="info-label" data-key="createdLabel">Creado:</span>
                  <span class="info-value" id="admin-ticket-created-at">-</span>
                </div>
                <div class="info-item">
                  <span class="info-label" data-key="updatedLabel">Actualizado:</span>
                  <span class="info-value" id="admin-ticket-updated-at">-</span>
                </div>
                <div class="info-item">
                  <span class="info-label" data-key="categoryLabel">Categoría:</span>
                  <span class="info-value" id="admin-ticket-category-info">-</span>
                </div>
                <div class="info-item">
                  <span class="info-label" data-key="priorityLabel">Prioridad:</span>
                  <span class="info-value" id="admin-ticket-priority-info">-</span>
                </div>
                <div class="info-item">
                  <span class="info-label" data-key="subjectLabel">Asunto:</span>
                  <span class="info-value" id="admin-ticket-subject-info">-</span>
                </div>
                <div class="info-item">
                  <span class="info-label" data-key="assignedToLabel">Asignado a:</span>
                  <span class="info-value" id="admin-ticket-assigned-info">-</span>
                </div>
              </div>
              <div class="ticket-actions">
                <select class="form-select form-select-sm mb-2" id="admin-assign-to">
                  <option value="" selected disabled data-key="assignToPlaceholder">Asignar a...</option>
                  <!-- Admins se cargarán aquí -->
                </select>
                <button class="btn btn-sm btn-outline-danger w-100" id="admin-close-ticket-btn">
                  <i class="fas fa-times-circle me-1"></i><span data-key="closeTicketBtn">Cerrar Ticket</span>
                </button>
              </div>
            </div>
            <div class="ticket-chat-main">
              <div class="ticket-chat-messages" id="admin-ticket-chat-messages">
                <!-- Mensajes del ticket se cargarán aquí -->
              </div>
              <div class="ticket-chat-input-container">
                <div class="ticket-chat-tools">
                  <button class="btn btn-sm btn-outline-secondary" title="Adjuntar archivo">
                    <i class="fas fa-paperclip"></i>
                  </button>
                  <button class="btn btn-sm btn-outline-secondary" title="Insertar código">
                    <i class="fas fa-code"></i>
                  </button>
                </div>
                <textarea class="form-control ticket-chat-input" id="admin-ticket-chat-input"
                  placeholder="Escribe tu respuesta..." rows="2" data-key="writeReplyPlaceholder"></textarea>
                <button class="btn btn-primary ticket-chat-send" id="admin-send-ticket-msg-btn">
                  <i class="fas fa-paper-plane"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal Transcripción Admin -->
  <div class="modal fade" id="adminTranscriptModal" tabindex="-1" aria-labelledby="adminTranscriptModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="adminTranscriptModalLabel">
            <i class="fas fa-file-alt me-2"></i><span data-key="transcriptNumber">Transcripción #</span><span
              id="admin-transcript-id-placeholder"></span>
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="transcript-info mb-4">
            <div class="row">
              <div class="col-md-6">
                <div class="info-item">
                  <span class="info-label" data-key="typeLabel">Tipo:</span>
                  <span class="info-value" id="admin-transcript-type">-</span>
                </div>
                <div class="info-item">
                  <span class="info-label" data-key="referenceLabel">Referencia:</span>
                  <span class="info-value" id="admin-transcript-reference">-</span>
                </div>
              </div>
              <div class="col-md-6">
                <div class="info-item">
                  <span class="info-label" data-key="dateLabel">Fecha:</span>
                  <span class="info-value" id="admin-transcript-date">-</span>
                </div>
                <div class="info-item">
                  <span class="info-label" data-key="durationLabel">Duración:</span>
                  <span class="info-value" id="admin-transcript-duration">-</span>
                </div>
              </div>
            </div>
          </div>
          <div class="transcript-content card">
            <div class="card-body" id="admin-transcript-content">
              <!-- Contenido de la transcripción se cargará aquí -->
              <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden" data-key="loading">Cargando...</span>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-key="closeBtn">Cerrar</button>
          <button type="button" class="btn btn-primary" id="admin-download-transcript">
            <i class="fas fa-download me-1"></i><span data-key="downloadBtn">Descargar</span>
          </button>
        </div>
      </div>
    </div>
  </div>

  <%- include('partials/footer') %>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/js/all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/highlight.js@11.7.0/build/highlight.min.js"></script>
    <script>
      // Definir user globalmente para todos los scripts
      window.currentAdminTicketId = null;
      window.user = JSON.parse('<%- JSON.stringify(user) %>');
      window.webURL = JSON.parse('<%- JSON.stringify(webURL) %>');
    </script>
    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const adminUser = JSON.parse('<%- JSON.stringify(user) %>');
        let socket;
        let currentAdminTranscriptId = null;
        let currentAdminSection = 'tickets';
        let adminItemsPerPage = 10;
        let adminSupportStats = null;
        let adminSupportAdmins = [];

        // Cache para almacenar datos y evitar recargas innecesarias
        let statsCache = {
          data: null,
          timestamp: null,
          ttl: 300000 // 5 minutos en milisegundos
        };

        // Inicialización
        initAdminTheme();
        initAdminSocketConnection();
        initAdminEventListeners();
        loadAdminTickets();
        loadAdminSupportStats();
        fetchAdminSupportTeam();

        // --- FUNCIONES DE INICIALIZACIÓN ---

        function initAdminTheme() {
          const savedTheme = localStorage.getItem('nebura-admin-theme') || 'dark';
          document.documentElement.setAttribute('data-bs-theme', savedTheme);
        }

        function initAdminSocketConnection() {
          socket = io({
            //path: '/support/socket.io',
            transports: ['websocket'],
            reconnectionAttempts: 5,
            reconnectionDelay: 1000,
          });

          socket.on('connect', () => {
            console.log([
              "Conectado al servidor de soporte IO",
              "Conexion como administrador"
            ].join("\n"));
          });

          // Escuchar actualizaciones de tickets
          socket.on('ticket:updated', (ticket) => {
            if (currentAdminTicketId === ticket.ticketId) {
              updateAdminTicketChat(ticket);
            }
            updateAdminTicketInList(ticket);
          });

          socket.on('ticket:message', (data) => {
            if (currentAdminTicketId === data.ticketId) {
              appendAdminNewMessage(data.message);
            }
          });
        }

        function initAdminEventListeners() {
          // Navegación entre pestañas
          document.querySelectorAll('#adminSupportTabs .nav-link').forEach(tab => {
            tab.addEventListener('shown.bs.tab', function (e) {
              const target = e.target.getAttribute('data-bs-target');
              if (target === '#stats-admin-pane') {
                currentAdminSection = 'stats';
                loadAdminSupportStats();     // <-- Usa esta función para recargar estadísticas
              } else if (target === '#tickets-admin-pane') {
                currentAdminSection = 'tickets';
              } else if (target === '#transcripts-admin-pane') {
                currentAdminSection = 'transcripts';
              }
            });
          });

          // Tickets
          document.getElementById('admin-refresh-tickets').addEventListener('click', () => {
            loadAdminTickets();
            showNotification('Tickets actualizados', 'success');
          });

          document.getElementById('admin-ticket-filter').addEventListener('change', filterAdminTickets);
          document.getElementById('admin-ticket-search').addEventListener('input', debounce(searchAdminTickets, 300));

          // Transcripciones
          document.getElementById('admin-refresh-transcripts').addEventListener('click', () => {
            loadAdminTranscripts();
            showNotification('Transcripciones actualizadas', 'success');
          });

          document.getElementById('admin-transcript-filter').addEventListener('change', filterAdminTranscripts);

          // Chat de ticket
          document.getElementById('admin-send-ticket-msg-btn').addEventListener('click', sendAdminTicketMessage);
          document.getElementById('admin-ticket-chat-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
              e.preventDefault();
              sendAdminTicketMessage();
            }
          });

          document.getElementById('admin-close-ticket-btn').addEventListener('click', closeAdminCurrentTicket);
          document.getElementById('admin-assign-to').addEventListener('change', assignAdminTicket);

          // Transcripciones
          document.getElementById('admin-download-transcript').addEventListener('click', downloadAdminTranscript);
        }

        // --- FUNCIONES DE TICKETS ---

        async function loadAdminTickets(page = 1) {
          try {
            showAdminLoader('#admin-tickets-list');

            const filter = document.getElementById('admin-ticket-filter').value;
            const search = document.getElementById('admin-ticket-search').value;

            const response = await fetch(`/dashboard/utils/admin/tickets?page=${page}&limit=${adminItemsPerPage}&filter=${filter}&search=${search}`);

            if (!response.ok) throw new Error('Error al cargar tickets');

            const data = await response.json();

            if (!data.success) throw new Error(data.message || 'Error en la respuesta del servidor');

            renderAdminTickets(data.data);
            updateAdminPagination('#admin-tickets-pagination', page, Math.ceil(data.total / adminItemsPerPage));

          } catch (error) {
            console.error('Error loading admin tickets:', error);
            showNotification(`Error al cargar tickets: ${error.message}`, 'error');
            document.getElementById('admin-tickets-list').innerHTML = `
        <tr>
          <td colspan="7" class="text-center py-4 text-danger">
            Error al cargar tickets. Intenta recargar la página.
          </td>
        </tr>
      `;
          }
        }

        function filterAdminTickets() {
          // Reinicia la paginación a la primera página y recarga los tickets según el filtro seleccionado
          loadAdminTickets(1);
        }

        function searchAdminTickets() {
          // Reinicia la paginación a la primera página y recarga los tickets según el texto de búsqueda
          loadAdminTickets(1);
        }

        /**
 * Carga el equipo de soporte/admins para asignar tickets.
 * Debes tener un endpoint que devuelva la lista de admins.
 */
        async function fetchAdminSupportTeam() {
          try {
            // Ajusta la URL si tu endpoint es diferente
            const response = await fetch('/dashboard/utils/admin/support/team');
            if (!response.ok) throw new Error('No se pudo cargar el equipo de soporte');
            const data = await response.json();
            if (!data.success) throw new Error(data.message || 'Error en la respuesta del servidor');
            adminSupportAdmins = data.data;
          } catch (error) {
            adminSupportAdmins = [];
            showNotification(`Error al cargar equipo de soporte: ${error.message}`, 'error');
          }
        }

        /**
         * Actualiza la paginación de la tabla (tickets o transcripciones).
         * @param {string} selector - Selector del contenedor de paginación.
         * @param {number} currentPage - Página actual.
         * @param {number} totalPages - Total de páginas.
         */
        function updateAdminPagination(selector, currentPage, totalPages) {
          const container = document.querySelector(selector);
          if (!container) return;

          let html = '';

          // Botón anterior
          html += `<li class="page-item${currentPage === 1 ? ' disabled' : ''}">
    <a class="page-link" href="#" data-page="${currentPage - 1}" data-key="previous">Anterior</a>
  </li>`;

          // Páginas
          for (let i = 1; i <= totalPages; i++) {
            html += `<li class="page-item${i === currentPage ? ' active' : ''}">
      <a class="page-link" href="#" data-page="${i}">${i}</a>
    </li>`;
          }

          // Botón siguiente
          html += `<li class="page-item${currentPage === totalPages ? ' disabled' : ''}">
    <a class="page-link" href="#" data-page="${currentPage + 1}" data-key="next">Siguiente</a>
  </li>`;

          container.innerHTML = html;

          // Event listeners para paginación
          container.querySelectorAll('.page-link').forEach(link => {
            link.addEventListener('click', function (e) {
              e.preventDefault();
              const page = parseInt(this.getAttribute('data-page'));
              if (!isNaN(page) && page >= 1 && page <= totalPages) {
                if (selector === '#admin-tickets-pagination') {
                  loadAdminTickets(page);
                } else if (selector === '#admin-transcripts-pagination') {
                  loadAdminTranscripts(page);
                }
              }
            });
          });
        }


        function filterAdminTranscripts() {
          // Reinicia la paginación a la primera página y recarga las transcripciones según el filtro seleccionado
          loadAdminTranscripts(1);
        }

        /**
 * Carga las transcripciones para el panel de admin.
 */
        async function loadAdminTranscripts(page = 1) {
          try {
            showAdminLoader('#admin-transcripts-list');

            const filter = document.getElementById('admin-transcript-filter').value;

            const response = await fetch(`/dashboard/utils/admin/transcripts?page=${page}&limit=${adminItemsPerPage}&filter=${filter}`);
            if (!response.ok) throw new Error('Error al cargar transcripciones');

            const data = await response.json();
            if (!data.success) throw new Error(data.message || 'Error en la respuesta del servidor');

            renderAdminTranscripts(data.data);
            updateAdminPagination('#admin-transcripts-pagination', page, Math.ceil(data.total / adminItemsPerPage));
          } catch (error) {
            showNotification(`Error al cargar transcripciones: ${error.message}`, 'error');
            document.getElementById('admin-transcripts-list').innerHTML = `
      <tr>
        <td colspan="7" class="text-center py-4 text-danger">
          Error al cargar transcripciones. Intenta recargar la página.
        </td>
      </tr>
    `;
          }
        }

        /**
         * Renderiza la tabla de transcripciones.
         */
        function renderAdminTranscripts(transcripts) {
          const tbody = document.getElementById('admin-transcripts-list');
          if (!transcripts || transcripts.length === 0) {
            tbody.innerHTML = `
      <tr>
        <td colspan="7" class="text-center py-4 text-muted">
          No se encontraron transcripciones.
        </td>
      </tr>
    `;
            return;
          }

          tbody.innerHTML = transcripts.map(t => `
    <tr>
      <td>${t.transcriptId}</td>
      <td>${t.type}</td>
      <td>${t.referenceId || '-'}</td>
      <td>${(t.participants || []).join(', ')}</td>
      <td>${formatDateTime(t.createdAt)}</td>
      <td>${formatDuration(t.duration)}</td>
      <td>
        <button class="btn btn-sm btn-outline-primary view-admin-transcript-btn" data-transcript-id="${t.transcriptId}">
          <i class="fas fa-eye"></i>
        </button>
      </td>
    </tr>
  `).join('');

          // Listeners para ver transcripción (puedes implementar la función viewAdminTranscript)
          document.querySelectorAll('.view-admin-transcript-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
              const transcriptId = e.currentTarget.dataset.transcriptId;
              viewAdminTranscript(transcriptId);
            });
          });
        }


        async function sendAdminTicketMessage() {
          const input = document.getElementById('admin-ticket-chat-input');
          const message = input.value.trim();
          if (!message || !currentAdminTicketId) return;

          try {
            input.disabled = true;
            document.getElementById('admin-send-ticket-msg-btn').disabled = true;

            // Usa el userId de Discord del admin
            const adminId = adminUser.id

            const response = await fetch(`/dashboard/utils/admin/tickets/${currentAdminTicketId}/message`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ message, adminId })
            });

            if (!response.ok) throw new Error('Error al enviar mensaje');

            const data = await response.json();
            if (!data.success) throw new Error(data.message || 'Error en la respuesta del servidor');

            input.value = '';
            input.disabled = false;
            document.getElementById('admin-send-ticket-msg-btn').disabled = false;

            // Solo agrega el nuevo mensaje
            appendAdminNewMessage(data.data);

          } catch (error) {
            input.disabled = false;
            document.getElementById('admin-send-ticket-msg-btn').disabled = false;
            showNotification(`Error al enviar mensaje: ${error.message}`, 'error');
          }
        }

        function appendAdminNewMessage(msg) {
          const container = document.getElementById('admin-ticket-chat-messages');
          container.innerHTML += `
    <div class="ticket-message">
      <div class="fw-bold">${msg.senderName}</div>
      <div>${msg.content}</div>
      <small class="text-muted">${formatDateTime(msg.createdAt || msg.timestamp)}</small>
    </div>
  `;
          container.scrollTop = container.scrollHeight;
        }

        async function assignAdminTicket() {
          const select = document.getElementById('admin-assign-to');
          const adminId = select.value;
          if (!currentAdminTicketId || !adminId) return;

          try {
            select.disabled = true;

            const response = await fetch(`/dashboard/utils/admin/tickets/${currentAdminTicketId}/assign`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                adminId: adminId
              })
            }).catch((e) => {
              console.log(e)
            });

            if (!response.ok) throw new Error('Error al asignar el ticket');

            const data = await response.json();
            if (!data.success) throw new Error(data.message || 'Error en la respuesta del servidor');

            showNotification('Ticket asignado correctamente', 'success');
            // Actualiza la información del ticket en el modal
            viewAdminTicket(currentAdminTicketId);
          } catch (error) {
            showNotification(`Error al asignar ticket: ${error.message}`, 'error');
          } finally {
            select.disabled = false;
          }
        }

        async function downloadAdminTranscript() {
          if (!currentAdminTranscriptId) {
            showNotification('No hay transcripción seleccionada.', 'warning');
            return;
          }

          try {
            // Puedes cambiar el formato a 'json' si lo prefieres
            const response = await fetch(`/dashboard/utils/admin/transcripts/${currentAdminTranscriptId}?format=txt`);
            if (!response.ok) throw new Error('No se pudo descargar la transcripción');

            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);

            // Crear un enlace temporal para descargar el archivo
            const a = document.createElement('a');
            a.href = url;
            a.download = `transcripcion_${currentAdminTranscriptId}.txt`;
            document.body.appendChild(a);
            a.click();
            a.remove();
            window.URL.revokeObjectURL(url);

            showNotification('Transcripción descargada correctamente', 'success');
          } catch (error) {
            showNotification(`Error al descargar transcripción: ${error.message}`, 'error');
          }
        }

        async function closeAdminCurrentTicket() {
          if (!currentAdminTicketId) return;

          if (!confirm('¿Estás seguro de que deseas cerrar este ticket?')) return;

          try {
            const response = await fetch(`/dashboard/utils/admin/tickets/${currentAdminTicketId}/close`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              }
            });

            if (!response.ok) throw new Error('Error al cerrar el ticket');

            const data = await response.json();
            if (!data.success) throw new Error(data.message || 'Error en la respuesta del servidor');

            showNotification('Ticket cerrado correctamente', 'success');
            // Recargar la lista de tickets y cerrar el modal
            loadAdminTickets();
            const modal = bootstrap.Modal.getInstance(document.getElementById('adminTicketChatModal'));
            if (modal) modal.hide();
          } catch (error) {
            showNotification(`Error al cerrar ticket: ${error.message}`, 'error');
          }
        }

        function renderAdminTickets(tickets) {
          const tbody = document.getElementById('admin-tickets-list');

          if (!tickets || tickets.length === 0) {
            tbody.innerHTML = `
        <tr>
          <td colspan="7" class="text-center py-4 text-muted">
            No se encontraron tickets.
          </td>
        </tr>
      `;
            return;
          }

          tbody.innerHTML = tickets.map(ticket => `
      <tr data-ticket-id="${ticket.ticketId}" class="${ticket.priority === 'HIGH' ? 'priority-high' : ticket.priority === 'MEDIUM' ? 'priority-medium' : 'priority-low'}">
        <td>${ticket.ticketId}</td>
        <td>
          <div class="d-flex align-items-center">
            <img src="${ticket.userAvatar ? `https://cdn.discordapp.com/avatars/${ticket.userId}/${ticket.userAvatar}.png?size=256` : 'https://imgs.search.brave.com/_kjApAJTf5tLbC6CDpbqV5r8IE6EzQV4DwEy0MwUYdo/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly93d3cu/c2h1dHRlcnN0b2Nr/LmNvbS9zaHV0dGVy/c3RvY2svcGhvdG9z/LzUzNTg1MzI2My9k/aXNwbGF5XzE1MDAv/c3RvY2stdmVjdG9y/LXByb2ZpbGUtcGhv/dG8tdmVjdG9yLXBs/YWNlaG9zZGVyLXBp/Yy1tYWxlLXBlcnNv/bi1kZWZhdWx0LXBy/b2ZpbGUtZ3JheS1w/aG90by1waWN0dXJl/LWF2YXRhci01MzU4/NTMyNjMuanBn'}" 
                 alt="${ticket.userName}" 
                 class="admin-avatar">
            <div>
              <div class="fw-bold">${ticket.userName}</div>
              <small class="text-muted">Proximamente</small>
            </div>
          </div>
        </td>
        <td>${ticket.reason || 'Sin asunto'}</td>
        <td>
          <span class="ticket-status-badge ${ticket.status.toLowerCase()}">
            ${getStatusText(ticket.status)}
          </span>
        </td>
        <td>
          ${ticket.assignedTo ? `
            <div class="d-flex align-items-center">
              <img src="${ticket.assignedTo.userAvatar ? `https://cdn.discordapp.com/avatars/${ticket.assignedTo.userId}/${ticket.assignedTo.userAvatar}.png?size=256` : 'https://imgs.search.brave.com/_kjApAJTf5tLbC6CDpbqV5r8IE6EzQV4DwEy0MwUYdo/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly93d3cu/c2h1dHRlcnN0b2Nr/LmNvbS9zaHV0dGVy/c3RvY2svcGhvdG9z/LzUzNTg1MzI2My9k/aXNwbGF5XzE1MDAv/c3RvY2stdmVjdG9y/LXByb2ZpbGUtcGhv/dG8tdmVjdG9yLXBs/YWNlaG9zZGVyLXBp/Yy1tYWxlLXBlcnNv/bi1kZWZhdWx0LXBy/b2ZpbGUtZ3JheS1w/aG90by1waWN0dXJl/LWF2YXRhci01MzU4/NTMyNjMuanBn'}" 
                   alt="${ticket.assignedTo.userName}" 
                   class="admin-avatar">
              <span>${ticket.assignedTo.userName}</span>
            </div>
          ` : '<span class="badge bg-secondary">No asignado</span>'}
        </td>
        <td>${formatDate(ticket.createdAt)}</td>
        <td>
          <div class="admin-actions">
            <button class="btn btn-sm btn-outline-primary view-admin-ticket-btn" data-ticket-id="${ticket.ticketId}">
              <i class="fas fa-eye"></i>
            </button>
            ${ticket.status === 'OPEN' || ticket.status === 'PENDING' ? `
              <button class="btn btn-sm btn-outline-danger close-admin-ticket-btn" data-ticket-id="${ticket.ticketId}">
                <i class="fas fa-times"></i>
              </button>
            ` : ''}
          </div>
        </td>
      </tr>
    `).join('');

          // Agregar event listeners a los botones
          document.querySelectorAll('.view-admin-ticket-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
              const ticketId = e.currentTarget.dataset.ticketId;
              viewAdminTicket(ticketId);
            });
          });

          document.querySelectorAll('.close-admin-ticket-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
              const ticketId = e.currentTarget.dataset.ticketId;
              closeAdminTicket(ticketId);
            });
          });
        }

        async function viewAdminTicket(ticketId) {
          try {
            showAdminLoader('#admin-ticket-chat-messages');

            const response = await fetch(`/dashboard/utils/admin/tickets/${ticketId}`);
            if (!response.ok) throw new Error('Error al cargar ticket');

            const data = await response.json();
            if (!data.success) throw new Error(data.message || 'Error en la respuesta del servidor');

            const ticket = data.data;
            currentAdminTicketId = ticket.ticketId;

            // Actualizar modal con la información del ticket
            document.getElementById('admin-ticket-id-placeholder').textContent = ticket.ticketId;
            document.getElementById('admin-ticket-status-badge').className = `badge ${getStatusBadgeClass(ticket.status)}`;
            document.getElementById('admin-ticket-status-badge').textContent = getStatusText(ticket.status);

            document.getElementById('admin-ticket-user-info').innerHTML = `
        <div class="d-flex align-items-center">
          <img src="${ticket.userAvatar ? `https://cdn.discordapp.com/avatars/${ticket.userId}/${ticket.userAvatar}.png?size=256` : 'https://imgs.search.brave.com/_kjApAJTf5tLbC6CDpbqV5r8IE6EzQV4DwEy0MwUYdo/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly93d3cu/c2h1dHRlcnN0b2Nr/LmNvbS9zaHV0dGVy/c3RvY2svcGhvdG9z/LzUzNTg1MzI2My9k/aXNwbGF5XzE1MDAv/c3RvY2stdmVjdG9y/LXByb2ZpbGUtcGhv/dG8tdmVjdG9yLXBs/YWNlaG9zZGVyLXBp/Yy1tYWxlLXBlcnNv/bi1kZWZhdWx0LXBy/b2ZpbGUtZ3JheS1w/aG90by1waWN0dXJl/LWF2YXRhci01MzU4/NTMyNjMuanBn'}" 
               alt="${ticket.userName}" 
               class="admin-avatar">
          <div>
            <div class="fw-bold">${ticket.userName}</div>
            <small class="text-muted">Proximamente</small>
          </div>
        </div>
      `;

            document.getElementById('admin-ticket-created-at').textContent = formatDateTime(ticket.createdAt);
            document.getElementById('admin-ticket-updated-at').textContent = formatDateTime(ticket.updatedAt);
            document.getElementById('admin-ticket-category-info').textContent = ticket.category || 'General';
            document.getElementById('admin-ticket-priority-info').textContent = ticket.priority || 'Normal';
            document.getElementById('admin-ticket-subject-info').textContent = ticket.reason || 'Sin asunto';

            // Mostrar asignación
            const assignedInfo = ticket.assignedTo ? `
        <div class="d-flex align-items-center">
          <img src="${ticket.assignedTo.userAvatar ? `https://cdn.discordapp.com/avatars/${ticket.assignedTo.userId}/${ticket.assignedTo.userAvatar}.png?size=256` : 'https://imgs.search.brave.com/_kjApAJTf5tLbC6CDpbqV5r8IE6EzQV4DwEy0MwUYdo/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly93d3cu/c2h1dHRlcnN0b2Nr/LmNvbS9zaHV0dGVy/c3RvY2svcGhvdG9z/LzUzNTg1MzI2My9k/aXNwbGF5XzE1MDAv/c3RvY2stdmVjdG9y/LXByb2ZpbGUtcGhv/dG8tdmVjdG9yLXBs/YWNlaG9zZGVyLXBp/Yy1tYWxlLXBlcnNv/bi1kZWZhdWx0LXBy/b2ZpbGUtZ3JheS1w/aG90by1waWN0dXJl/LWF2YXRhci01MzU4/NTMyNjMuanBn'}" 
               alt="${ticket.assignedTo.userName}" 
               class="admin-avatar">
          <span>${ticket.assignedTo.userName}</span>
        </div>
      ` : '<span class="text-muted">No asignado</span>';
            document.getElementById('admin-ticket-assigned-info').innerHTML = assignedInfo;

            // Cargar lista de admins para asignar
            const assignSelect = document.getElementById('admin-assign-to');
            assignSelect.innerHTML = `
        <option value="" selected disabled>Asignar a...</option>
        ${adminSupportAdmins.map(admin => `
          <option value="${admin.discord?.userId || ''}" ${ticket.assignedTo && ticket.assignedTo.userId === admin.discord?.userId ? 'selected' : ''}>
            ${admin.name} (${admin.role})
          </option>
        `).join('')}
      `;

            // Cargar mensajes del ticket
            const msgResponse = await fetch(`/dashboard/utils/admin/tickets/${ticketId}/messages`);
            if (!msgResponse.ok) throw new Error('Error al cargar mensajes del ticket');
            const msgData = await msgResponse.json();
            if (!msgData.success) throw new Error(msgData.message || 'Error en la respuesta del servidor');

            renderAdminTicketMessages(msgData.data);

            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('adminTicketChatModal'));
            modal.show();

          } catch (error) {
            console.error('Error viewing admin ticket:', error);
            showNotification(`Error al cargar ticket: ${error.message}`, 'error');
          }
        }

        function renderAdminTicketMessages(messages) {
          const container = document.getElementById('admin-ticket-chat-messages');
          container.innerHTML = '';

          if (!messages || messages.length === 0) {
            container.innerHTML = `
      <div class="text-center py-4 text-muted">
        No hay mensajes en este ticket.
      </div>
    `;
            return;
          }

          // Aquí puedes renderizar los mensajes si existen
          container.innerHTML = messages.map(msg => `
    <div class="ticket-message">
      <div class="fw-bold">${msg.senderName}</div>
      <div>${msg.content}</div>
      <small class="text-muted">${formatDateTime(msg.createdAt)}</small>
    </div>
  `).join('');
        }

        /**
         * Muestra un loader/spinner en el elemento indicado (por selector)
         */
        function showAdminLoader(selector) {
          const el = document.querySelector(selector);
          if (el) {
            el.innerHTML = `
      <tr>
        <td colspan="7" class="text-center py-4">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
          </div>
        </td>
      </tr>
    `;
          }
        }

        // Configuración global de gráficos
        const CHART_CONFIG = {
          colors: {
            status: {
              OPEN: '#4bc0c0',
              PENDING: '#ff9f40',
              CLOSED: '#ff6384'
            },
            monthly: '#36a2eb',
            category: [
              '#6a5af9', '#198754', '#ffc107', '#dc3545',
              '#0dcaf0', '#6610f2', '#fd7e14', '#20c997',
              '#e83e8c', '#6f42c1', '#fd7e14', '#20c997'
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: {
              duration: 800
            }
          }
        };

        /**
         * Carga las estadísticas de soporte con manejo de caché y reintentos
         * @param {boolean} forceRefresh - Ignorar la caché y forzar recarga
         */
        async function loadAdminSupportStats(forceRefresh = false) {
          try {
            // Verificar caché antes de hacer la petición
            if (!forceRefresh && statsCache.data &&
              (Date.now() - statsCache.timestamp) < statsCache.ttl) {
              renderAll(statsCache.data);
              return;
            }

            const response = await fetchWithTimeout('/dashboard/utils/admin/support/stats', {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache'
              }
            });

            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            if (!data.success) {
              throw new Error(data.message || 'Invalid server response');
            }

            // Procesar y normalizar datos
            const processedData = processStatsData(data.data);

            // Actualizar caché
            statsCache = {
              data: processedData,
              timestamp: Date.now(),
              ttl: statsCache.ttl
            };

            renderAll(processedData);

          } catch (error) {
            console.error('Error loading stats:', error);
            handleStatsError(error);

            // Intentar mostrar datos cacheados si hay error
            if (statsCache.data) {
              renderAll(statsCache.data);
              showNotification('Mostrando datos cacheados. ' + error.message, 'warning');
            }
          }
        }

        /**
         * Procesa y normaliza los datos de la API
         */
        function processStatsData(rawData) {
          const stats = { ...rawData };

          // Normalizar tickets por estado
          stats.ticketsByStatus = {
            OPEN: stats.openTickets || 0,
            PENDING: stats.pendingTickets || 0,
            CLOSED: stats.closedTickets || 0
          };

          // Normalizar tickets por mes
          stats.ticketsByMonth = normalizeMonthlyData(stats.ticketsByMonth);

          // Normalizar tickets por categoría
          stats.ticketsByCategory = normalizeCategoryData(stats.ticketsByCategory);

          // Normalizar top usuarios
          stats.topUsers = normalizeTopUsers(stats.topUsers);

          return stats;
        }

        /**
         * Normaliza datos mensuales
         */
        function normalizeMonthlyData(monthlyData) {
          if (!Array.isArray(monthlyData)) {
            return { labels: [], data: [] };
          }

          // Agrupar por mes-año y ordenar cronológicamente
          const monthMap = new Map();

          monthlyData.forEach(item => {
            const date = new Date(item.createdAt);
            const monthYear = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;

            monthMap.set(monthYear, (monthMap.get(monthYear) || 0) + (item._count?._all || 0));
          });

          // Ordenar por fecha
          const sortedEntries = [...monthMap.entries()].sort();

          return {
            labels: sortedEntries.map(([monthYear]) => {
              const [year, month] = monthYear.split('-');
              return new Date(year, month - 1).toLocaleDateString('es-ES', {
                month: 'short',
                year: 'numeric'
              });
            }),
            data: sortedEntries.map(([, count]) => count)
          };
        }

        /**
         * Normaliza datos por categoría
         */
        function normalizeCategoryData(categoryData) {
          if (!Array.isArray(categoryData)) {
            return { labels: [], data: [] };
          }

          const categoryMap = new Map();

          categoryData.forEach(item => {
            const category = item.category || item.reason || 'General';
            categoryMap.set(category, (categoryMap.get(category) || 0) + 1);
          });

          // Ordenar por cantidad descendente
          const sortedEntries = [...categoryMap.entries()].sort((a, b) => b[1] - a[1]);

          return {
            labels: sortedEntries.map(([category]) => category),
            data: sortedEntries.map(([, count]) => count)
          };
        }

        /**
         * Normaliza datos de usuarios
         */
        function normalizeTopUsers(usersData) {
          if (!Array.isArray(usersData)) {
            return [];
          }

          return usersData.map(user => ({
            userId: user.userId,
            userName: user.userName || `Usuario ${user.userId}`,
            userAvatar: user.avatar || '/img/default-avatar.png',
            tickets: user.ticketCount || user.tickets || 0,
            lastActivity: user.lastActivity ? new Date(user.lastActivity) : null
          })).sort((a, b) => b.tickets - a.tickets);
        }

        /**
         * Renderiza todos los componentes con los datos
         */
        function renderAll(stats) {
          renderStatusChart(stats.ticketsByStatus);
          renderMonthlyChart(stats.ticketsByMonth);
          renderCategoryChart(stats.ticketsByCategory);
          renderTopUsers(stats.topUsers);
          updateSummaryCards(stats);
        }

        /**
         * Stub para updateSummaryCards para evitar error ReferenceError.
         * Puedes implementar lógica aquí si agregas tarjetas de resumen en el futuro.
         */
        function updateSummaryCards(stats) {
          // No hace nada actualmente.
        }

        /**
         * Renderiza el gráfico de estados
         */
        function renderStatusChart(statusData) {
          const ctx = document.getElementById('tickets-summary-chart');
          if (!ctx) return;

          const hasData = statusData.OPEN + statusData.PENDING + statusData.CLOSED > 0;

          if (!hasData) {
            renderNoData(ctx);
            return;
          }

          const config = {
            type: 'doughnut',
            data: {
              labels: ['Abiertos', 'Pendientes', 'Cerrados'],
              datasets: [{
                data: [statusData.OPEN, statusData.PENDING, statusData.CLOSED],
                backgroundColor: [
                  CHART_CONFIG.colors.status.OPEN,
                  CHART_CONFIG.colors.status.PENDING,
                  CHART_CONFIG.colors.status.CLOSED
                ],
                borderWidth: 0
              }]
            },
            options: {
              ...CHART_CONFIG.options,
              plugins: {
                legend: {
                  position: 'bottom',
                  labels: {
                    usePointStyle: true,
                    padding: 20
                  }
                },
                tooltip: {
                  callbacks: {
                    label: (context) => {
                      const total = context.dataset.data.reduce((a, b) => a + b, 0);
                      const value = context.raw;
                      const percentage = Math.round((value / total) * 100);
                      return `${context.label}: ${value} (${percentage}%)`;
                    }
                  }
                }
              },
              cutout: '75%'
            }
          };

          renderChart(ctx, config);
        }

        /**
         * Renderiza el gráfico mensual
         */
        function renderMonthlyChart(monthlyData) {
          const ctx = document.getElementById('tickets-monthly-chart');
          if (!ctx) return;

          if (monthlyData.labels.length === 0) {
            renderNoData(ctx);
            return;
          }

          const config = {
            type: 'bar',
            data: {
              labels: monthlyData.labels,
              datasets: [{
                label: 'Tickets',
                data: monthlyData.data,
                backgroundColor: CHART_CONFIG.colors.monthly,
                borderRadius: 6,
                borderSkipped: false,
                maxBarThickness: 40
              }]
            },
            options: {
              ...CHART_CONFIG.options,
              plugins: {
                legend: { display: false },
                tooltip: {
                  callbacks: {
                    label: (context) => `Tickets: ${context.parsed.y}`
                  }
                }
              },
              scales: {
                x: {
                  grid: { display: false },
                  ticks: { color: '#6c757d' }
                },
                y: {
                  beginAtZero: true,
                  grid: { color: 'rgba(0, 0, 0, 0.05)' },
                  ticks: { color: '#6c757d', precision: 0 }
                }
              }
            }
          };

          renderChart(ctx, config);
        }

        /**
         * Renderiza el gráfico por categoría
         */
        function renderCategoryChart(categoryData) {
          const ctx = document.getElementById('tickets-category-chart');
          if (!ctx) return;

          if (categoryData.labels.length === 0) {
            renderNoData(ctx);
            return;
          }

          const config = {
            type: 'pie',
            data: {
              labels: categoryData.labels,
              datasets: [{
                data: categoryData.data,
                backgroundColor: CHART_CONFIG.colors.category,
                borderWidth: 0
              }]
            },
            options: {
              ...CHART_CONFIG.options,
              plugins: {
                legend: {
                  position: 'right',
                  labels: {
                    boxWidth: 12,
                    padding: 16,
                    usePointStyle: true
                  }
                },
                tooltip: {
                  callbacks: {
                    label: (context) => {
                      const total = context.dataset.data.reduce((a, b) => a + b, 0);
                      const percentage = Math.round((context.raw / total) * 100);
                      return `${context.label}: ${context.raw} (${percentage}%)`;
                    }
                  }
                }
              },
              cutout: '60%'
            }
          };

          renderChart(ctx, config);
        }

        /**
         * Función auxiliar para renderizar gráficos
         */
        function renderChart(canvas, config) {
          // Destruir gráfico existente si existe
          if (canvas.chart) {
            canvas.chart.destroy();
          }

          // Crear nuevo gráfico
          canvas.chart = new Chart(canvas.getContext('2d'), config);
        }

        /**
         * Muestra mensaje cuando no hay datos
         */
        function renderNoData(canvas) {
          const ctx = canvas.getContext('2d');
          ctx.clearRect(0, 0, canvas.width, canvas.height);

          ctx.font = '14px "Segoe UI", Roboto, sans-serif';
          ctx.fillStyle = '#6c757d';
          ctx.textAlign = 'center';
          ctx.fillText('No hay datos disponibles', canvas.width / 2, canvas.height / 2);
        }

        /**
         * Helper para fetch con timeout
         */
        async function fetchWithTimeout(resource, options = {}) {
          const { timeout = 5000 } = options;

          const controller = new AbortController();
          const id = setTimeout(() => controller.abort(), timeout);

          const response = await fetch(resource, {
            ...options,
            signal: controller.signal
          });

          clearTimeout(id);
          return response;
        }

        /**
         * Manejo de errores
         */
        function handleStatsError(error) {
          const errorMessage = error.message.includes('aborted')
            ? 'La solicitud tardó demasiado. Verifica tu conexión.'
            : `Error al cargar estadísticas: ${error.message}`;

          showNotification(errorMessage, 'error');
        }

        /**
         * Renderiza la tabla de top usuarios en estadísticas
         */
        function renderTopUsers(topUsers) {
          const tbody = document.getElementById('top-users-list');
          if (!tbody) return;
          if (!topUsers || topUsers.length === 0) {
            tbody.innerHTML = `
      <tr>
        <td colspan="3" class="text-center py-3 text-muted">No hay datos.</td>
      </tr>
    `;
            return;
          }
          tbody.innerHTML = topUsers.map(user => {
            const name = user.userName || user.name || user.username || user.discord?.username || 'Desconocido';
            const avatar = user.userAvatar
              || user.userAvatar
              || (user.discord && user.discord.userId && user.discord.userAvatar
                ? `https://cdn.discordapp.com/avatars/${user.discord.userId}/${user.discord.userAvatar}.png?size=256`
                : 'https://imgs.search.brave.com/_kjApAJTf5tLbC6CDpbqV5r8IE6EzQV4DwEy0MwUYdo/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly93d3cu/c2h1dHRlcnN0b2Nr/LmNvbS9zaHV0dGVy/c3RvY2svcGhvdG9z/LzUzNTg1MzI2My9k/aXNwbGF5XzE1MDAv/c3RvY2stdmVjdG9y/LXByb2ZpbGUtcGhv/dG8tdmVjdG9yLXBs/YWNlaG9zZGVyLXBp/Yy1tYWxlLXBlcnNv/bi1kZWZhdWx0LXBy/b2ZpbGUtZ3JheS1w/aG90by1waWN0dXJl/LWF2YXRhci01MzU4/NTMyNjMuanBn');
            return `
    <tr>
      <td>
        <div class="d-flex align-items-center">
          <img src="${avatar}" alt="${name}" class="admin-avatar">
          <span>${name}</span>
        </div>
      </td>
      <td>${user.tickets}</td>
      <td>${user.lastActivity ? formatDateTime(user.lastActivity) : '-'}</td>
    </tr>
  `;
          }).join('');
        }

        // --- FUNCIONES DE UTILIDAD ---

        function showNotification(message, type = 'success') {
          const toast = document.getElementById('notificationToast');
          if (!toast) return;

          const toastTitle = toast.querySelector('.toast-title');
          const toastBody = toast.querySelector('.toast-body');

          if (toastTitle) toastTitle.textContent = type === 'success' ? 'Éxito' :
            type === 'error' ? 'Error' : 'Advertencia';
          if (toastBody) toastBody.textContent = message;

          // Cambiar color según tipo
          toast.className = 'toast';
          toast.classList.add(`bg-${type}`);

          // Mostrar toast
          const bsToast = new bootstrap.Toast(toast);
          bsToast.show();
        }

        function debounce(func, wait) {
          let timeout;
          return function () {
            const context = this, args = arguments;
            clearTimeout(timeout);
            timeout = setTimeout(() => {
              func.apply(context, args);
            }, wait);
          };
        }

        function formatDate(dateString, format = 'DD/MM/YYYY') {
          if (!dateString) return 'N/A';
          const date = new Date(dateString);

          if (format === 'DD/MM/YYYY') {
            return date.toLocaleDateString('es-ES');
          } else if (format === 'MMM YYYY') {
            return date.toLocaleDateString('es-ES', { month: 'short', year: 'numeric' });
          }

          return date.toLocaleDateString();
        }

        function formatTime(dateString) {
          if (!dateString) return 'N/A';
          const date = new Date(dateString);
          return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        function formatDateTime(dateString) {
          if (!dateString) return 'N/A';
          const date = new Date(dateString);
          return date.toLocaleString('es-ES');
        }

        function formatDuration(ms) {
          if (!ms) return 'N/A';
          const totalSeconds = Math.floor(ms / 1000);
          const mins = Math.floor(totalSeconds / 60);
          const secs = totalSeconds % 60;
          return `${mins}m ${secs}s`;
        }

        function getStatusText(status) {
          switch (status) {
            case 'OPEN': return 'Abierto';
            case 'CLOSED': return 'Cerrado';
            case 'PENDING': return 'Pendiente';
            default: return status;
          }
        }

        function getStatusBadgeClass(status) {
          switch (status) {
            case 'OPEN': return 'bg-success';
            case 'CLOSED': return 'bg-danger';
            case 'PENDING': return 'bg-warning';
            default: return 'bg-secondary';
          }
        }

        async function viewAdminTranscript(transcriptId) {
          try {
            currentAdminTranscriptId = transcriptId;
            // Mostrar loader
            document.getElementById('admin-transcript-content').innerHTML = `
      <div class="text-center py-4">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Cargando...</span>
        </div>
      </div>
    `;
            // Cargar datos de la transcripción
            const response = await fetch(`/dashboard/utils/admin/transcripts/${transcriptId}`);
            if (!response.ok) throw new Error('Error al cargar transcripción');
            const data = await response.json();
            if (!data.success) throw new Error(data.message || 'Error en la respuesta del servidor');
            const t = data.data;

            // Actualizar campos del modal
            document.getElementById('admin-transcript-id-placeholder').textContent = t.transcriptId;
            document.getElementById('admin-transcript-type').textContent = t.type || '-';
            document.getElementById('admin-transcript-reference').textContent = t.referenceId || '-';
            document.getElementById('admin-transcript-date').textContent = formatDateTime(t.createdAt);
            document.getElementById('admin-transcript-duration').textContent = formatDuration(t.duration);

            // Mostrar contenido de la transcripción
            document.getElementById('admin-transcript-content').innerHTML = t.content
              ? `<pre style="white-space:pre-wrap;">${t.content}</pre>`
              : '<div class="text-muted">Sin contenido.</div>';

            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('adminTranscriptModal'));
            modal.show();
          } catch (error) {
            showNotification(`Error al cargar transcripción: ${error.message}`, 'error');
            document.getElementById('admin-transcript-content').innerHTML = `<div class="text-danger">Error al cargar transcripción.</div>`;
          }
        }

        // Inicializar Marked.js con Highlight.js para resaltado de código
        marked.setOptions({
          highlight: function (code, lang) {
            if (lang && hljs.getLanguage(lang)) {
              return hljs.highlight(lang, code).value;
            }
            return hljs.highlightAuto(code).value;
          },
          langPrefix: 'hljs language-',
          breaks: true,
          gfm: true
        });

        // --- MULTILENGUAJE ---
        const translations = {
          es: {
            supportAdminTitle: "Soporte Admin",
            ticketsTab: "Tickets",
            statsTab: "Estadísticas",
            transcriptsTab: "Transcripciones",
            filterAll: "Todos",
            filterOpen: "Abiertos",
            filterPending: "Pendientes",
            filterClosed: "Cerrados",
            searchTicketsPlaceholder: "Buscar tickets...",
            ticketId: "ID",
            user: "Usuario",
            subject: "Asunto",
            status: "Estado",
            assignedTo: "Asignado a",
            date: "Fecha",
            actions: "Acciones",
            loading: "Cargando...",
            previous: "Anterior",
            next: "Siguiente",
            transcriptsAdminTitle: "Todas las Transcripciones",
            filterTicket: "Tickets",
            filterChat: "Chats",
            type: "Tipo",
            referenceId: "Referencia",
            participants: "Participantes",
            duration: "Duración",
            ticketNumber: "Ticket #",
            openStatus: "Abierto",
            ticketInfo: "Información del Ticket",
            userLabel: "Usuario:",
            createdLabel: "Creado:",
            updatedLabel: "Actualizado:",
            priorityLabel: "Prioridad:",
            assignedToLabel: "Asignado a:",
            writeReplyPlaceholder: "Escribe tu respuesta...",
            closeTicketBtn: "Cerrar Ticket",
            transcriptNumber: "Transcripción #",
            typeLabel: "Tipo:",
            referenceLabel: "Referencia:",
            dateLabel: "Fecha:",
            durationLabel: "Duración:",
            closeBtn: "Cerrar",
            downloadBtn: "Descargar",
            assignToPlaceholder: "Asignar a..."
          },
          en: {
            supportAdminTitle: "Support Admin",
            ticketsTab: "Tickets",
            statsTab: "Statistics",
            transcriptsTab: "Transcripts",
            filterAll: "All",
            filterOpen: "Open",
            filterPending: "Pending",
            filterClosed: "Closed",
            searchTicketsPlaceholder: "Search tickets...",
            ticketId: "ID",
            user: "User",
            subject: "Subject",
            status: "Status",
            assignedTo: "Assigned to",
            date: "Date",
            actions: "Actions",
            loading: "Loading...",
            previous: "Previous",
            next: "Next",
            transcriptsAdminTitle: "All Transcripts",
            filterTicket: "Tickets",
            filterChat: "Chats",
            type: "Type",
            referenceId: "Reference",
            participants: "Participants",
            duration: "Duration",
            ticketNumber: "Ticket #",
            openStatus: "Open",
            ticketInfo: "Ticket Information",
            userLabel: "User:",
            createdLabel: "Created:",
            updatedLabel: "Updated:",
            priorityLabel: "Priority:",
            assignedToLabel: "Assigned to:",
            writeReplyPlaceholder: "Write your reply...",
            closeTicketBtn: "Close Ticket",
            transcriptNumber: "Transcript #",
            typeLabel: "Type:",
            referenceLabel: "Reference:",
            dateLabel: "Date:",
            durationLabel: "Duration:",
            closeBtn: "Close",
            downloadBtn: "Download",
            assignToPlaceholder: "Assign to..."
          }
        };

        let currentLanguage = localStorage.getItem('language') || (navigator.language.startsWith('es') ? 'es' : 'en');

        function updateAdminTranslations() {
          document.querySelectorAll('[data-key]').forEach(el => {
            const key = el.getAttribute('data-key');
            if (!key) return;

            const value = translations[currentLanguage][key];
            if (el.tagName === 'INPUT' && el.placeholder) {
              el.placeholder = value;
            } else if (el.tagName === 'OPTION') {
              el.textContent = value;
            } else {
              el.textContent = value;
            }
          });
        }

        // Cambiar idioma desde el sidebar
        const langLinks = document.querySelectorAll('.lang-link');
        langLinks.forEach(link => {
          link.classList.toggle('active', link.dataset.lang === currentLanguage);
          link.addEventListener('click', (e) => {
            e.preventDefault();
            currentLanguage = link.dataset.lang;
            localStorage.setItem('language', currentLanguage);
            langLinks.forEach(l => l.classList.toggle('active', l === link));
            updateAdminTranslations();
          });
        });

        // Inicializar traducciones
        updateAdminTranslations();

        // --- CAMBIO DE TEMA ---
        document.addEventListener('DOMContentLoaded', function () {
          const themeSwitch = document.getElementById('themeSwitch');
          const themeIcon = document.querySelector('label[for="themeSwitch"] i');
          let savedTheme = localStorage.getItem('nebura-admin-theme') || 'dark';
          document.documentElement.setAttribute('data-bs-theme', savedTheme);
          if (themeSwitch) themeSwitch.checked = savedTheme === 'dark';
          if (themeIcon) themeIcon.className = savedTheme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
          if (themeSwitch) {
            themeSwitch.addEventListener('change', () => {
              const theme = themeSwitch.checked ? 'dark' : 'light';
              document.documentElement.setAttribute('data-bs-theme', theme);
              localStorage.setItem('nebura-admin-theme', theme);
              if (themeIcon) themeIcon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
            });
          }
        });
      });
    </script>
    <script>
      /**
       * Script para las funcionalidades de insertar código y subir archivos en el panel de admin
       */

      document.addEventListener('DOMContentLoaded', function () {
        // -------------------- INSERTAR CÓDIGO --------------------

        // Selector del botón de insertar código en el modal de ticket admin
        const adminInsertCodeBtn = document.querySelector('.ticket-chat-tools .btn-outline-secondary[title="Insertar código"]')

        if (adminInsertCodeBtn) {
          adminInsertCodeBtn.addEventListener('click', function () {
            showAdminCodeInsertModal();
          });
        }

        // Función para mostrar el modal de inserción de código en admin
        function showAdminCodeInsertModal() {
          // Crear el modal dinámicamente
          const modalHTML = `
            <div class="modal fade" id="adminCodeInsertModal" tabindex="-1" aria-labelledby="adminCodeInsertModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="adminCodeInsertModalLabel">
                                <i class="fas fa-code me-2"></i>Insertar Código
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="admin-code-language" class="form-label">Lenguaje</label>
                                <select class="form-select" id="admin-code-language">
                                    <option value="javascript">JavaScript</option>
                                    <option value="html">HTML</option>
                                    <option value="css">CSS</option>
                                    <option value="python">Python</option>
                                    <option value="java">Java</option>
                                    <option value="php">PHP</option>
                                    <option value="sql">SQL</option>
                                    <option value="bash">Bash</option>
                                    <option value="json">JSON</option>
                                    <option value="markdown">Markdown</option>
                                    <option value="plaintext">Texto Plano</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="admin-code-content" class="form-label">Código</label>
                                <textarea class="form-control font-monospace" id="admin-code-content" rows="10" style="font-family: 'Courier New', monospace;"></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                            <button type="button" class="btn btn-primary" id="admin-insert-code-btn">Insertar</button>
                        </div>
                    </div>
                </div>
            </div>
        `;

          // Añadir el modal al DOM
          document.body.insertAdjacentHTML('beforeend', modalHTML);

          // Mostrar el modal
          const codeModal = new bootstrap.Modal(document.getElementById('adminCodeInsertModal'));
          codeModal.show();

          // Configurar el evento para el botón de insertar
          document.getElementById('admin-insert-code-btn').addEventListener('click', function () {
            insertAdminCodeToChat();
            codeModal.hide();
          });

          // Eliminar el modal del DOM cuando se cierre
          document.getElementById('adminCodeInsertModal').addEventListener('hidden.bs.modal', function () {
            this.remove();
          });
        }

        // Función para insertar el código formateado en el área de chat admin
        function insertAdminCodeToChat() {
          const language = document.getElementById('admin-code-language').value;
          const codeContent = document.getElementById('admin-code-content').value;
          const chatInput = document.getElementById('admin-ticket-chat-input');

          if (!codeContent.trim()) return;

          // Formatear el código para Markdown
          const formattedCode = `\`\`\`${language}\n${codeContent}\n\`\`\``;

          // Insertar en el campo de chat
          if (chatInput) {
            const currentValue = chatInput.value;
            const newValue = currentValue ? `${currentValue}\n${formattedCode}` : formattedCode;
            chatInput.value = newValue;

            // Enfocar el campo y posicionar el cursor al final
            chatInput.focus();
            chatInput.setSelectionRange(newValue.length, newValue.length);

            // Autoajustar la altura del textarea
            autoResizeTextarea(chatInput);
          }
        }

        // -------------------- SUBIR ARCHIVOS --------------------

        // Selector del botón de adjuntar archivo en el modal de ticket admin
        const adminAttachFileBtn = document.querySelector('.ticket-chat-tools .btn-outline-secondary[title="Adjuntar archivo"]')

        if (adminAttachFileBtn) {
          adminAttachFileBtn.addEventListener('click', function () {
            // Crear input de archivo dinámicamente
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.multiple = true;
            fileInput.accept = '.jpg,.jpeg,.png,.gif,.pdf,.txt,.doc,.docx,.xls,.xlsx,.zip,.rar';
            fileInput.style.display = 'none';

            // Configurar el evento change
            fileInput.addEventListener('change', function (e) {
              if (e.target.files.length > 0) {
                uploadAdminFiles(e.target.files);
              }
            });

            // Añadir al DOM y hacer click
            document.body.appendChild(fileInput);
            fileInput.click();

            // Eliminar después de usar
            setTimeout(() => {
              document.body.removeChild(fileInput);
            }, 100);
          });
        }

        // Función para subir archivos en el panel admin
        async function uploadAdminFiles(files) {
          if (!files || files.length === 0) return;

          // Verificar límite de archivos (5 máximo)
          if (files.length > 5) {
            showNotification('Máximo 5 archivos permitidos', 'warning');
            return;
          }

          // Verificar tamaño de archivos (10MB máximo cada uno)
          for (let i = 0; i < files.length; i++) {
            if (files[i].size > 10 * 1024 * 1024) {
              showNotification(`El archivo ${files[i].name} supera el límite de 10MB`, 'warning');
              return;
            }
          }

          try {
            // Mostrar carga
            showNotification('Subiendo archivos...', 'info');

            const formData = new FormData();
            for (let i = 0; i < files.length; i++) {
              formData.append('file', files[i]); // Cambia 'files' por 'file'
            }
            formData.append('userId', window.user.id); // O el userId del admin
            formData.append('title', files[0].name); // O el título que desees

            // Añadir ticketId si está disponible
            if (currentAdminTicketId) {
              formData.append('ticketId', currentAdminTicketId);
            }

            const response = await fetch('/dashboard/utils/cdn', {
              method: 'POST',
              body: formData
            });

            if (!response.ok) throw new Error('Error al subir archivos');

            const data = await response.json();
            if (!data.success) throw new Error(data.message || 'Error en la respuesta del servidor');

            // Mostrar éxito
            showNotification('Archivos subidos correctamente', 'success');

            // Si estamos en un ticket, insertar enlaces en el chat
            if (currentAdminTicketId && data.data && data.data.length > 0) {
              const chatInput = document.getElementById('admin-ticket-chat-input');
              const fileLinks = data.data.map(file =>
                `[${file.originalName}](${file.url})`
              ).join('\n');

              if (chatInput) {
                const currentValue = chatInput.value;
                chatInput.value = currentValue ? `${currentValue}\n${fileLinks}` : fileLinks;
                chatInput.focus();
                autoResizeTextarea(chatInput);
              }
            }

          } catch (error) {
            console.error('Error uploading files:', error);
            showNotification(`Error al subir archivos: ${error.message}`, 'error');
          }
        }

        // -------------------- FUNCIONES UTILITARIAS --------------------

        // Función para autoajustar la altura del textarea
        function autoResizeTextarea(textarea) {
          textarea.style.height = 'auto';
          textarea.style.height = (textarea.scrollHeight) + 'px';
        }

        // Función para mostrar notificaciones
        function showNotification(message, type = 'info') {
          const toast = document.getElementById('notificationToast');
          if (!toast) return;

          const toastBody = toast.querySelector('.toast-body');
          const toastTitle = toast.querySelector('.toast-header strong');

          // Configurar colores según el tipo
          let bgClass = 'bg-primary';
          if (type === 'error') bgClass = 'bg-danger';
          else if (type === 'success') bgClass = 'bg-success';
          else if (type === 'warning') bgClass = 'bg-warning';

          toast.querySelector('.toast-header').className = `toast-header ${bgClass} text-white`;

          // Configurar contenido
          toastTitle.textContent = type.charAt(0).toUpperCase() + type.slice(1);
          toastBody.textContent = message;

          // Mostrar toast
          const bsToast = new bootstrap.Toast(toast);
          bsToast.show();
        }

        // Inicializar el resaltado de código para los mensajes existentes
        document.addEventListener('DOMContentLoaded', function () {
          // Configurar marked para usar highlight.js
          marked.setOptions({
            highlight: function (code, lang) {
              const language = hljs.getLanguage(lang) ? lang : 'plaintext';
              return hljs.highlight(code, { language }).value;
            },
            langPrefix: 'hljs language-',
          });

          // Aplicar el resaltado a todos los bloques de código en los mensajes
          document.querySelectorAll('.message-content pre code').forEach((block) => {
            hljs.highlightElement(block);
          });
        });
      });
    </script>
</body>

</html>
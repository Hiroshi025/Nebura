<!DOCTYPE html>
<html lang="es" data-bs-theme="light">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description"
    content="Nebura CDN: Sube, comparte y gestiona archivos de forma segura y sencilla en la nube de Nebura Works.">
  <meta name="keywords"
    content="Nebura, CDN, archivos, compartir, nube, almacenamiento, upload, download, gestión, plataforma, seguridad">
  <meta name="author" content="Nebura">
  <meta property="og:title"
    content="<%= sharedFile ? sharedFile.title : 'Nebura CDN - Gestión y Compartición de Archivos' %>">
  <meta property="og:description"
    content="<%= sharedFile ? (sharedFile.description || 'Archivo compartido en Nebura CDN') : 'Sube, comparte y gestiona archivos fácilmente en la nube de Nebura Works.' %>">
  <% if (sharedFile && sharedFile.mimeType && sharedFile.mimeType.startsWith('image/')) { %>
    <meta property="og:image" content="<%= sharedFile.downloadUrl %>">
    <% } %>
      <meta property="og:type" content="website">
      <meta property="og:url"
        content="<%= sharedFile ? sharedFile.shareUrl : 'https://host.hiroshi-dev.me/dashboard/cdn' %>">
      <meta name="twitter:card" content="summary_large_image">
      <meta name="twitter:title" content="Nebura CDN - Gestión y Compartición de Archivos">
      <meta name="twitter:description"
        content="Sube, comparte y gestiona archivos fácilmente en la nube de Nebura Works. Acceso rápido y seguro a tus documentos.">

      <title>
        <%= title %>
      </title>

      <!-- Link Utils -->
      <%- include('partials/link', { user: user }) %>
        <link rel="stylesheet" href="/css/cdn.css">
</head>

<body>
  <div id="app-container">
    <div class="d-flex" style="min-height: 100vh;">
      <!-- SIDEBAR MEJORADO -->
      <%- include('partials/sidebar', { user: user, panelSection: ` <div class="sidebar-section-title">CDN
    </div>
    <ul class="nav flex-column sidebar-nav">
      <li class="nav-item">
        <a class="nav-link active" href="/dashboard/cdn">
          <i class="fas fa-folder"></i> <span>Mis Archivos</span>
        </a>
      </li>
      <!-- Otros ítems específicos de CDN -->
    </ul>
    <div class="sidebar-divider"></div>
    ` }) %>

    <!-- CONTENIDO PRINCIPAL -->
    <main class="flex-grow-1 p-4">
      <% if (!sharedFile) { %>
        <!-- Sección de usuario y grid de archivos -->
        <!-- User Profile Section -->
        <div id="user-profile-section" class="user-profile animate__animated animate__fadeIn">
          <div class="d-flex align-items-center">
            <img
              src="<%= user.avatar ? `https://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.png?size=256` : 'https://imgs.search.brave.com/4rnnJU7_ENkK60goDh2C1fAWVhiD56t5CXuDp6Bs92o/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9jZG4u/cGl4YWJheS5jb20v/cGhvdG8vMjAxMy8w/Ny8xMy8xMC80NC9t/YW4tMTU3Njk5XzY0/MC5wbmc' %>"
              alt="User Avatar" class="user-avatar me-3">
            <div>
              <h3 class="mb-0"><%- user.global_name || user.username || user.name %></h3>
              <p class="mb-0 opacity-75">
                <% if (user.username) { %>
                  @<%- user.username %>
                    <% } else { %>
                      Role: <%- user.role %>
                        <% } %>
              </p>
              <div class="d-flex mt-2">
                <span class="badge bg-primary me-2">
                  <i class="fas fa-crown me-1"></i> <%- user.premium_type ? (user.premium_type===2 ? 'Nitro' : 'Basic' )
                    : 'Sin Suscripción' %>
                </span>
                <span class="badge bg-secondary">
                  <i class="fas fa-users me-1"></i> <%- user.guilds ? user.guilds.length : 0 %> <span
                      data-key="guildsCount">Servidores</span>
                </span>
              </div>
            </div>
          </div>
          <div class="user-stats">
            <div class="stat-item">
              <div class="stat-value" id="total-files">0</div>
              <div class="stat-label" data-key="totalFiles">Archivos Totales</div>
            </div>
            <div class="stat-item">
              <div class="stat-value" id="total-size">0 MB</div>
              <div class="stat-label" data-key="totalSize">Tamaño Total</div>
            </div>
            <div class="stat-item">
              <div class="stat-value" id="last-upload">-</div>
              <div class="stat-label" data-key="lastUpload">Última Subida</div>
            </div>
          </div>
        </div>

        <!-- VISTA PRINCIPAL (GRID DE ARCHIVOS) -->
        <div id="main-view">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3 fw-bold" data-key="mainTitle">Mis Archivos</h1>
            <div>
              <button class="btn btn-secondary me-2" id="toggle-view-btn" title="Cambiar vista">
                <i class="fas fa-th"></i>
              </button>
              <button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#uploadModal">
                <i class="fas fa-upload me-2"></i><span data-key="uploadBtn">Subir Archivo</span>
              </button>
              <button class="btn btn-outline-primary" id="refresh-btn" title="Recargar">
                <i class="fas fa-sync-alt"></i>
              </button>
            </div>
          </div>

          <!-- Barra de progreso global -->
          <div id="global-progress-container" class="upload-progress mb-3" style="display:none;">
            <div id="global-progress-bar" class="upload-progress-bar"></div>
          </div>

          <!-- Acciones en lote -->
          <div id="batch-actions" class="mb-3 d-none">
            <button class="btn btn-outline-danger btn-sm" id="batch-delete-btn"><i class="fas fa-trash"></i> Eliminar
              seleccionados</button>
            <button class="btn btn-outline-primary btn-sm" id="batch-download-btn"><i class="fas fa-download"></i>
              Descargar seleccionados</button>
            <span id="selected-count" class="ms-2"></span>
          </div>

          <!-- Search and Filter Section -->
          <div class="search-container">
            <i class="fas fa-search search-icon"></i>
            <input type="text" class="form-control search-input" id="search-input" placeholder="Buscar archivos..."
              data-key="searchPlaceholder">
          </div>

          <div class="filter-buttons">
            <button class="filter-btn active" data-filter="all" data-key="filterAll">Todos</button>
            <button class="filter-btn" data-filter="image" data-key="filterImages">Imágenes</button>
            <button class="filter-btn" data-filter="video" data-key="filterVideos">Videos</button>
            <button class="filter-btn" data-filter="audio" data-key="filterAudio">Audio</button>
            <button class="filter-btn" data-filter="document" data-key="filterDocuments">Documentos</button>
            <button class="filter-btn" data-filter="other" data-key="filterOther">Otros</button>
          </div>

          <!-- Vista GRID -->
          <div id="file-grid" class="row g-4">
            <!-- Las tarjetas de archivos se insertarán aquí -->
          </div>
          <!-- Vista LISTA -->
          <div id="file-list" class="table-responsive d-none">
            <table class="table table-hover align-middle">
              <thead>
                <tr>
                  <th><input type="checkbox" id="select-all-files"></th>
                  <th data-key="fileType">Tipo</th>
                  <th data-key="fileTitleLabel">Título</th>
                  <th data-key="fileDescriptionLabel">Descripción</th>
                  <th data-key="uploadDate">Subido el</th>
                  <th data-key="fileSize">Tamaño</th>
                  <th>Acciones</th>
                </tr>
              </thead>
              <tbody id="file-list-body">
                <!-- Filas de archivos -->
              </tbody>
            </table>
          </div>

          <!-- Paginación -->
          <nav id="pagination-nav" class="mt-3 d-flex justify-content-center d-none">
            <ul class="pagination mb-0">
              <li class="page-item"><button class="page-link" id="prev-page-btn">&laquo;</button></li>
              <li class="page-item disabled"><span class="page-link" id="page-info"></span></li>
              <li class="page-item"><button class="page-link" id="next-page-btn">&raquo;</button></li>
            </ul>
          </nav>

          <div id="loading-spinner" class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Cargando...</span>
            </div>
          </div>
          <div id="no-files-message" class="text-center text-muted my-5 d-none">
            <i class="fas fa-cloud-upload-alt fa-3x mb-3"></i>
            <h4 data-key="noFilesTitle">No hay archivos todavía</h4>
            <p data-key="noFilesSubtitle">¡Sube tu primer archivo para empezar!</p>
          </div>
        </div>
        <% } %>

          <% if (sharedFile) { %>
            <!-- Solo mostrar la vista de archivo compartido -->
            <div id="shared-file-view" style="display:block;">
              <div class="d-flex justify-content-center">
                <div class="card file-card" style="max-width: 800px; width: 100%;">
                  <div id="shared-file-content">
                    <!-- El contenido del archivo compartido se insertará aquí por JS -->
                  </div>
                </div>
              </div>
            </div>
            <% } %>
    </main>
  </div>

  <!-- Modal de Subida -->
  <div class="modal fade" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header border-0">
          <h5 class="modal-title fw-bold" id="uploadModalLabel" data-key="modalTitle">Subir Nuevo Archivo</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="uploadForm">
            <div class="mb-3">
              <label for="fileTitle" class="form-label" data-key="fileTitleLabel">Título del Archivo</label>
              <input type="text" class="form-control" id="fileTitle" required>
            </div>
            <div class="mb-3">
              <label for="fileDescription" class="form-label" data-key="fileDescriptionLabel">Descripción
                (Opcional)</label>
              <textarea class="form-control" id="fileDescription" rows="2"></textarea>
            </div>
            <div class="mb-3">
              <label class="form-label" data-key="fileSelectLabel">Archivo</label>
              <div id="drop-zone" class="drop-zone">
                <i class="fas fa-cloud-upload-alt fa-2x mb-2 text-muted"></i>
                <p class="mb-0" data-key="dropZoneText">Arrastra y suelta un archivo aquí o haz clic para
                  seleccionar
                </p>
                <small id="file-name-display" class="text-primary"></small>
                <div class="upload-progress mt-2">
                  <div class="upload-progress-bar"></div>
                </div>
              </div>
              <input type="file" id="fileInput" class="d-none" required name="file">
            </div>
            <div class="d-grid">
              <button type="submit" class="btn btn-primary" id="submit-upload-btn">
                <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                <span data-key="modalUploadBtn">Subir Archivo</span>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- File Preview Modal -->
  <div class="modal fade file-preview-modal" id="filePreviewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
      <div class="modal-content">
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        <div class="modal-body p-0">
          <div id="file-preview-content" class="w-100 h-100 d-flex justify-content-center align-items-center">
            <!-- Preview content will be inserted here -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de Compartir Archivo -->
  <div class="modal fade" id="shareFileModal" tabindex="-1" aria-labelledby="shareFileModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header border-0">
          <h5 class="modal-title fw-bold" id="shareFileModalLabel" data-key="shareModalTitle">Compartir Archivo</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="share-file-preview" class="mb-3"></div>
          <div class="mb-2">
            <label class="form-label fw-semibold" data-key="shareFileNameLabel">Archivo:</label>
            <span id="share-file-title"></span>
          </div>
          <div class="mb-2">
            <label class="form-label fw-semibold" data-key="shareFileDescLabel">Descripción:</label>
            <span id="share-file-desc"></span>
          </div>
          <div class="mb-3">
            <label class="form-label fw-semibold" data-key="shareLinkLabel">Enlace para compartir:</label>
            <div class="input-group">
              <input type="text" class="form-control" id="share-file-link" readonly>
              <button class="btn btn-outline-primary" type="button" id="copy-share-link-btn" data-key="copyLinkBtn">
                Copiar
              </button>
            </div>
            <div id="share-link-copied" class="text-success mt-2 d-none" data-key="copiedSuccess">
              ¡Enlace copiado al portapapeles!
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast para notificaciones -->
  <div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto" id="toast-title"></strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body" id="toast-body"></div>
    </div>
  </div>

  <!-- footer -->
  <%- include('partials/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

    <script>
      window.addEventListener('load', function () {
        // Mostrar un loader mientras se carga todo
        document.body.classList.add('loaded');
      });

      document.addEventListener('DOMContentLoaded', function () {
        // --- CONFIGURACIÓN Y ESTADO ---
        const USER_ID = JSON.parse('<%- JSON.stringify(user.id) %>');
        const USER_DATA = JSON.parse('<%- JSON.stringify(user) %>');
        let currentLanguage = 'es';
        let currentFiles = [];
        let currentPage = 1;
        const PAGE_SIZE = 12;
        let currentView = 'grid'; // 'grid' o 'list'
        let selectedFiles = new Set();
        const toastElement = document.getElementById('notificationToast');
        const notificationToast = new bootstrap.Toast(toastElement);
        const filePreviewModal = new bootstrap.Modal(document.getElementById('filePreviewModal'));
        const userAvatar = document.querySelector('.user-avatar');
        const shareFileModal = new bootstrap.Modal(document.getElementById('shareFileModal'));
        const shareFilePreview = document.getElementById('share-file-preview');
        const shareFileTitle = document.getElementById('share-file-title');
        const shareFileDesc = document.getElementById('share-file-desc');
        const shareFileLink = document.getElementById('share-file-link');
        const copyShareLinkBtn = document.getElementById('copy-share-link-btn');
        const shareLinkCopied = document.getElementById('share-link-copied');

        // --- DICCIONARIO DE TRADUCCIONES ---
        const translations = {
          en: {
            mainTitle: "My Files", uploadBtn: "Upload File", modalTitle: "Upload New File",
            fileTitleLabel: "File Title", fileDescriptionLabel: "Description (Optional)",
            fileSelectLabel: "File", dropZoneText: "Drag & drop a file here or click to select",
            modalUploadBtn: "Upload File", noFilesTitle: "No files yet", noFilesSubtitle: "Upload your first file to get started!",
            viewBtn: "View", downloadBtn: "Download", shareBtn: "Share", deleteBtn: "Delete",
            uploadDate: "Uploaded", fileSize: "Size", fileSharedTitle: "Shared File",
            copiedSuccess: "Link copied to clipboard!", deleteConfirm: "Are you sure you want to delete this file?",
            deleteSuccess: "File deleted successfully.", uploadSuccess: "File uploaded successfully!",
            errorFetch: "Error fetching files.", errorUpload: "Error uploading file.", errorDelete: "Error deleting file.",
            searchPlaceholder: "Search files...", filterAll: "All", filterImages: "Images", filterVideos: "Videos",
            filterAudio: "Audio", filterDocuments: "Documents", filterOther: "Other", totalFiles: "Total Files",
            totalSize: "Total Size", lastUpload: "Last Upload", previewBtn: "Preview", fileType: "Type",
            image: "Image", video: "Video", audio: "Audio", pdf: "PDF", document: "Document", archive: "Archive", other: "Other",
            shareModalTitle: "Share File",
            shareFileNameLabel: "File:",
            shareFileDescLabel: "Description:",
            shareLinkLabel: "Share Link:",
            copyLinkBtn: "Copy",
          },
          es: {
            mainTitle: "Mis Archivos", uploadBtn: "Subir Archivo", modalTitle: "Subir Nuevo Archivo",
            fileTitleLabel: "Título del Archivo", fileDescriptionLabel: "Descripción (Opcional)",
            fileSelectLabel: "Archivo", dropZoneText: "Arrastra y suelta un archivo aquí o haz clic para seleccionar",
            modalUploadBtn: "Subir Archivo", noFilesTitle: "No hay archivos todavía", noFilesSubtitle: "¡Sube tu primer archivo para empezar!",
            viewBtn: "Ver", downloadBtn: "Descargar", shareBtn: "Compartir", deleteBtn: "Eliminar",
            uploadDate: "Subido el", fileSize: "Tamaño", fileSharedTitle: "Archivo Compartido",
            copiedSuccess: "¡Enlace copiado al portapapeles!", deleteConfirm: "¿Estás seguro de que quieres eliminar este archivo?",
            deleteSuccess: "Archivo eliminado correctamente.", uploadSuccess: "¡Archivo subido con éxito!",
            errorFetch: "Error al cargar los archivos.", errorUpload: "Error al subir el archivo.", errorDelete: "Error al eliminar el archivo.",
            searchPlaceholder: "Buscar archivos...", filterAll: "Todos", filterImages: "Imágenes", filterVideos: "Videos",
            filterAudio: "Audio", filterDocuments: "Documentos", filterOther: "Otros", totalFiles: "Archivos Totales",
            totalSize: "Tamaño Total", lastUpload: "Última Subida", previewBtn: "Vista Previa", fileType: "Tipo",
            image: "Imagen", video: "Video", audio: "Audio", pdf: "PDF", document: "Documento", archive: "Archivo", other: "Otro",
            shareModalTitle: "Compartir Archivo",
            shareFileNameLabel: "Archivo:",
            shareFileDescLabel: "Descripción:",
            shareLinkLabel: "Enlace para compartir:",
            copyLinkBtn: "Copiar",
          }
        };

        // --- ELEMENTOS DEL DOM ---
        const themeSwitch = document.getElementById('themeSwitch');
        const themeIcon = document.querySelector('label[for="themeSwitch"] i');
        const langLinks = document.querySelectorAll('.lang-link');
        const mainView = document.getElementById('main-view');
        const sharedFileView = document.getElementById('shared-file-view');
        const fileGrid = document.getElementById('file-grid');
        const fileList = document.getElementById('file-list');
        const fileListBody = document.getElementById('file-list-body');
        const toggleViewBtn = document.getElementById('toggle-view-btn');
        const batchActions = document.getElementById('batch-actions');
        const batchDeleteBtn = document.getElementById('batch-delete-btn');
        const batchDownloadBtn = document.getElementById('batch-download-btn');
        const selectedCount = document.getElementById('selected-count');
        const selectAllFiles = document.getElementById('select-all-files');
        const globalProgressContainer = document.getElementById('global-progress-container');
        const globalProgressBar = document.getElementById('global-progress-bar');
        const paginationNav = document.getElementById('pagination-nav');
        const prevPageBtn = document.getElementById('prev-page-btn');
        const nextPageBtn = document.getElementById('next-page-btn');
        const pageInfo = document.getElementById('page-info');
        const loadingSpinner = document.getElementById('loading-spinner');
        const noFilesMessage = document.getElementById('no-files-message');
        const uploadModal = new bootstrap.Modal(document.getElementById('uploadModal'));
        const searchInput = document.getElementById('search-input');
        const filterButtons = document.querySelectorAll('.filter-btn');
        const refreshBtn = document.getElementById('refresh-btn');
        const uploadProgress = document.querySelector('.upload-progress');
        const uploadProgressBar = document.querySelector('.upload-progress-bar');
        const totalFilesElement = document.getElementById('total-files');
        const totalSizeElement = document.getElementById('total-size');
        const lastUploadElement = document.getElementById('last-upload');
        const dropZone = document.getElementById('drop-zone');
        const fileInput = document.getElementById('fileInput');
        const fileNameDisplay = document.getElementById('file-name-display');
        const uploadForm = document.getElementById('uploadForm');

        // --- FUNCIONES DE AYUDA ---
        const showToast = (title, body, type = 'success') => {
          const toastTitle = document.getElementById('toast-title');
          const toastBody = document.getElementById('toast-body');
          toastTitle.textContent = title;
          toastBody.textContent = body;
          toastElement.classList.remove('bg-success', 'bg-danger', 'text-white');
          if (type === 'success') {
            toastElement.classList.add('bg-success', 'text-white');
          } else {
            toastElement.classList.add('bg-danger', 'text-white');
          }
          notificationToast.show();
        };

        const formatDate = (dateString) => new Date(dateString).toLocaleDateString(currentLanguage, {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });

        const formatSize = (bytes) => {
          if (bytes === 0) return '0 Bytes';
          const k = 1024;
          const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
          const i = Math.floor(Math.log(bytes) / Math.log(k));
          return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        };

        const getFileType = (mimeType) => {
          const type = mimeType.split('/')[0];
          const specificType = mimeType.split('/')[1];

          if (type === 'image') return 'image';
          if (type === 'video') return 'video';
          if (type === 'audio') return 'audio';
          if (mimeType === 'application/pdf') return 'pdf';
          if (mimeType.includes('word') || mimeType.includes('excel') || mimeType.includes('powerpoint') || mimeType.includes('text')) return 'document';
          if (mimeType.includes('zip') || mimeType.includes('compressed') || mimeType.includes('archive')) return 'archive';
          return 'other';
        };

        const getFileIcon = (mimeType) => {
          const iconMap = {
            'image': 'fa-solid fa-file-image', 'audio': 'fa-solid fa-file-audio',
            'video': 'fa-solid fa-file-video', 'pdf': 'fa-solid fa-file-pdf',
            'archive': 'fa-solid fa-file-zipper', 'document': 'fa-solid fa-file-lines',
            'other': 'fa-solid fa-file'
          };
          const fileType = getFileType(mimeType);
          return iconMap[fileType] || iconMap['other'];
        };

        const getFileTypeName = (mimeType) => {
          const fileType = getFileType(mimeType);
          return translations[currentLanguage][fileType] || translations[currentLanguage]['other'];
        };

        const updateUserStats = (files) => {
          if (!files || files.length === 0) {
            totalFilesElement.textContent = '0';
            totalSizeElement.textContent = '0 MB';
            lastUploadElement.textContent = '-';
            return;
          }

          // Total files
          totalFilesElement.textContent = files.length;

          // Total size
          const totalSize = files.reduce((sum, file) => sum + file.size, 0);
          totalSizeElement.textContent = formatSize(totalSize);

          // Last upload
          const sortedFiles = [...files].sort((a, b) => new Date(b.uploadedAt) - new Date(a.uploadedAt));
          lastUploadElement.textContent = formatDate(sortedFiles[0].uploadedAt);
        };

        // --- TRADUCCIÓN DE INTERFAZ ---
        function updateTranslations() {
          document.querySelectorAll('[data-key]').forEach(element => {
            const key = element.dataset.key;
            if (translations[currentLanguage][key]) {
              if (element.tagName === 'INPUT' && element.placeholder) {
                element.placeholder = translations[currentLanguage][key];
              } else {
                element.textContent = translations[currentLanguage][key];
              }
            }
          });
          // Traducir modal de compartir
          if (document.getElementById('shareFileModalLabel')) document.getElementById('shareFileModalLabel').textContent = translations[currentLanguage].shareModalTitle;
          if (document.querySelector('[data-key="shareFileNameLabel"]')) document.querySelector('[data-key="shareFileNameLabel"]').textContent = translations[currentLanguage].shareFileNameLabel;
          if (document.querySelector('[data-key="shareFileDescLabel"]')) document.querySelector('[data-key="shareFileDescLabel"]').textContent = translations[currentLanguage].shareFileDescLabel;
          if (document.querySelector('[data-key="shareLinkLabel"]')) document.querySelector('[data-key="shareLinkLabel"]').textContent = translations[currentLanguage].shareLinkLabel;
          if (copyShareLinkBtn) copyShareLinkBtn.textContent = translations[currentLanguage].copyLinkBtn;
          if (shareLinkCopied) shareLinkCopied.textContent = translations[currentLanguage].copiedSuccess;
        }

        // --- ELIMINAR ARCHIVO INDIVIDUAL ---
        async function handleDelete(fileName, cardElement) {
          if (!confirm(translations[currentLanguage].deleteConfirm)) return;

          try {
            const result = await api.deleteFile(USER_ID, fileName);
            if (result.success) {
              showToast(
                translations[currentLanguage].deleteSuccess,
                translations[currentLanguage].deleteSuccess,
                'success'
              );
              if (cardElement && cardElement.parentElement) {
                cardElement.parentElement.remove();
              }
              updateUserStats(currentFiles.filter(f => f.fileName !== fileName));
              // Recargar archivos después de eliminar
              await fetchAndRenderFiles();
            } else {
              showToast(
                translations[currentLanguage].errorDelete,
                result.message || translations[currentLanguage].errorDelete,
                'danger'
              );
            }
          } catch (error) {
            console.error("Delete error:", error);
            showToast(
              translations[currentLanguage].errorDelete,
              error.message || translations[currentLanguage].errorDelete,
              'danger'
            );
          }
        }

        // --- LÓGICA DE LA APLICACIÓN ---
        const api = {
          getFiles: async (userId) => {
            const cacheKey = `files-${userId}`;
            const cachedData = sessionStorage.getItem(cacheKey);

            if (cachedData) {
              return JSON.parse(cachedData);
            }

            try {
              const response = await fetch(`/dashboard/utils/cdn/${userId}`);
              if (!response.ok) throw new Error('Network response was not ok');
              const data = await response.json();

              // Almacenar en caché por 1 minuto
              sessionStorage.setItem(cacheKey, JSON.stringify(data));
              setTimeout(() => sessionStorage.removeItem(cacheKey), 60000);

              return data;
            } catch (error) {
              console.error("API Error getFiles:", error);
              return { success: false, message: 'Error fetching files' };
            }
          },
          uploadFile: async (formData, onProgress) => {
            return new Promise(async (resolve) => {
              try {
                const xhr = new XMLHttpRequest();

                xhr.upload.addEventListener('progress', (event) => {
                  if (event.lengthComputable) {
                    const percentComplete = Math.round((event.loaded / event.total) * 100);
                    onProgress(percentComplete);
                  }
                });

                xhr.open('POST', `/dashboard/utils/cdn?userId=${USER_ID}`, true);

                xhr.onload = () => {
                  if (xhr.status >= 200 && xhr.status < 300) {
                    resolve(JSON.parse(xhr.responseText));
                  } else {
                    resolve({ success: false, message: 'Upload failed' });
                  }
                };

                xhr.onerror = () => {
                  resolve({ success: false, message: 'Network error' });
                };

                xhr.send(formData);
              } catch (error) {
                console.error("API Error uploadFile:", error);
                return { success: false, message: 'Error uploading file' };
              }
            });
          },
          deleteFile: async (userId, fileName) => {
            try {
              const response = await fetch(`/dashboard/utils/cdn/${userId}/${fileName}`, {
                method: 'DELETE'
              });
              if (!response.ok) throw new Error('Delete failed');
              return await response.json();
            } catch (error) {
              console.error("API Error deleteFile:", error);
              return { success: false, message: 'Error deleting file' };
            }
          }
        };

        // --- VISTA GRID Y LISTA ---
        function renderFileGrid(files) {
          fileGrid.innerHTML = '';
          currentFiles = files || [];
          updateUserStats(currentFiles);

          if (!files || files.length === 0) {
            noFilesMessage.classList.remove('d-none');
            return;
          }
          noFilesMessage.classList.add('d-none');

          // Paginación
          const start = (currentPage - 1) * PAGE_SIZE;
          const end = start + PAGE_SIZE;
          const paginatedFiles = files.slice(start, end);

          paginatedFiles.forEach((file, index) => {
            const fileType = getFileType(file.mimeType);
            const preview = file.mimeType.startsWith('image/')
              ? `<img src="${file.downloadUrl}" alt="${file.title}" onerror="this.onerror=null;this.src='https://placehold.co/400/cccccc/ffffff?text=Error';">`
              : `<i class="${getFileIcon(file.mimeType)}"></i>`;

            const card = document.createElement('div');
            card.className = 'col-lg-3 col-md-4 col-sm-6 fade-in';
            card.style.animationDelay = `${index * 0.05}s`;
            card.innerHTML = `
        <div class="card file-card h-100" data-type="${fileType}" data-title="${file.title.toLowerCase()}" data-description="${(file.description || '').toLowerCase()}">
          <div class="file-preview position-relative">
            <input type="checkbox" class="file-checkbox position-absolute top-0 start-0 m-2" data-filename="${file.fileName}" ${selectedFiles.has(file.fileName) ? 'checked' : ''}>
            ${preview}
            <span class="file-type-badge">${getFileTypeName(file.mimeType)}</span>
          </div>
          <div class="card-body pb-0">
            <h5 class="card-title text-truncate">${file.title}</h5>
            <p class="card-text text-muted text-truncate">${file.description || file.originalName}</p>
          </div>
          <div class="card-footer">
            <p class="card-text text-muted mb-2">
              <small><strong data-key="uploadDate">${translations[currentLanguage].uploadDate}</strong>: ${formatDate(file.uploadedAt)}</small><br>
              <small><strong data-key="fileSize">${translations[currentLanguage].fileSize}</strong>: ${formatSize(file.size)}</small>
            </p>
            <div class="d-flex justify-content-between">
              <div class="btn-group">
                <button class="btn btn-sm btn-outline-secondary preview-btn" title="${translations[currentLanguage].previewBtn}">
                  <i class="fas fa-eye"></i>
                </button>
                <a href="/dashboard/utils/cdn/${USER_ID}/${file.fileName}" download="${file.originalName}" class="btn btn-sm btn-outline-secondary" title="${translations[currentLanguage].downloadBtn}">
                  <i class="fas fa-download"></i>
                </a>
              </div>
              <div class="btn-group">
                <button class="btn btn-sm btn-outline-secondary share-btn" title="${translations[currentLanguage].shareBtn}">
                  <i class="fas fa-share-alt"></i>
                </button>
                <button class="btn btn-sm btn-outline-danger delete-btn" title="${translations[currentLanguage].deleteBtn}">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      `;

            card.querySelector('.preview-btn').addEventListener('click', () => handlePreview(file));
            card.querySelector('.share-btn').addEventListener('click', () => handleShare(file));
            card.querySelector('.delete-btn').addEventListener('click', () => handleDelete(file.fileName, card));
            card.querySelector('.file-checkbox').addEventListener('change', (e) => handleSelectFile(e, file.fileName));
            fileGrid.appendChild(card);
          });

          // Drag & drop para subir archivos
          fileGrid.addEventListener('dragover', (e) => {
            e.preventDefault();
            fileGrid.classList.add('dragover');
          });
          fileGrid.addEventListener('dragleave', () => fileGrid.classList.remove('dragover'));
          fileGrid.addEventListener('drop', (e) => {
            e.preventDefault();
            fileGrid.classList.remove('dragover');
            if (e.dataTransfer.files.length) {
              handleDroppedFiles(e.dataTransfer.files);
            }
          });

          // SortableJS para reordenar (solo visual)
          new Sortable(fileGrid, {
            animation: 150,
            ghostClass: 'sortable-ghost'
          });

          updatePagination(files.length);
        }

        function renderFileList(files) {
          fileListBody.innerHTML = '';
          currentFiles = files || [];
          updateUserStats(currentFiles);

          if (!files || files.length === 0) {
            noFilesMessage.classList.remove('d-none');
            return;
          }
          noFilesMessage.classList.add('d-none');

          // Paginación
          const start = (currentPage - 1) * PAGE_SIZE;
          const end = start + PAGE_SIZE;
          const paginatedFiles = files.slice(start, end);

          paginatedFiles.forEach(file => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td><input type="checkbox" class="file-checkbox" data-filename="${file.fileName}" ${selectedFiles.has(file.fileName) ? 'checked' : ''}></td>
              <td><span class="file-type-badge">${getFileTypeName(file.mimeType)}</span></td>
              <td>${file.title}</td>
              <td>${file.description || file.originalName}</td>
              <td>${formatDate(file.uploadedAt)}</td>
              <td>${formatSize(file.size)}</td>
              <td>
                <button class="btn btn-sm btn-outline-secondary preview-btn" title="${translations[currentLanguage].previewBtn}">
                  <i class="fas fa-eye"></i>
                </button>
                <a href="/dashboard/utils/cdn/${USER_ID}/${file.fileName}" download="${file.originalName}" class="btn btn-sm btn-outline-secondary" title="${translations[currentLanguage].downloadBtn}">
                  <i class="fas fa-download"></i>
                </a>
                <button class="btn btn-sm btn-outline-secondary share-btn" title="${translations[currentLanguage].shareBtn}">
                  <i class="fas fa-share-alt"></i>
                </button>
                <button class="btn btn-sm btn-outline-danger delete-btn" title="${translations[currentLanguage].deleteBtn}">
                  <i class="fas fa-trash"></i>
                </button>
              </td>
            `;
            tr.querySelector('.preview-btn').addEventListener('click', () => handlePreview(file));
            tr.querySelector('.share-btn').addEventListener('click', () => handleShare(file));
            tr.querySelector('.delete-btn').addEventListener('click', () => handleDelete(file.fileName, tr));
            tr.querySelector('.file-checkbox').addEventListener('change', (e) => handleSelectFile(e, file.fileName));
            fileListBody.appendChild(tr);
          });

          updatePagination(files.length);
        }

        function updatePagination(totalFiles) {
          const totalPages = Math.ceil(totalFiles / PAGE_SIZE);
          if (totalPages <= 1) {
            paginationNav.classList.add('d-none');
            return;
          }
          paginationNav.classList.remove('d-none');
          pageInfo.textContent = `${currentPage} / ${totalPages}`;
          prevPageBtn.disabled = currentPage === 1;
          nextPageBtn.disabled = currentPage === totalPages;
        }

        prevPageBtn.addEventListener('click', () => {
          if (currentPage > 1) {
            currentPage--;
            renderCurrentView();
          }
        });
        nextPageBtn.addEventListener('click', () => {
          const totalPages = Math.ceil(currentFiles.length / PAGE_SIZE);
          if (currentPage < totalPages) {
            currentPage++;
            renderCurrentView();
          }
        });

        function renderCurrentView() {
          if (currentView === 'grid') {
            fileGrid.classList.remove('d-none');
            fileList.classList.add('d-none');
            renderFileGrid(currentFiles);
          } else {
            fileGrid.classList.add('d-none');
            fileList.classList.remove('d-none');
            renderFileList(currentFiles);
          }
          updateBatchActions();
        }

        // Alternar vista grid/lista
        toggleViewBtn.addEventListener('click', () => {
          currentView = currentView === 'grid' ? 'list' : 'grid';
          toggleViewBtn.querySelector('i').className = currentView === 'grid' ? 'fas fa-th' : 'fas fa-list';
          renderCurrentView();
        });

        // --- SELECCIÓN MÚLTIPLE Y ACCIONES EN LOTE ---
        function handleSelectFile(e, fileName) {
          if (e.target.checked) {
            selectedFiles.add(fileName);
          } else {
            selectedFiles.delete(fileName);
          }
          updateBatchActions();
        }

        function updateBatchActions() {
          if (selectedFiles.size > 0) {
            batchActions.classList.remove('d-none');
            selectedCount.textContent = `${selectedFiles.size} seleccionados`;
          } else {
            batchActions.classList.add('d-none');
            selectedCount.textContent = '';
          }
          // Actualizar checkboxes
          document.querySelectorAll('.file-checkbox').forEach(cb => {
            cb.checked = selectedFiles.has(cb.dataset.filename);
          });
          // Actualizar select-all
          if (selectAllFiles) {
            const visibleCheckboxes = Array.from(document.querySelectorAll('#file-list .file-checkbox'));
            selectAllFiles.checked = visibleCheckboxes.length > 0 && visibleCheckboxes.every(cb => cb.checked);
          }
        }

        if (selectAllFiles) {
          selectAllFiles.addEventListener('change', (e) => {
            const check = e.target.checked;
            document.querySelectorAll('#file-list .file-checkbox').forEach(cb => {
              cb.checked = check;
              if (check) selectedFiles.add(cb.dataset.filename);
              else selectedFiles.delete(cb.dataset.filename);
            });
            updateBatchActions();
          });
        }

        batchDeleteBtn.addEventListener('click', async () => {
          if (!selectedFiles.size) return;
          if (!confirm(translations[currentLanguage].deleteConfirm)) return;
          globalProgressContainer.style.display = 'block';
          let done = 0;
          for (const fileName of Array.from(selectedFiles)) {
            await handleDelete(fileName);
            done++;
            globalProgressBar.style.width = `${(done / selectedFiles.size) * 100}%`;
          }
          globalProgressContainer.style.display = 'none';
          globalProgressBar.style.width = '0%';
          selectedFiles.clear();
          updateBatchActions();
          await fetchAndRenderFiles();
        });

        batchDownloadBtn.addEventListener('click', async () => {
          if (!selectedFiles.size) return;
          globalProgressContainer.style.display = 'block';
          let done = 0;
          for (const fileName of Array.from(selectedFiles)) {
            const file = currentFiles.find(f => f.fileName === fileName);
            if (file) {
              const a = document.createElement('a');
              a.href = `/dashboard/utils/cdn/${USER_ID}/${file.fileName}`;
              a.download = file.originalName;
              document.body.appendChild(a);
              a.click();
              document.body.removeChild(a);
            }
            done++;
            globalProgressBar.style.width = `${(done / selectedFiles.size) * 100}%`;
          }
          globalProgressContainer.style.display = 'none';
          globalProgressBar.style.width = '0%';
        });

        // --- DRAG & DROP PARA SUBIDA ---
        function handleDroppedFiles(files) {
          if (!files.length) return;
          // Solo subir el primer archivo (puedes adaptar para múltiples)
          fileInput.files = files;
          if (fileNameDisplay) fileNameDisplay.textContent = files[0].name;
          uploadModal.show();
        }

        // --- VALIDACIÓN AVANZADA DE ARCHIVOS ---
        function validateFile(file) {
          const maxSize = 100 * 1024 * 1024; // 100MB
          const allowedTypes = [
            'image/', 'video/', 'audio/', 'application/pdf',
            'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            'text/plain', 'application/zip', 'application/x-7z-compressed', 'application/x-rar-compressed'
          ];
          if (file.size > maxSize) {
            showToast("Error", "El archivo excede el tamaño máximo permitido (100MB).", 'danger');
            return false;
          }
          if (!allowedTypes.some(type => file.type.startsWith(type))) {
            showToast("Error", "Tipo de archivo no permitido.", 'danger');
            return false;
          }
          return true;
        }

        // --- MEJOR PREVISUALIZACIÓN ---
        const handlePreview = (file) => {
          const previewContent = document.getElementById('file-preview-content');
          if (file.mimeType.startsWith('image/')) {
            previewContent.innerHTML = `
        <img src="/dashboard/utils/cdn/view/${USER_ID}/${file.fileName}" class="img-fluid" style="max-height: 70vh; max-width: 100%; object-fit: contain;">
      `;
          } else if (file.mimeType.startsWith('video/')) {
            previewContent.innerHTML = `
        <video controls style="max-height: 70vh; max-width: 100%;">
          <source src="/dashboard/utils/cdn/view/${USER_ID}/${file.fileName}" type="${file.mimeType}">
          Your browser does not support the video tag.
        </video>
      `;
          } else if (file.mimeType.startsWith('audio/')) {
            previewContent.innerHTML = `
        <div class="text-center">
          <i class="${getFileIcon(file.mimeType)} fa-5x mb-4"></i>
          <audio controls style="width: 100%;">
            <source src="/dashboard/utils/cdn/view/${USER_ID}/${file.fileName}" type="${file.mimeType}">
            Your browser does not support the audio element.
          </audio>
          <h4 class="mt-3">${file.title}</h4>
        </div>
      `;
          } else if (file.mimeType === 'application/pdf') {
            previewContent.innerHTML = `
        <iframe src="/dashboard/utils/cdn/view/${USER_ID}/${file.fileName}" style="width: 100%; height: 70vh;" frameborder="0"></iframe>
      `;
          } else if (file.mimeType.startsWith('text/')) {
            fetch(`/dashboard/utils/cdn/view/${USER_ID}/${file.fileName}`)
              .then(res => res.text())
              .then(text => {
                previewContent.innerHTML = `<pre style="max-height:70vh;overflow:auto;">${text.replace(/[<>&]/g, c => ({ '<': '&lt;', '>': '&gt;', '&': '&amp;' }[c]))}</pre>`;
              });
          } else {
            previewContent.innerHTML = `
        <div class="text-center">
          <i class="${getFileIcon(file.mimeType)} fa-5x mb-3"></i>
          <h4>${file.title}</h4>
          <p>${file.description || ''}</p>
          <p class="text-muted">${formatSize(file.size)} | ${getFileTypeName(file.mimeType)}</p>
          <a href="/dashboard/utils/cdn/view/${USER_ID}/${file.fileName}" class="btn btn-primary" download>
            <i class="fas fa-download me-2"></i> ${translations[currentLanguage].downloadBtn}
          </a>
        </div>
      `;
          }
          filePreviewModal.show();
        };

        // --- VALIDACIÓN EN SUBIDA ---
        const handleUpload = async (e) => {
          e.preventDefault();
          const submitBtn = document.getElementById('submit-upload-btn');
          const spinner = submitBtn.querySelector('.spinner-border');

          const title = document.getElementById('fileTitle').value;
          const description = document.getElementById('fileDescription').value;
          const file = fileInput.files[0];

          if (!title || !file) {
            showToast("Error", "Title and file are required.", 'danger');
            return;
          }
          if (!validateFile(file)) return;

          submitBtn.disabled = true;
          spinner.classList.remove('d-none');
          uploadProgress.style.display = 'block';
          globalProgressContainer.style.display = 'block';

          try {
            const formData = new FormData();
            formData.append('file', file);
            formData.append('userId', USER_ID);
            formData.append('title', title);
            formData.append('description', description);

            const result = await api.uploadFile(formData, (progress) => {
              uploadProgressBar.style.width = `${progress}%`;
              globalProgressBar.style.width = `${progress}%`;
            });

            if (result.success) {
              // Avatar pulse animación al subir archivo
              if (userAvatar) {
                userAvatar.classList.remove('pulse');
                void userAvatar.offsetWidth; // trigger reflow
                userAvatar.classList.add('pulse');
              }
              showToast(
                translations[currentLanguage].uploadSuccess,
                translations[currentLanguage].uploadSuccess,
                'success'
              );
              uploadModal.hide();
              sessionStorage.removeItem(`files-${USER_ID}`);
              await fetchAndRenderFiles();
            } else {
              showToast(
                translations[currentLanguage].errorUpload,
                result.message || translations[currentLanguage].errorUpload,
                'danger'
              );
            }
          } catch (error) {
            console.error("Upload error:", error);
            showToast(
              translations[currentLanguage].errorUpload,
              error.message || translations[currentLanguage].errorUpload,
              'danger'
            );
          } finally {
            submitBtn.disabled = false;
            spinner.classList.add('d-none');
            uploadProgress.style.display = 'none';
            uploadProgressBar.style.width = '0%';
            globalProgressContainer.style.display = 'none';
            globalProgressBar.style.width = '0%';
            uploadForm.reset();
            fileNameDisplay.textContent = '';
          }
        };

        // --- FUNCIÓN PARA COMPARTIR ARCHIVO ---
        function handleShare(file) {
          const shareUrl = `${window.location.origin}/dashboard/cdn/share?title=${encodeURIComponent(file.title)}&url=${encodeURIComponent(file.downloadUrl)}&mime=${encodeURIComponent(file.mimeType)}&size=${file.size}&date=${encodeURIComponent(file.uploadedAt)}`;

          navigator.clipboard.writeText(shareUrl).then(() => {
            showToast(
              translations[currentLanguage].copiedSuccess,
              translations[currentLanguage].copiedSuccess,
              'success'
            );
          }).catch(err => {
            console.error('Could not copy text: ', err);
            showToast(
              "Error",
              "Could not copy link to clipboard",
              'danger'
            );
          });
        }


        // --- FILTRO Y BÚSQUEDA ---
        function filterFiles() {
          const searchTerm = searchInput.value.toLowerCase();
          const activeFilter = document.querySelector('.filter-btn.active').dataset.filter;
          const filtered = currentFiles.filter(file => {
            const title = (file.title || '').toLowerCase();
            const description = (file.description || '').toLowerCase();
            const matchesSearch = title.includes(searchTerm) || description.includes(searchTerm);
            const matchesFilter = activeFilter === 'all' || getFileType(file.mimeType) === activeFilter;
            return matchesSearch && matchesFilter;
          });
          currentPage = 1;
          if (currentView === 'grid') renderFileGrid(filtered);
          else renderFileList(filtered);
        }

        // --- FETCH Y RENDER PRINCIPAL ---
        async function fetchAndRenderFiles() {
          loadingSpinner.classList.remove('d-none');
          fileGrid.innerHTML = '';
          fileListBody.innerHTML = '';
          noFilesMessage.classList.add('d-none');
          try {
            await new Promise(resolve => setTimeout(resolve, 50));
            const result = await api.getFiles(USER_ID);
            if (result.success) {
              currentFiles = result.data;
              currentPage = 1;
              renderCurrentView();
              setTimeout(() => {
                loadingSpinner.classList.add('d-none');
              }, 100);
            } else {
              showToast("Error", translations[currentLanguage].errorFetch, 'danger');
              loadingSpinner.classList.add('d-none');
              noFilesMessage.classList.remove('d-none');
            }
          } catch (error) {
            console.error("Error loading files:", error);
            loadingSpinner.classList.add('d-none');
            noFilesMessage.classList.remove('d-none');
            showToast("Error", translations[currentLanguage].errorFetch, 'danger');
          }
        }

        // --- NOTIFICACIONES PUSH (PLACEHOLDER) ---
        function setupPushNotifications() {
          if (!('Notification' in window)) return;
          // Placeholder: aquí iría la lógica real con backend/service worker
          // Notification.requestPermission().then(permission => { ... });
        }
        setupPushNotifications();

        // --- MANEJADORES DE EVENTOS ---

        if (themeSwitch) {
          themeSwitch.addEventListener('change', () => {
            const theme = themeSwitch.checked ? 'dark' : 'light';
            document.documentElement.setAttribute('data-bs-theme', theme);
            localStorage.setItem('theme', theme);
            if (themeIcon) themeIcon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
          });
        }

        if (langLinks && langLinks.length) {
          langLinks.forEach(link => {
            link.addEventListener('click', (e) => {
              e.preventDefault();
              currentLanguage = link.dataset.lang;
              localStorage.setItem('language', currentLanguage);
              updateTranslations();
              langLinks.forEach(l => l.classList.toggle('active', l === link));
            });
          });
        }

        if (dropZone) {
          dropZone.addEventListener('click', () => fileInput && fileInput.click());
          dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('dragover');
          });
          dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('dragover');
          });
          dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('dragover');
            if (e.dataTransfer.files.length && fileInput) {
              if (!validateFile(e.dataTransfer.files[0])) return;
              fileInput.files = e.dataTransfer.files;
              if (fileNameDisplay) fileNameDisplay.textContent = fileInput.files[0].name;
            }
          });
        }

        if (fileInput) {
          fileInput.addEventListener('change', () => {
            if (fileInput.files.length && fileNameDisplay) {
              fileNameDisplay.textContent = fileInput.files[0].name;
            }
          });
        }

        if (uploadForm) uploadForm.addEventListener('submit', handleUpload);
        if (searchInput) searchInput.addEventListener('input', filterFiles);

        if (filterButtons && filterButtons.length) {
          filterButtons.forEach(button => {
            button.addEventListener('click', () => {
              filterButtons.forEach(btn => btn.classList.remove('active'));
              button.classList.add('active');
              filterFiles();
            });
          });
        }

        if (refreshBtn) refreshBtn.addEventListener('click', fetchAndRenderFiles);

        // --- INICIALIZACIÓN ---
        const init = () => {
          const isSharedView = window.location.pathname.includes('/cdn/share') ||
            window.location.search.includes('share?title=');

          if (isSharedView) {
            if (mainView) mainView.style.display = 'none';
            if (sharedFileView) sharedFileView.style.display = 'block';

            // Asegurar que los parámetros existen antes de renderizar
            const params = new URLSearchParams(window.location.search);
            if (params.has('title') && params.has('url')) {
              renderSharedFileView(params);
              document.title = translations[currentLanguage].fileSharedTitle;
            } else {
              // Redirigir si faltan parámetros esenciales
              window.location.href = '/dashboard/cdn';
            }
          } else {
            if (mainView) mainView.style.display = 'block';
            if (sharedFileView) sharedFileView.style.display = 'none';
            setTimeout(fetchAndRenderFiles, 100);
          }

          // Set theme from localStorage or preference
          const savedTheme = localStorage.getItem('theme') ||
            'dark'; // Forzar dark por defecto
          document.documentElement.setAttribute('data-bs-theme', savedTheme);
          themeSwitch.checked = savedTheme === 'dark';
          themeIcon.className = savedTheme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
          // Set language from localStorage or browser
          const savedLanguage = localStorage.getItem('language') ||
            (navigator.language.startsWith('es') ? 'es' : 'en');
          currentLanguage = savedLanguage;
          document.querySelector(`.lang-link[data-lang="${savedLanguage}"]`).classList.add('active');
          updateTranslations();
        };

        setTimeout(init, 50);
      });
    </script>
</body>

</html>
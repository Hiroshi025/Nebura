<!-- SECCIÓN DE GESTIÓN DE TAREAS -->
<section class="card mb-4 fade-in"
  style="background: var(--card-bg-dark); border-radius: var(--border-radius); box-shadow: var(--box-shadow);">
  <div class="card-header d-flex align-items-center justify-content-between"
    style="background: transparent; border-bottom: 1px solid var(--input-border-dark);">
    <span class="section-title"><i class="fa-solid fa-list-check me-2"></i>Gestión de Tareas</span>
    <div>
      <button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#taskModal" title="Nueva tarea">
        <i class="fa fa-plus me-1"></i> Nueva Tarea
      </button>
      <button class="btn btn-outline-secondary" id="refreshTasksBtn" title="Recargar tareas">
        <i class="fa fa-sync-alt"></i>
      </button>
    </div>
  </div>
  <div class="card-body">
    <div class="search-group mb-3">
      <input type="text" id="taskSearch" class="form-control"
        placeholder="Buscar tareas por título, descripción, estado...">
      <span class="search-icon"><i class="fa fa-search"></i></span>
      <button class="clear-btn" type="button" style="display:none;"><i class="fa fa-times"></i></button>
    </div>
    <div class="table-responsive">
      <table class="table table-dark table-hover align-middle mb-0" id="tasksTable">
        <thead>
          <tr>
            <th>Título</th>
            <th>Estado</th>
            <th>Prioridad</th>
            <th>Vence</th>
            <th>Etiquetas</th>
            <th>Acciones</th>
          </tr>
        </thead>
        <tbody id="tasksTableBody">
          <!-- Las tareas se renderizan aquí -->
        </tbody>
      </table>
    </div>
  </div>
</section>

<!-- MODAL PARA CREAR/EDITAR TAREA -->
<div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content" style="background: var(--card-bg-dark); color: var(--text-color-dark);">
      <form id="taskForm">
        <div class="modal-header">
          <h5 class="modal-title" id="taskModalLabel">Nueva Tarea</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="taskId">
          <div class="mb-3">
            <label for="taskTitle" class="form-label">Título</label>
            <input type="text" class="form-control" id="taskTitle" required maxlength="100">
          </div>
          <div class="mb-3">
            <label for="taskDescription" class="form-label">Descripción</label>
            <textarea class="form-control" id="taskDescription" rows="2" maxlength="500"></textarea>
          </div>
          <div class="mb-3">
            <label for="taskDueDate" class="form-label">Fecha de vencimiento</label>
            <input type="date" class="form-control" id="taskDueDate">
          </div>
          <div class="mb-3">
            <label for="taskPriority" class="form-label">Prioridad</label>
            <select class="form-select" id="taskPriority">
              <option value="low">Baja</option>
              <option value="medium" selected>Media</option>
              <option value="high">Alta</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="taskStatus" class="form-label">Estado</label>
            <select class="form-select" id="taskStatus">
              <option value="pending" selected>Pendiente</option>
              <option value="completed">Completada</option>
              <option value="canceled">Cancelada</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="taskTags" class="form-label">Etiquetas (separadas por coma)</label>
            <input type="text" class="form-control" id="taskTags" placeholder="ej: trabajo, urgente">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" class="btn btn-primary">Guardar</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- MODAL DE CONFIRMACIÓN DE ELIMINACIÓN -->
<div class="modal fade" id="deleteTaskModal" tabindex="-1" aria-labelledby="deleteTaskModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content" style="background: var(--card-bg-dark); color: var(--text-color-dark);">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteTaskModalLabel">Eliminar Tarea</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body">
        ¿Estás seguro de que deseas eliminar esta tarea?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteTaskBtn">Eliminar</button>
      </div>
    </div>
  </div>
</div>

<!-- MODAL PARA VER DETALLES DE TAREA -->
<div class="modal fade" id="taskDetailsModal" tabindex="-1" aria-labelledby="taskDetailsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content" style="background: var(--card-bg-dark); color: var(--text-color-dark);">
      <div class="modal-header">
        <h5 class="modal-title" id="taskDetailsModalLabel">Detalles de Tarea</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <h6 class="text-muted">Título</h6>
          <p id="detailTitle" class="fs-5"></p>
        </div>
        <div class="mb-3">
          <h6 class="text-muted">Descripción</h6>
          <p id="detailDescription" class="text-break"></p>
        </div>
        <div class="row">
          <div class="col-md-6 mb-3">
            <h6 class="text-muted">Estado</h6>
            <p id="detailStatus"></p>
          </div>
          <div class="col-md-6 mb-3">
            <h6 class="text-muted">Prioridad</h6>
            <p id="detailPriority"></p>
          </div>
        </div>
        <div class="row">
          <div class="col-md-6 mb-3">
            <h6 class="text-muted">Fecha de vencimiento</h6>
            <p id="detailDueDate"></p>
          </div>
          <div class="col-md-6 mb-3">
            <h6 class="text-muted">Fecha de creación</h6>
            <p id="detailCreatedAt"></p>
          </div>
        </div>
        <div class="mb-3">
          <h6 class="text-muted">Etiquetas</h6>
          <div id="detailTags"></div>
        </div>
        <div class="mb-3">
          <h6 class="text-muted">Creada por</h6>
          <p id="detailCreatedBy"></p>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
      </div>
    </div>
  </div>
</div>

<script>
  (function () {
    const TASKS_API = '/dashboard/utils/tasks';
    let tasks = [];
    let editingTaskId = null;
    let currentSort = { column: 'dueDate', direction: 'asc' };

    // Renderiza la tabla de tareas
    function renderTasksTable(filter = '') {
      const tbody = document.getElementById('tasksTableBody');
      tbody.innerHTML = '';
      let filtered = [...tasks];

      // Aplicar filtro
      if (filter) {
        const f = filter.toLowerCase();
        filtered = filtered.filter(t =>
          t.title.toLowerCase().includes(f) ||
          (t.description && t.description.toLowerCase().includes(f)) ||
          t.status.toLowerCase().includes(f) ||
          t.priority.toLowerCase().includes(f) ||
          (t.tags && t.tags.join(',').toLowerCase().includes(f))
        );
      }

      // Aplicar ordenamiento
      filtered.sort((a, b) => {
        let valA, valB;

        switch (currentSort.column) {
          case 'title':
            valA = a.title.toLowerCase();
            valB = b.title.toLowerCase();
            break;
          case 'status':
            valA = a.status.toLowerCase();
            valB = b.status.toLowerCase();
            break;
          case 'priority':
            valA = a.priority.toLowerCase();
            valB = b.priority.toLowerCase();
            break;
          case 'dueDate':
            valA = a.dueDate ? new Date(a.dueDate).getTime() : 0;
            valB = b.dueDate ? new Date(b.dueDate).getTime() : 0;
            break;
          default:
            valA = a[currentSort.column];
            valB = b[currentSort.column];
        }

        if (valA < valB) return currentSort.direction === 'asc' ? -1 : 1;
        if (valA > valB) return currentSort.direction === 'asc' ? 1 : -1;
        return 0;
      });

      if (filtered.length === 0) {
        tbody.innerHTML = `<tr><td colspan="7" class="text-center text-muted">No hay tareas</td></tr>`;
        return;
      }

      // Limitar a 10 resultados para la paginación (puedes implementar paginación completa si lo deseas)
      filtered.slice(0, 10).forEach(task => {
        tbody.innerHTML += `
          <tr>
            <td>${task.title}</td>
            <td><span class="badge bg-${task.status === 'completed' ? 'success' : task.status === 'canceled' ? 'danger' : 'warning'} text-dark">${capitalize(task.status)}</span></td>
            <td><span class="badge bg-${task.priority === 'high' ? 'danger' : task.priority === 'medium' ? 'primary' : 'secondary'}">${capitalize(task.priority)}</span></td>
            <td>${task.dueDate ? new Date(task.dueDate).toLocaleDateString() : '-'}</td>
            <td>${task.tags && task.tags.length ? task.tags.map(t => `<span class='badge bg-info text-dark me-1'>${t}</span>`).join('') : '-'}</td>
            <td>
              <button class="btn btn-sm btn-outline-info me-1" onclick="openEditTask('${task.id}')" title="Editar"><i class="fa fa-edit"></i></button>
              <button class="btn btn-sm btn-outline-primary me-1" onclick="openTaskDetails('${task.id}')" title="Ver detalles"><i class="fa fa-eye"></i></button>
              <button class="btn btn-sm btn-outline-danger" onclick="openDeleteTask('${task.id}')" title="Eliminar"><i class="fa fa-trash"></i></button>
            </td>
          </tr>
        `;
      });

      // Mostrar mensaje si hay más resultados
      if (filtered.length > 10) {
        tbody.innerHTML += `<tr><td colspan="7" class="text-center text-muted">Mostrando 10 de ${filtered.length} tareas</td></tr>`;
      }
    }

    function capitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }

    // Fetch de tareas
    async function fetchTasks() {
      try {
        const res = await fetch(TASKS_API);
        if (!res.ok) throw new Error('Error al obtener tareas');
        tasks = await res.json();

        // Agregar información del creador si no está incluida
        tasks.forEach(task => {
          if (!task.createdBy) {
            task.createdBy = { id: '<%- user.id %>', name: '<%- user.name %>' };
          }
        });

        renderTasksTable(document.getElementById('taskSearch').value);
      } catch (e) {
        showToast('No se pudieron cargar las tareas', 'danger');
      }
    }

    // Crear o actualizar tarea
    async function submitTaskForm(e) {
      e.preventDefault();
      const id = document.getElementById('taskId').value;
      const title = document.getElementById('taskTitle').value.trim();
      const description = document.getElementById('taskDescription').value.trim();
      const dueDate = document.getElementById('taskDueDate').value;
      const priority = document.getElementById('taskPriority').value;
      const status = document.getElementById('taskStatus').value;
      const tags = document.getElementById('taskTags').value.split(',').map(t => t.trim()).filter(Boolean);
      const createdBy = JSON.parse('<%- JSON.stringify(user.id) %>');

      const payload = {
        title,
        description,
        dueDate: dueDate || undefined,
        priority,
        status,
        tags,
        createdBy
      };

      try {
        let res;
        if (id) {
          res = await fetch(`${TASKS_API}/${id}`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });
        } else {
          res = await fetch(TASKS_API, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });
        }
        if (!res.ok) throw new Error('Error al guardar la tarea');
        showToast('Tarea guardada correctamente', 'success');
        bootstrap.Modal.getOrCreateInstance(document.getElementById('taskModal')).hide();
        fetchTasks();
      } catch (e) {
        showToast('No se pudo guardar la tarea', 'danger');
      }
    }

    // Abrir modal para editar
    function openEditTask(id) {
      const task = tasks.find(t => t.id === id);
      if (!task) return;
      document.getElementById('taskId').value = task.id;
      document.getElementById('taskTitle').value = task.title;
      document.getElementById('taskDescription').value = task.description || '';
      document.getElementById('taskDueDate').value = task.dueDate ? new Date(task.dueDate).toISOString().split('T')[0] : '';
      document.getElementById('taskPriority').value = task.priority;
      document.getElementById('taskStatus').value = task.status;
      document.getElementById('taskTags').value = task.tags ? task.tags.join(', ') : '';
      document.getElementById('taskModalLabel').textContent = 'Editar Tarea';
      bootstrap.Modal.getOrCreateInstance(document.getElementById('taskModal')).show();
    }

    // Abrir modal de detalles
    function openTaskDetails(id) {
      const task = tasks.find(t => t.id === id);
      if (!task) return;

      document.getElementById('detailTitle').textContent = task.title;
      document.getElementById('detailDescription').textContent = task.description || 'Sin descripción';
      document.getElementById('detailStatus').innerHTML = `<span class="badge bg-${task.status === 'completed' ? 'success' : task.status === 'canceled' ? 'danger' : 'warning'} text-dark">${capitalize(task.status)}</span>`;
      document.getElementById('detailPriority').innerHTML = `<span class="badge bg-${task.priority === 'high' ? 'danger' : task.priority === 'medium' ? 'primary' : 'secondary'}">${capitalize(task.priority)}</span>`;
      document.getElementById('detailDueDate').textContent = task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'Sin fecha';
      document.getElementById('detailCreatedAt').textContent = task.createdAt ? new Date(task.createdAt).toLocaleString() : 'Fecha desconocida';

      const tagsContainer = document.getElementById('detailTags');
      tagsContainer.innerHTML = task.tags && task.tags.length ?
        task.tags.map(t => `<span class='badge bg-info text-dark me-1 mb-1'>${t}</span>`).join('') :
        'Sin etiquetas';

      document.getElementById('detailCreatedBy').textContent = task.createdBy ? task.createdBy : 'Usuario desconocido';

      bootstrap.Modal.getOrCreateInstance(document.getElementById('taskDetailsModal')).show();
    }

    // Abrir modal de confirmación de borrado
    function openDeleteTask(id) {
      editingTaskId = id;
      bootstrap.Modal.getOrCreateInstance(document.getElementById('deleteTaskModal')).show();
    }

    // Eliminar tarea
    async function deleteTask() {
      if (!editingTaskId) return;
      try {
        const res = await fetch(`${TASKS_API}/${editingTaskId}`, { method: 'DELETE' });
        if (!res.ok) throw new Error('Error al eliminar la tarea');
        showToast('Tarea eliminada', 'success');
        fetchTasks();
      } catch (e) {
        showToast('No se pudo eliminar la tarea', 'danger');
      } finally {
        editingTaskId = null;
        bootstrap.Modal.getOrCreateInstance(document.getElementById('deleteTaskModal')).hide();
      }
    }

    // Toast de notificación
    function showToast(msg, type = 'info') {
      const toast = document.getElementById('notificationToast');
      toast.className = `toast align-items-center text-bg-${type} border-0 show`;
      toast.innerHTML = `<div class="d-flex"><div class="toast-body">${msg}</div><button type="button" class="btn-close btn-close-white ms-auto me-2" data-bs-dismiss="toast"></button></div>`;
      setTimeout(() => { toast.classList.remove('show'); }, 3000);
    }

    // Ordenar por columna
    function sortTable(column) {
      if (currentSort.column === column) {
        currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
      } else {
        currentSort.column = column;
        currentSort.direction = 'asc';
      }
      renderTasksTable(document.getElementById('taskSearch').value);
    }

    // Eventos
    window.addEventListener('DOMContentLoaded', () => {
      fetchTasks();
      document.getElementById('taskForm').addEventListener('submit', submitTaskForm);
      document.getElementById('confirmDeleteTaskBtn').addEventListener('click', deleteTask);

      document.getElementById('taskModal').addEventListener('hidden.bs.modal', () => {
        document.getElementById('taskForm').reset();
        document.getElementById('taskId').value = '';
        document.getElementById('taskModalLabel').textContent = 'Nueva Tarea';
      });

      // Buscador
      const searchInput = document.getElementById('taskSearch');
      const clearBtn = document.querySelector('.search-group .clear-btn');
      searchInput.addEventListener('input', e => {
        renderTasksTable(e.target.value);
        clearBtn.style.display = e.target.value ? 'block' : 'none';
      });
      clearBtn.addEventListener('click', () => {
        searchInput.value = '';
        renderTasksTable();
        clearBtn.style.display = 'none';
      });

      // Tooltips
      const tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
      tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
      });

      // Ordenamiento de columnas
      document.querySelectorAll('#tasksTable th').forEach(th => {
        th.style.cursor = 'pointer';
        th.addEventListener('click', () => {
          const column = th.textContent.trim().toLowerCase();
          let sortColumn;
          switch (column) {
            case 'título': sortColumn = 'title'; break;
            case 'estado': sortColumn = 'status'; break;
            case 'prioridad': sortColumn = 'priority'; break;
            case 'vence': sortColumn = 'dueDate'; break;
            default: sortColumn = column;
          }
          sortTable(sortColumn);
        });
      });
    });

    // Exponer funciones globalmente para los botones de acción
    window.openEditTask = openEditTask;
    window.openDeleteTask = openDeleteTask;
    window.openTaskDetails = openTaskDetails;
  })();
</script>
